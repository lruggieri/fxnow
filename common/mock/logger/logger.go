// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocklogger

import (
	context "context"

	logger "github.com/lruggieri/fxnow/common/logger"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: format, args
func (_m *Logger) Debug(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Logger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *Logger_Expecter) Debug(format interface{}, args ...interface{}) *Logger_Debug_Call {
	return &Logger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{format}, args...)...)}
}

func (_c *Logger_Debug_Call) Run(run func(format string, args ...interface{})) *Logger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debug_Call) Return() *Logger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debug_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: format, args
func (_m *Logger) Error(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *Logger_Expecter) Error(format interface{}, args ...interface{}) *Logger_Error_Call {
	return &Logger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{format}, args...)...)}
}

func (_c *Logger_Error_Call) Run(run func(format string, args ...interface{})) *Logger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Error_Call) Return() *Logger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: format, args
func (_m *Logger) Info(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *Logger_Expecter) Info(format interface{}, args ...interface{}) *Logger_Info_Call {
	return &Logger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{format}, args...)...)}
}

func (_c *Logger_Info_Call) Run(run func(format string, args ...interface{})) *Logger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Info_Call) Return() *Logger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// SetLevel provides a mock function with given fields: level
func (_m *Logger) SetLevel(level logger.Level) logger.Logger {
	ret := _m.Called(level)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(logger.Level) logger.Logger); ok {
		r0 = rf(level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_SetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLevel'
type Logger_SetLevel_Call struct {
	*mock.Call
}

// SetLevel is a helper method to define mock.On call
//   - level logger.Level
func (_e *Logger_Expecter) SetLevel(level interface{}) *Logger_SetLevel_Call {
	return &Logger_SetLevel_Call{Call: _e.mock.On("SetLevel", level)}
}

func (_c *Logger_SetLevel_Call) Run(run func(level logger.Level)) *Logger_SetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.Level))
	})
	return _c
}

func (_c *Logger_SetLevel_Call) Return(_a0 logger.Logger) *Logger_SetLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_SetLevel_Call) RunAndReturn(run func(logger.Level) logger.Logger) *Logger_SetLevel_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *Logger) WithContext(ctx context.Context) logger.Logger {
	ret := _m.Called(ctx)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(context.Context) logger.Logger); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type Logger_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Logger_Expecter) WithContext(ctx interface{}) *Logger_WithContext_Call {
	return &Logger_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *Logger_WithContext_Call) Run(run func(ctx context.Context)) *Logger_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Logger_WithContext_Call) Return(_a0 logger.Logger) *Logger_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithContext_Call) RunAndReturn(run func(context.Context) logger.Logger) *Logger_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WithError provides a mock function with given fields: err
func (_m *Logger) WithError(err error) logger.Logger {
	ret := _m.Called(err)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(error) logger.Logger); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_WithError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithError'
type Logger_WithError_Call struct {
	*mock.Call
}

// WithError is a helper method to define mock.On call
//   - err error
func (_e *Logger_Expecter) WithError(err interface{}) *Logger_WithError_Call {
	return &Logger_WithError_Call{Call: _e.mock.On("WithError", err)}
}

func (_c *Logger_WithError_Call) Run(run func(err error)) *Logger_WithError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Logger_WithError_Call) Return(_a0 logger.Logger) *Logger_WithError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithError_Call) RunAndReturn(run func(error) logger.Logger) *Logger_WithError_Call {
	_c.Call.Return(run)
	return _c
}

// WithField provides a mock function with given fields: key, value
func (_m *Logger) WithField(key string, value interface{}) logger.Logger {
	ret := _m.Called(key, value)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(string, interface{}) logger.Logger); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_WithField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithField'
type Logger_WithField_Call struct {
	*mock.Call
}

// WithField is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *Logger_Expecter) WithField(key interface{}, value interface{}) *Logger_WithField_Call {
	return &Logger_WithField_Call{Call: _e.mock.On("WithField", key, value)}
}

func (_c *Logger_WithField_Call) Run(run func(key string, value interface{})) *Logger_WithField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Logger_WithField_Call) Return(_a0 logger.Logger) *Logger_WithField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithField_Call) RunAndReturn(run func(string, interface{}) logger.Logger) *Logger_WithField_Call {
	_c.Call.Return(run)
	return _c
}

// WithFields provides a mock function with given fields: fields
func (_m *Logger) WithFields(fields logger.Fields) logger.Logger {
	ret := _m.Called(fields)

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(logger.Fields) logger.Logger); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_WithFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithFields'
type Logger_WithFields_Call struct {
	*mock.Call
}

// WithFields is a helper method to define mock.On call
//   - fields logger.Fields
func (_e *Logger_Expecter) WithFields(fields interface{}) *Logger_WithFields_Call {
	return &Logger_WithFields_Call{Call: _e.mock.On("WithFields", fields)}
}

func (_c *Logger_WithFields_Call) Run(run func(fields logger.Fields)) *Logger_WithFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.Fields))
	})
	return _c
}

func (_c *Logger_WithFields_Call) Return(_a0 logger.Logger) *Logger_WithFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithFields_Call) RunAndReturn(run func(logger.Fields) logger.Logger) *Logger_WithFields_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
