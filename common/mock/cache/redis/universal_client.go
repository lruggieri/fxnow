// Code generated by mockery v2.20.2. DO NOT EDIT.

package mockredis

import (
	context "context"

	redis "github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UniversalClient is an autogenerated mock type for the UniversalClient type
type UniversalClient struct {
	mock.Mock
}

type UniversalClient_Expecter struct {
	mock *mock.Mock
}

func (_m *UniversalClient) EXPECT() *UniversalClient_Expecter {
	return &UniversalClient_Expecter{mock: &_m.Mock}
}

// ACLDryRun provides a mock function with given fields: ctx, username, command
func (_m *UniversalClient) ACLDryRun(ctx context.Context, username string, command ...interface{}) *redis.StringCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, username)
	_ca = append(_ca, command...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.StringCmd); ok {
		r0 = rf(ctx, username, command...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_ACLDryRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLDryRun'
type UniversalClient_ACLDryRun_Call struct {
	*mock.Call
}

// ACLDryRun is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - command ...interface{}
func (_e *UniversalClient_Expecter) ACLDryRun(ctx interface{}, username interface{}, command ...interface{}) *UniversalClient_ACLDryRun_Call {
	return &UniversalClient_ACLDryRun_Call{Call: _e.mock.On("ACLDryRun",
		append([]interface{}{ctx, username}, command...)...)}
}

func (_c *UniversalClient_ACLDryRun_Call) Run(run func(ctx context.Context, username string, command ...interface{})) *UniversalClient_ACLDryRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ACLDryRun_Call) Return(_a0 *redis.StringCmd) *UniversalClient_ACLDryRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ACLDryRun_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.StringCmd) *UniversalClient_ACLDryRun_Call {
	_c.Call.Return(run)
	return _c
}

// ACLLog provides a mock function with given fields: ctx, count
func (_m *UniversalClient) ACLLog(ctx context.Context, count int64) *redis.ACLLogCmd {
	ret := _m.Called(ctx, count)

	var r0 *redis.ACLLogCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64) *redis.ACLLogCmd); ok {
		r0 = rf(ctx, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ACLLogCmd)
		}
	}

	return r0
}

// UniversalClient_ACLLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLLog'
type UniversalClient_ACLLog_Call struct {
	*mock.Call
}

// ACLLog is a helper method to define mock.On call
//   - ctx context.Context
//   - count int64
func (_e *UniversalClient_Expecter) ACLLog(ctx interface{}, count interface{}) *UniversalClient_ACLLog_Call {
	return &UniversalClient_ACLLog_Call{Call: _e.mock.On("ACLLog", ctx, count)}
}

func (_c *UniversalClient_ACLLog_Call) Run(run func(ctx context.Context, count int64)) *UniversalClient_ACLLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UniversalClient_ACLLog_Call) Return(_a0 *redis.ACLLogCmd) *UniversalClient_ACLLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ACLLog_Call) RunAndReturn(run func(context.Context, int64) *redis.ACLLogCmd) *UniversalClient_ACLLog_Call {
	_c.Call.Return(run)
	return _c
}

// ACLLogReset provides a mock function with given fields: ctx
func (_m *UniversalClient) ACLLogReset(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ACLLogReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ACLLogReset'
type UniversalClient_ACLLogReset_Call struct {
	*mock.Call
}

// ACLLogReset is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ACLLogReset(ctx interface{}) *UniversalClient_ACLLogReset_Call {
	return &UniversalClient_ACLLogReset_Call{Call: _e.mock.On("ACLLogReset", ctx)}
}

func (_c *UniversalClient_ACLLogReset_Call) Run(run func(ctx context.Context)) *UniversalClient_ACLLogReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ACLLogReset_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ACLLogReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ACLLogReset_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ACLLogReset_Call {
	_c.Call.Return(run)
	return _c
}

// AddHook provides a mock function with given fields: _a0
func (_m *UniversalClient) AddHook(_a0 redis.Hook) {
	_m.Called(_a0)
}

// UniversalClient_AddHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHook'
type UniversalClient_AddHook_Call struct {
	*mock.Call
}

// AddHook is a helper method to define mock.On call
//   - _a0 redis.Hook
func (_e *UniversalClient_Expecter) AddHook(_a0 interface{}) *UniversalClient_AddHook_Call {
	return &UniversalClient_AddHook_Call{Call: _e.mock.On("AddHook", _a0)}
}

func (_c *UniversalClient_AddHook_Call) Run(run func(_a0 redis.Hook)) *UniversalClient_AddHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(redis.Hook))
	})
	return _c
}

func (_c *UniversalClient_AddHook_Call) Return() *UniversalClient_AddHook_Call {
	_c.Call.Return()
	return _c
}

func (_c *UniversalClient_AddHook_Call) RunAndReturn(run func(redis.Hook)) *UniversalClient_AddHook_Call {
	_c.Call.Return(run)
	return _c
}

// Append provides a mock function with given fields: ctx, key, value
func (_m *UniversalClient) Append(ctx context.Context, key string, value string) *redis.IntCmd {
	ret := _m.Called(ctx, key, value)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type UniversalClient_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *UniversalClient_Expecter) Append(ctx interface{}, key interface{}, value interface{}) *UniversalClient_Append_Call {
	return &UniversalClient_Append_Call{Call: _e.mock.On("Append", ctx, key, value)}
}

func (_c *UniversalClient_Append_Call) Run(run func(ctx context.Context, key string, value string)) *UniversalClient_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_Append_Call) Return(_a0 *redis.IntCmd) *UniversalClient_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Append_Call) RunAndReturn(run func(context.Context, string, string) *redis.IntCmd) *UniversalClient_Append_Call {
	_c.Call.Return(run)
	return _c
}

// BFAdd provides a mock function with given fields: ctx, key, element
func (_m *UniversalClient) BFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	ret := _m.Called(ctx, key, element)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_BFAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFAdd'
type UniversalClient_BFAdd_Call struct {
	*mock.Call
}

// BFAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *UniversalClient_Expecter) BFAdd(ctx interface{}, key interface{}, element interface{}) *UniversalClient_BFAdd_Call {
	return &UniversalClient_BFAdd_Call{Call: _e.mock.On("BFAdd", ctx, key, element)}
}

func (_c *UniversalClient_BFAdd_Call) Run(run func(ctx context.Context, key string, element interface{})) *UniversalClient_BFAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_BFAdd_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_BFAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFAdd_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.BoolCmd) *UniversalClient_BFAdd_Call {
	_c.Call.Return(run)
	return _c
}

// BFCard provides a mock function with given fields: ctx, key
func (_m *UniversalClient) BFCard(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_BFCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFCard'
type UniversalClient_BFCard_Call struct {
	*mock.Call
}

// BFCard is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) BFCard(ctx interface{}, key interface{}) *UniversalClient_BFCard_Call {
	return &UniversalClient_BFCard_Call{Call: _e.mock.On("BFCard", ctx, key)}
}

func (_c *UniversalClient_BFCard_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_BFCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_BFCard_Call) Return(_a0 *redis.IntCmd) *UniversalClient_BFCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFCard_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_BFCard_Call {
	_c.Call.Return(run)
	return _c
}

// BFExists provides a mock function with given fields: ctx, key, element
func (_m *UniversalClient) BFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	ret := _m.Called(ctx, key, element)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_BFExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFExists'
type UniversalClient_BFExists_Call struct {
	*mock.Call
}

// BFExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *UniversalClient_Expecter) BFExists(ctx interface{}, key interface{}, element interface{}) *UniversalClient_BFExists_Call {
	return &UniversalClient_BFExists_Call{Call: _e.mock.On("BFExists", ctx, key, element)}
}

func (_c *UniversalClient_BFExists_Call) Run(run func(ctx context.Context, key string, element interface{})) *UniversalClient_BFExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_BFExists_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_BFExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFExists_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.BoolCmd) *UniversalClient_BFExists_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfo provides a mock function with given fields: ctx, key
func (_m *UniversalClient) BFInfo(ctx context.Context, key string) *redis.BFInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BFInfoCmd)
		}
	}

	return r0
}

// UniversalClient_BFInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfo'
type UniversalClient_BFInfo_Call struct {
	*mock.Call
}

// BFInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) BFInfo(ctx interface{}, key interface{}) *UniversalClient_BFInfo_Call {
	return &UniversalClient_BFInfo_Call{Call: _e.mock.On("BFInfo", ctx, key)}
}

func (_c *UniversalClient_BFInfo_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_BFInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_BFInfo_Call) Return(_a0 *redis.BFInfoCmd) *UniversalClient_BFInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFInfo_Call) RunAndReturn(run func(context.Context, string) *redis.BFInfoCmd) *UniversalClient_BFInfo_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoArg provides a mock function with given fields: ctx, key, option
func (_m *UniversalClient) BFInfoArg(ctx context.Context, key string, option string) *redis.BFInfoCmd {
	ret := _m.Called(ctx, key, option)

	var r0 *redis.BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.BFInfoCmd); ok {
		r0 = rf(ctx, key, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BFInfoCmd)
		}
	}

	return r0
}

// UniversalClient_BFInfoArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoArg'
type UniversalClient_BFInfoArg_Call struct {
	*mock.Call
}

// BFInfoArg is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - option string
func (_e *UniversalClient_Expecter) BFInfoArg(ctx interface{}, key interface{}, option interface{}) *UniversalClient_BFInfoArg_Call {
	return &UniversalClient_BFInfoArg_Call{Call: _e.mock.On("BFInfoArg", ctx, key, option)}
}

func (_c *UniversalClient_BFInfoArg_Call) Run(run func(ctx context.Context, key string, option string)) *UniversalClient_BFInfoArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_BFInfoArg_Call) Return(_a0 *redis.BFInfoCmd) *UniversalClient_BFInfoArg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFInfoArg_Call) RunAndReturn(run func(context.Context, string, string) *redis.BFInfoCmd) *UniversalClient_BFInfoArg_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoCapacity provides a mock function with given fields: ctx, key
func (_m *UniversalClient) BFInfoCapacity(ctx context.Context, key string) *redis.BFInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BFInfoCmd)
		}
	}

	return r0
}

// UniversalClient_BFInfoCapacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoCapacity'
type UniversalClient_BFInfoCapacity_Call struct {
	*mock.Call
}

// BFInfoCapacity is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) BFInfoCapacity(ctx interface{}, key interface{}) *UniversalClient_BFInfoCapacity_Call {
	return &UniversalClient_BFInfoCapacity_Call{Call: _e.mock.On("BFInfoCapacity", ctx, key)}
}

func (_c *UniversalClient_BFInfoCapacity_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_BFInfoCapacity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_BFInfoCapacity_Call) Return(_a0 *redis.BFInfoCmd) *UniversalClient_BFInfoCapacity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFInfoCapacity_Call) RunAndReturn(run func(context.Context, string) *redis.BFInfoCmd) *UniversalClient_BFInfoCapacity_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoExpansion provides a mock function with given fields: ctx, key
func (_m *UniversalClient) BFInfoExpansion(ctx context.Context, key string) *redis.BFInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BFInfoCmd)
		}
	}

	return r0
}

// UniversalClient_BFInfoExpansion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoExpansion'
type UniversalClient_BFInfoExpansion_Call struct {
	*mock.Call
}

// BFInfoExpansion is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) BFInfoExpansion(ctx interface{}, key interface{}) *UniversalClient_BFInfoExpansion_Call {
	return &UniversalClient_BFInfoExpansion_Call{Call: _e.mock.On("BFInfoExpansion", ctx, key)}
}

func (_c *UniversalClient_BFInfoExpansion_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_BFInfoExpansion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_BFInfoExpansion_Call) Return(_a0 *redis.BFInfoCmd) *UniversalClient_BFInfoExpansion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFInfoExpansion_Call) RunAndReturn(run func(context.Context, string) *redis.BFInfoCmd) *UniversalClient_BFInfoExpansion_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoFilters provides a mock function with given fields: ctx, key
func (_m *UniversalClient) BFInfoFilters(ctx context.Context, key string) *redis.BFInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BFInfoCmd)
		}
	}

	return r0
}

// UniversalClient_BFInfoFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoFilters'
type UniversalClient_BFInfoFilters_Call struct {
	*mock.Call
}

// BFInfoFilters is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) BFInfoFilters(ctx interface{}, key interface{}) *UniversalClient_BFInfoFilters_Call {
	return &UniversalClient_BFInfoFilters_Call{Call: _e.mock.On("BFInfoFilters", ctx, key)}
}

func (_c *UniversalClient_BFInfoFilters_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_BFInfoFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_BFInfoFilters_Call) Return(_a0 *redis.BFInfoCmd) *UniversalClient_BFInfoFilters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFInfoFilters_Call) RunAndReturn(run func(context.Context, string) *redis.BFInfoCmd) *UniversalClient_BFInfoFilters_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoItems provides a mock function with given fields: ctx, key
func (_m *UniversalClient) BFInfoItems(ctx context.Context, key string) *redis.BFInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BFInfoCmd)
		}
	}

	return r0
}

// UniversalClient_BFInfoItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoItems'
type UniversalClient_BFInfoItems_Call struct {
	*mock.Call
}

// BFInfoItems is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) BFInfoItems(ctx interface{}, key interface{}) *UniversalClient_BFInfoItems_Call {
	return &UniversalClient_BFInfoItems_Call{Call: _e.mock.On("BFInfoItems", ctx, key)}
}

func (_c *UniversalClient_BFInfoItems_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_BFInfoItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_BFInfoItems_Call) Return(_a0 *redis.BFInfoCmd) *UniversalClient_BFInfoItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFInfoItems_Call) RunAndReturn(run func(context.Context, string) *redis.BFInfoCmd) *UniversalClient_BFInfoItems_Call {
	_c.Call.Return(run)
	return _c
}

// BFInfoSize provides a mock function with given fields: ctx, key
func (_m *UniversalClient) BFInfoSize(ctx context.Context, key string) *redis.BFInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.BFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.BFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BFInfoCmd)
		}
	}

	return r0
}

// UniversalClient_BFInfoSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInfoSize'
type UniversalClient_BFInfoSize_Call struct {
	*mock.Call
}

// BFInfoSize is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) BFInfoSize(ctx interface{}, key interface{}) *UniversalClient_BFInfoSize_Call {
	return &UniversalClient_BFInfoSize_Call{Call: _e.mock.On("BFInfoSize", ctx, key)}
}

func (_c *UniversalClient_BFInfoSize_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_BFInfoSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_BFInfoSize_Call) Return(_a0 *redis.BFInfoCmd) *UniversalClient_BFInfoSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFInfoSize_Call) RunAndReturn(run func(context.Context, string) *redis.BFInfoCmd) *UniversalClient_BFInfoSize_Call {
	_c.Call.Return(run)
	return _c
}

// BFInsert provides a mock function with given fields: ctx, key, options, elements
func (_m *UniversalClient) BFInsert(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.BFInsertOptions, ...interface{}) *redis.BoolSliceCmd); ok {
		r0 = rf(ctx, key, options, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolSliceCmd)
		}
	}

	return r0
}

// UniversalClient_BFInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFInsert'
type UniversalClient_BFInsert_Call struct {
	*mock.Call
}

// BFInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *redis.BFInsertOptions
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) BFInsert(ctx interface{}, key interface{}, options interface{}, elements ...interface{}) *UniversalClient_BFInsert_Call {
	return &UniversalClient_BFInsert_Call{Call: _e.mock.On("BFInsert",
		append([]interface{}{ctx, key, options}, elements...)...)}
}

func (_c *UniversalClient_BFInsert_Call) Run(run func(ctx context.Context, key string, options *redis.BFInsertOptions, elements ...interface{})) *UniversalClient_BFInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.BFInsertOptions), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BFInsert_Call) Return(_a0 *redis.BoolSliceCmd) *UniversalClient_BFInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFInsert_Call) RunAndReturn(run func(context.Context, string, *redis.BFInsertOptions, ...interface{}) *redis.BoolSliceCmd) *UniversalClient_BFInsert_Call {
	_c.Call.Return(run)
	return _c
}

// BFLoadChunk provides a mock function with given fields: ctx, key, iterator, data
func (_m *UniversalClient) BFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	ret := _m.Called(ctx, key, iterator, data)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, iterator, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_BFLoadChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFLoadChunk'
type UniversalClient_BFLoadChunk_Call struct {
	*mock.Call
}

// BFLoadChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
//   - data interface{}
func (_e *UniversalClient_Expecter) BFLoadChunk(ctx interface{}, key interface{}, iterator interface{}, data interface{}) *UniversalClient_BFLoadChunk_Call {
	return &UniversalClient_BFLoadChunk_Call{Call: _e.mock.On("BFLoadChunk", ctx, key, iterator, data)}
}

func (_c *UniversalClient_BFLoadChunk_Call) Run(run func(ctx context.Context, key string, iterator int64, data interface{})) *UniversalClient_BFLoadChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_BFLoadChunk_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_BFLoadChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFLoadChunk_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *redis.StatusCmd) *UniversalClient_BFLoadChunk_Call {
	_c.Call.Return(run)
	return _c
}

// BFMAdd provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) BFMAdd(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolSliceCmd)
		}
	}

	return r0
}

// UniversalClient_BFMAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFMAdd'
type UniversalClient_BFMAdd_Call struct {
	*mock.Call
}

// BFMAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) BFMAdd(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_BFMAdd_Call {
	return &UniversalClient_BFMAdd_Call{Call: _e.mock.On("BFMAdd",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_BFMAdd_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *UniversalClient_BFMAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BFMAdd_Call) Return(_a0 *redis.BoolSliceCmd) *UniversalClient_BFMAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFMAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.BoolSliceCmd) *UniversalClient_BFMAdd_Call {
	_c.Call.Return(run)
	return _c
}

// BFMExists provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) BFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolSliceCmd)
		}
	}

	return r0
}

// UniversalClient_BFMExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFMExists'
type UniversalClient_BFMExists_Call struct {
	*mock.Call
}

// BFMExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) BFMExists(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_BFMExists_Call {
	return &UniversalClient_BFMExists_Call{Call: _e.mock.On("BFMExists",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_BFMExists_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *UniversalClient_BFMExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BFMExists_Call) Return(_a0 *redis.BoolSliceCmd) *UniversalClient_BFMExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFMExists_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.BoolSliceCmd) *UniversalClient_BFMExists_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserve provides a mock function with given fields: ctx, key, errorRate, capacity
func (_m *UniversalClient) BFReserve(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, errorRate, capacity)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_BFReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserve'
type UniversalClient_BFReserve_Call struct {
	*mock.Call
}

// BFReserve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - capacity int64
func (_e *UniversalClient_Expecter) BFReserve(ctx interface{}, key interface{}, errorRate interface{}, capacity interface{}) *UniversalClient_BFReserve_Call {
	return &UniversalClient_BFReserve_Call{Call: _e.mock.On("BFReserve", ctx, key, errorRate, capacity)}
}

func (_c *UniversalClient_BFReserve_Call) Run(run func(ctx context.Context, key string, errorRate float64, capacity int64)) *UniversalClient_BFReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_BFReserve_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_BFReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFReserve_Call) RunAndReturn(run func(context.Context, string, float64, int64) *redis.StatusCmd) *UniversalClient_BFReserve_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserveArgs provides a mock function with given fields: ctx, key, options
func (_m *UniversalClient) BFReserveArgs(ctx context.Context, key string, options *redis.BFReserveOptions) *redis.StatusCmd {
	ret := _m.Called(ctx, key, options)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.BFReserveOptions) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_BFReserveArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserveArgs'
type UniversalClient_BFReserveArgs_Call struct {
	*mock.Call
}

// BFReserveArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *redis.BFReserveOptions
func (_e *UniversalClient_Expecter) BFReserveArgs(ctx interface{}, key interface{}, options interface{}) *UniversalClient_BFReserveArgs_Call {
	return &UniversalClient_BFReserveArgs_Call{Call: _e.mock.On("BFReserveArgs", ctx, key, options)}
}

func (_c *UniversalClient_BFReserveArgs_Call) Run(run func(ctx context.Context, key string, options *redis.BFReserveOptions)) *UniversalClient_BFReserveArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.BFReserveOptions))
	})
	return _c
}

func (_c *UniversalClient_BFReserveArgs_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_BFReserveArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFReserveArgs_Call) RunAndReturn(run func(context.Context, string, *redis.BFReserveOptions) *redis.StatusCmd) *UniversalClient_BFReserveArgs_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserveExpansion provides a mock function with given fields: ctx, key, errorRate, capacity, expansion
func (_m *UniversalClient) BFReserveExpansion(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, errorRate, capacity, expansion)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, int64, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, capacity, expansion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_BFReserveExpansion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserveExpansion'
type UniversalClient_BFReserveExpansion_Call struct {
	*mock.Call
}

// BFReserveExpansion is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - capacity int64
//   - expansion int64
func (_e *UniversalClient_Expecter) BFReserveExpansion(ctx interface{}, key interface{}, errorRate interface{}, capacity interface{}, expansion interface{}) *UniversalClient_BFReserveExpansion_Call {
	return &UniversalClient_BFReserveExpansion_Call{Call: _e.mock.On("BFReserveExpansion", ctx, key, errorRate, capacity, expansion)}
}

func (_c *UniversalClient_BFReserveExpansion_Call) Run(run func(ctx context.Context, key string, errorRate float64, capacity int64, expansion int64)) *UniversalClient_BFReserveExpansion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *UniversalClient_BFReserveExpansion_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_BFReserveExpansion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFReserveExpansion_Call) RunAndReturn(run func(context.Context, string, float64, int64, int64) *redis.StatusCmd) *UniversalClient_BFReserveExpansion_Call {
	_c.Call.Return(run)
	return _c
}

// BFReserveNonScaling provides a mock function with given fields: ctx, key, errorRate, capacity
func (_m *UniversalClient) BFReserveNonScaling(ctx context.Context, key string, errorRate float64, capacity int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, errorRate, capacity)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_BFReserveNonScaling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFReserveNonScaling'
type UniversalClient_BFReserveNonScaling_Call struct {
	*mock.Call
}

// BFReserveNonScaling is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - capacity int64
func (_e *UniversalClient_Expecter) BFReserveNonScaling(ctx interface{}, key interface{}, errorRate interface{}, capacity interface{}) *UniversalClient_BFReserveNonScaling_Call {
	return &UniversalClient_BFReserveNonScaling_Call{Call: _e.mock.On("BFReserveNonScaling", ctx, key, errorRate, capacity)}
}

func (_c *UniversalClient_BFReserveNonScaling_Call) Run(run func(ctx context.Context, key string, errorRate float64, capacity int64)) *UniversalClient_BFReserveNonScaling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_BFReserveNonScaling_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_BFReserveNonScaling_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFReserveNonScaling_Call) RunAndReturn(run func(context.Context, string, float64, int64) *redis.StatusCmd) *UniversalClient_BFReserveNonScaling_Call {
	_c.Call.Return(run)
	return _c
}

// BFScanDump provides a mock function with given fields: ctx, key, iterator
func (_m *UniversalClient) BFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	ret := _m.Called(ctx, key, iterator)

	var r0 *redis.ScanDumpCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.ScanDumpCmd); ok {
		r0 = rf(ctx, key, iterator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ScanDumpCmd)
		}
	}

	return r0
}

// UniversalClient_BFScanDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BFScanDump'
type UniversalClient_BFScanDump_Call struct {
	*mock.Call
}

// BFScanDump is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
func (_e *UniversalClient_Expecter) BFScanDump(ctx interface{}, key interface{}, iterator interface{}) *UniversalClient_BFScanDump_Call {
	return &UniversalClient_BFScanDump_Call{Call: _e.mock.On("BFScanDump", ctx, key, iterator)}
}

func (_c *UniversalClient_BFScanDump_Call) Run(run func(ctx context.Context, key string, iterator int64)) *UniversalClient_BFScanDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_BFScanDump_Call) Return(_a0 *redis.ScanDumpCmd) *UniversalClient_BFScanDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BFScanDump_Call) RunAndReturn(run func(context.Context, string, int64) *redis.ScanDumpCmd) *UniversalClient_BFScanDump_Call {
	_c.Call.Return(run)
	return _c
}

// BLMPop provides a mock function with given fields: ctx, timeout, direction, count, keys
func (_m *UniversalClient) BLMPop(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout, direction, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.KeyValuesCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, string, int64, ...string) *redis.KeyValuesCmd); ok {
		r0 = rf(ctx, timeout, direction, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.KeyValuesCmd)
		}
	}

	return r0
}

// UniversalClient_BLMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLMPop'
type UniversalClient_BLMPop_Call struct {
	*mock.Call
}

// BLMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - direction string
//   - count int64
//   - keys ...string
func (_e *UniversalClient_Expecter) BLMPop(ctx interface{}, timeout interface{}, direction interface{}, count interface{}, keys ...interface{}) *UniversalClient_BLMPop_Call {
	return &UniversalClient_BLMPop_Call{Call: _e.mock.On("BLMPop",
		append([]interface{}{ctx, timeout, direction, count}, keys...)...)}
}

func (_c *UniversalClient_BLMPop_Call) Run(run func(ctx context.Context, timeout time.Duration, direction string, count int64, keys ...string)) *UniversalClient_BLMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(string), args[3].(int64), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BLMPop_Call) Return(_a0 *redis.KeyValuesCmd) *UniversalClient_BLMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BLMPop_Call) RunAndReturn(run func(context.Context, time.Duration, string, int64, ...string) *redis.KeyValuesCmd) *UniversalClient_BLMPop_Call {
	_c.Call.Return(run)
	return _c
}

// BLMove provides a mock function with given fields: ctx, source, destination, srcpos, destpos, timeout
func (_m *UniversalClient) BLMove(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration) *redis.StringCmd {
	ret := _m.Called(ctx, source, destination, srcpos, destpos, timeout)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, time.Duration) *redis.StringCmd); ok {
		r0 = rf(ctx, source, destination, srcpos, destpos, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_BLMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLMove'
type UniversalClient_BLMove_Call struct {
	*mock.Call
}

// BLMove is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
//   - srcpos string
//   - destpos string
//   - timeout time.Duration
func (_e *UniversalClient_Expecter) BLMove(ctx interface{}, source interface{}, destination interface{}, srcpos interface{}, destpos interface{}, timeout interface{}) *UniversalClient_BLMove_Call {
	return &UniversalClient_BLMove_Call{Call: _e.mock.On("BLMove", ctx, source, destination, srcpos, destpos, timeout)}
}

func (_c *UniversalClient_BLMove_Call) Run(run func(ctx context.Context, source string, destination string, srcpos string, destpos string, timeout time.Duration)) *UniversalClient_BLMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_BLMove_Call) Return(_a0 *redis.StringCmd) *UniversalClient_BLMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BLMove_Call) RunAndReturn(run func(context.Context, string, string, string, string, time.Duration) *redis.StringCmd) *UniversalClient_BLMove_Call {
	_c.Call.Return(run)
	return _c
}

// BLPop provides a mock function with given fields: ctx, timeout, keys
func (_m *UniversalClient) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_BLPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BLPop'
type UniversalClient_BLPop_Call struct {
	*mock.Call
}

// BLPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *UniversalClient_Expecter) BLPop(ctx interface{}, timeout interface{}, keys ...interface{}) *UniversalClient_BLPop_Call {
	return &UniversalClient_BLPop_Call{Call: _e.mock.On("BLPop",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *UniversalClient_BLPop_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *UniversalClient_BLPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BLPop_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_BLPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BLPop_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *redis.StringSliceCmd) *UniversalClient_BLPop_Call {
	_c.Call.Return(run)
	return _c
}

// BRPop provides a mock function with given fields: ctx, timeout, keys
func (_m *UniversalClient) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_BRPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BRPop'
type UniversalClient_BRPop_Call struct {
	*mock.Call
}

// BRPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *UniversalClient_Expecter) BRPop(ctx interface{}, timeout interface{}, keys ...interface{}) *UniversalClient_BRPop_Call {
	return &UniversalClient_BRPop_Call{Call: _e.mock.On("BRPop",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *UniversalClient_BRPop_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *UniversalClient_BRPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BRPop_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_BRPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BRPop_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *redis.StringSliceCmd) *UniversalClient_BRPop_Call {
	_c.Call.Return(run)
	return _c
}

// BRPopLPush provides a mock function with given fields: ctx, source, destination, timeout
func (_m *UniversalClient) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) *redis.StringCmd {
	ret := _m.Called(ctx, source, destination, timeout)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) *redis.StringCmd); ok {
		r0 = rf(ctx, source, destination, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_BRPopLPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BRPopLPush'
type UniversalClient_BRPopLPush_Call struct {
	*mock.Call
}

// BRPopLPush is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
//   - timeout time.Duration
func (_e *UniversalClient_Expecter) BRPopLPush(ctx interface{}, source interface{}, destination interface{}, timeout interface{}) *UniversalClient_BRPopLPush_Call {
	return &UniversalClient_BRPopLPush_Call{Call: _e.mock.On("BRPopLPush", ctx, source, destination, timeout)}
}

func (_c *UniversalClient_BRPopLPush_Call) Run(run func(ctx context.Context, source string, destination string, timeout time.Duration)) *UniversalClient_BRPopLPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_BRPopLPush_Call) Return(_a0 *redis.StringCmd) *UniversalClient_BRPopLPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BRPopLPush_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) *redis.StringCmd) *UniversalClient_BRPopLPush_Call {
	_c.Call.Return(run)
	return _c
}

// BZMPop provides a mock function with given fields: ctx, timeout, order, count, keys
func (_m *UniversalClient) BZMPop(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout, order, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.ZSliceWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, string, int64, ...string) *redis.ZSliceWithKeyCmd); ok {
		r0 = rf(ctx, timeout, order, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceWithKeyCmd)
		}
	}

	return r0
}

// UniversalClient_BZMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZMPop'
type UniversalClient_BZMPop_Call struct {
	*mock.Call
}

// BZMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - order string
//   - count int64
//   - keys ...string
func (_e *UniversalClient_Expecter) BZMPop(ctx interface{}, timeout interface{}, order interface{}, count interface{}, keys ...interface{}) *UniversalClient_BZMPop_Call {
	return &UniversalClient_BZMPop_Call{Call: _e.mock.On("BZMPop",
		append([]interface{}{ctx, timeout, order, count}, keys...)...)}
}

func (_c *UniversalClient_BZMPop_Call) Run(run func(ctx context.Context, timeout time.Duration, order string, count int64, keys ...string)) *UniversalClient_BZMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(string), args[3].(int64), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BZMPop_Call) Return(_a0 *redis.ZSliceWithKeyCmd) *UniversalClient_BZMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BZMPop_Call) RunAndReturn(run func(context.Context, time.Duration, string, int64, ...string) *redis.ZSliceWithKeyCmd) *UniversalClient_BZMPop_Call {
	_c.Call.Return(run)
	return _c
}

// BZPopMax provides a mock function with given fields: ctx, timeout, keys
func (_m *UniversalClient) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.ZWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *redis.ZWithKeyCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZWithKeyCmd)
		}
	}

	return r0
}

// UniversalClient_BZPopMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZPopMax'
type UniversalClient_BZPopMax_Call struct {
	*mock.Call
}

// BZPopMax is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *UniversalClient_Expecter) BZPopMax(ctx interface{}, timeout interface{}, keys ...interface{}) *UniversalClient_BZPopMax_Call {
	return &UniversalClient_BZPopMax_Call{Call: _e.mock.On("BZPopMax",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *UniversalClient_BZPopMax_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *UniversalClient_BZPopMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BZPopMax_Call) Return(_a0 *redis.ZWithKeyCmd) *UniversalClient_BZPopMax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BZPopMax_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *redis.ZWithKeyCmd) *UniversalClient_BZPopMax_Call {
	_c.Call.Return(run)
	return _c
}

// BZPopMin provides a mock function with given fields: ctx, timeout, keys
func (_m *UniversalClient) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.ZWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *redis.ZWithKeyCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZWithKeyCmd)
		}
	}

	return r0
}

// UniversalClient_BZPopMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZPopMin'
type UniversalClient_BZPopMin_Call struct {
	*mock.Call
}

// BZPopMin is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - keys ...string
func (_e *UniversalClient_Expecter) BZPopMin(ctx interface{}, timeout interface{}, keys ...interface{}) *UniversalClient_BZPopMin_Call {
	return &UniversalClient_BZPopMin_Call{Call: _e.mock.On("BZPopMin",
		append([]interface{}{ctx, timeout}, keys...)...)}
}

func (_c *UniversalClient_BZPopMin_Call) Run(run func(ctx context.Context, timeout time.Duration, keys ...string)) *UniversalClient_BZPopMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BZPopMin_Call) Return(_a0 *redis.ZWithKeyCmd) *UniversalClient_BZPopMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BZPopMin_Call) RunAndReturn(run func(context.Context, time.Duration, ...string) *redis.ZWithKeyCmd) *UniversalClient_BZPopMin_Call {
	_c.Call.Return(run)
	return _c
}

// BgRewriteAOF provides a mock function with given fields: ctx
func (_m *UniversalClient) BgRewriteAOF(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_BgRewriteAOF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BgRewriteAOF'
type UniversalClient_BgRewriteAOF_Call struct {
	*mock.Call
}

// BgRewriteAOF is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) BgRewriteAOF(ctx interface{}) *UniversalClient_BgRewriteAOF_Call {
	return &UniversalClient_BgRewriteAOF_Call{Call: _e.mock.On("BgRewriteAOF", ctx)}
}

func (_c *UniversalClient_BgRewriteAOF_Call) Run(run func(ctx context.Context)) *UniversalClient_BgRewriteAOF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_BgRewriteAOF_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_BgRewriteAOF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BgRewriteAOF_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_BgRewriteAOF_Call {
	_c.Call.Return(run)
	return _c
}

// BgSave provides a mock function with given fields: ctx
func (_m *UniversalClient) BgSave(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_BgSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BgSave'
type UniversalClient_BgSave_Call struct {
	*mock.Call
}

// BgSave is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) BgSave(ctx interface{}) *UniversalClient_BgSave_Call {
	return &UniversalClient_BgSave_Call{Call: _e.mock.On("BgSave", ctx)}
}

func (_c *UniversalClient_BgSave_Call) Run(run func(ctx context.Context)) *UniversalClient_BgSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_BgSave_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_BgSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BgSave_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_BgSave_Call {
	_c.Call.Return(run)
	return _c
}

// BitCount provides a mock function with given fields: ctx, key, bitCount
func (_m *UniversalClient) BitCount(ctx context.Context, key string, bitCount *redis.BitCount) *redis.IntCmd {
	ret := _m.Called(ctx, key, bitCount)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.BitCount) *redis.IntCmd); ok {
		r0 = rf(ctx, key, bitCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_BitCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitCount'
type UniversalClient_BitCount_Call struct {
	*mock.Call
}

// BitCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - bitCount *redis.BitCount
func (_e *UniversalClient_Expecter) BitCount(ctx interface{}, key interface{}, bitCount interface{}) *UniversalClient_BitCount_Call {
	return &UniversalClient_BitCount_Call{Call: _e.mock.On("BitCount", ctx, key, bitCount)}
}

func (_c *UniversalClient_BitCount_Call) Run(run func(ctx context.Context, key string, bitCount *redis.BitCount)) *UniversalClient_BitCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.BitCount))
	})
	return _c
}

func (_c *UniversalClient_BitCount_Call) Return(_a0 *redis.IntCmd) *UniversalClient_BitCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BitCount_Call) RunAndReturn(run func(context.Context, string, *redis.BitCount) *redis.IntCmd) *UniversalClient_BitCount_Call {
	_c.Call.Return(run)
	return _c
}

// BitField provides a mock function with given fields: ctx, key, args
func (_m *UniversalClient) BitField(ctx context.Context, key string, args ...interface{}) *redis.IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntSliceCmd); ok {
		r0 = rf(ctx, key, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntSliceCmd)
		}
	}

	return r0
}

// UniversalClient_BitField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitField'
type UniversalClient_BitField_Call struct {
	*mock.Call
}

// BitField is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - args ...interface{}
func (_e *UniversalClient_Expecter) BitField(ctx interface{}, key interface{}, args ...interface{}) *UniversalClient_BitField_Call {
	return &UniversalClient_BitField_Call{Call: _e.mock.On("BitField",
		append([]interface{}{ctx, key}, args...)...)}
}

func (_c *UniversalClient_BitField_Call) Run(run func(ctx context.Context, key string, args ...interface{})) *UniversalClient_BitField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BitField_Call) Return(_a0 *redis.IntSliceCmd) *UniversalClient_BitField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BitField_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntSliceCmd) *UniversalClient_BitField_Call {
	_c.Call.Return(run)
	return _c
}

// BitOpAnd provides a mock function with given fields: ctx, destKey, keys
func (_m *UniversalClient) BitOpAnd(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, destKey, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_BitOpAnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitOpAnd'
type UniversalClient_BitOpAnd_Call struct {
	*mock.Call
}

// BitOpAnd is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - keys ...string
func (_e *UniversalClient_Expecter) BitOpAnd(ctx interface{}, destKey interface{}, keys ...interface{}) *UniversalClient_BitOpAnd_Call {
	return &UniversalClient_BitOpAnd_Call{Call: _e.mock.On("BitOpAnd",
		append([]interface{}{ctx, destKey}, keys...)...)}
}

func (_c *UniversalClient_BitOpAnd_Call) Run(run func(ctx context.Context, destKey string, keys ...string)) *UniversalClient_BitOpAnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BitOpAnd_Call) Return(_a0 *redis.IntCmd) *UniversalClient_BitOpAnd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BitOpAnd_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.IntCmd) *UniversalClient_BitOpAnd_Call {
	_c.Call.Return(run)
	return _c
}

// BitOpNot provides a mock function with given fields: ctx, destKey, key
func (_m *UniversalClient) BitOpNot(ctx context.Context, destKey string, key string) *redis.IntCmd {
	ret := _m.Called(ctx, destKey, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, destKey, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_BitOpNot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitOpNot'
type UniversalClient_BitOpNot_Call struct {
	*mock.Call
}

// BitOpNot is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - key string
func (_e *UniversalClient_Expecter) BitOpNot(ctx interface{}, destKey interface{}, key interface{}) *UniversalClient_BitOpNot_Call {
	return &UniversalClient_BitOpNot_Call{Call: _e.mock.On("BitOpNot", ctx, destKey, key)}
}

func (_c *UniversalClient_BitOpNot_Call) Run(run func(ctx context.Context, destKey string, key string)) *UniversalClient_BitOpNot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_BitOpNot_Call) Return(_a0 *redis.IntCmd) *UniversalClient_BitOpNot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BitOpNot_Call) RunAndReturn(run func(context.Context, string, string) *redis.IntCmd) *UniversalClient_BitOpNot_Call {
	_c.Call.Return(run)
	return _c
}

// BitOpOr provides a mock function with given fields: ctx, destKey, keys
func (_m *UniversalClient) BitOpOr(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, destKey, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_BitOpOr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitOpOr'
type UniversalClient_BitOpOr_Call struct {
	*mock.Call
}

// BitOpOr is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - keys ...string
func (_e *UniversalClient_Expecter) BitOpOr(ctx interface{}, destKey interface{}, keys ...interface{}) *UniversalClient_BitOpOr_Call {
	return &UniversalClient_BitOpOr_Call{Call: _e.mock.On("BitOpOr",
		append([]interface{}{ctx, destKey}, keys...)...)}
}

func (_c *UniversalClient_BitOpOr_Call) Run(run func(ctx context.Context, destKey string, keys ...string)) *UniversalClient_BitOpOr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BitOpOr_Call) Return(_a0 *redis.IntCmd) *UniversalClient_BitOpOr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BitOpOr_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.IntCmd) *UniversalClient_BitOpOr_Call {
	_c.Call.Return(run)
	return _c
}

// BitOpXor provides a mock function with given fields: ctx, destKey, keys
func (_m *UniversalClient) BitOpXor(ctx context.Context, destKey string, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, destKey, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_BitOpXor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitOpXor'
type UniversalClient_BitOpXor_Call struct {
	*mock.Call
}

// BitOpXor is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - keys ...string
func (_e *UniversalClient_Expecter) BitOpXor(ctx interface{}, destKey interface{}, keys ...interface{}) *UniversalClient_BitOpXor_Call {
	return &UniversalClient_BitOpXor_Call{Call: _e.mock.On("BitOpXor",
		append([]interface{}{ctx, destKey}, keys...)...)}
}

func (_c *UniversalClient_BitOpXor_Call) Run(run func(ctx context.Context, destKey string, keys ...string)) *UniversalClient_BitOpXor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BitOpXor_Call) Return(_a0 *redis.IntCmd) *UniversalClient_BitOpXor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BitOpXor_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.IntCmd) *UniversalClient_BitOpXor_Call {
	_c.Call.Return(run)
	return _c
}

// BitPos provides a mock function with given fields: ctx, key, bit, pos
func (_m *UniversalClient) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *redis.IntCmd {
	_va := make([]interface{}, len(pos))
	for _i := range pos {
		_va[_i] = pos[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, bit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, ...int64) *redis.IntCmd); ok {
		r0 = rf(ctx, key, bit, pos...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_BitPos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitPos'
type UniversalClient_BitPos_Call struct {
	*mock.Call
}

// BitPos is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - bit int64
//   - pos ...int64
func (_e *UniversalClient_Expecter) BitPos(ctx interface{}, key interface{}, bit interface{}, pos ...interface{}) *UniversalClient_BitPos_Call {
	return &UniversalClient_BitPos_Call{Call: _e.mock.On("BitPos",
		append([]interface{}{ctx, key, bit}, pos...)...)}
}

func (_c *UniversalClient_BitPos_Call) Run(run func(ctx context.Context, key string, bit int64, pos ...int64)) *UniversalClient_BitPos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(int64), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_BitPos_Call) Return(_a0 *redis.IntCmd) *UniversalClient_BitPos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BitPos_Call) RunAndReturn(run func(context.Context, string, int64, ...int64) *redis.IntCmd) *UniversalClient_BitPos_Call {
	_c.Call.Return(run)
	return _c
}

// BitPosSpan provides a mock function with given fields: ctx, key, bit, start, end, span
func (_m *UniversalClient) BitPosSpan(ctx context.Context, key string, bit int8, start int64, end int64, span string) *redis.IntCmd {
	ret := _m.Called(ctx, key, bit, start, end, span)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int8, int64, int64, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, bit, start, end, span)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_BitPosSpan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BitPosSpan'
type UniversalClient_BitPosSpan_Call struct {
	*mock.Call
}

// BitPosSpan is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - bit int8
//   - start int64
//   - end int64
//   - span string
func (_e *UniversalClient_Expecter) BitPosSpan(ctx interface{}, key interface{}, bit interface{}, start interface{}, end interface{}, span interface{}) *UniversalClient_BitPosSpan_Call {
	return &UniversalClient_BitPosSpan_Call{Call: _e.mock.On("BitPosSpan", ctx, key, bit, start, end, span)}
}

func (_c *UniversalClient_BitPosSpan_Call) Run(run func(ctx context.Context, key string, bit int8, start int64, end int64, span string)) *UniversalClient_BitPosSpan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int8), args[3].(int64), args[4].(int64), args[5].(string))
	})
	return _c
}

func (_c *UniversalClient_BitPosSpan_Call) Return(_a0 *redis.IntCmd) *UniversalClient_BitPosSpan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_BitPosSpan_Call) RunAndReturn(run func(context.Context, string, int8, int64, int64, string) *redis.IntCmd) *UniversalClient_BitPosSpan_Call {
	_c.Call.Return(run)
	return _c
}

// CFAdd provides a mock function with given fields: ctx, key, element
func (_m *UniversalClient) CFAdd(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	ret := _m.Called(ctx, key, element)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_CFAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFAdd'
type UniversalClient_CFAdd_Call struct {
	*mock.Call
}

// CFAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *UniversalClient_Expecter) CFAdd(ctx interface{}, key interface{}, element interface{}) *UniversalClient_CFAdd_Call {
	return &UniversalClient_CFAdd_Call{Call: _e.mock.On("CFAdd", ctx, key, element)}
}

func (_c *UniversalClient_CFAdd_Call) Run(run func(ctx context.Context, key string, element interface{})) *UniversalClient_CFAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_CFAdd_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_CFAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFAdd_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.BoolCmd) *UniversalClient_CFAdd_Call {
	_c.Call.Return(run)
	return _c
}

// CFAddNX provides a mock function with given fields: ctx, key, element
func (_m *UniversalClient) CFAddNX(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	ret := _m.Called(ctx, key, element)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_CFAddNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFAddNX'
type UniversalClient_CFAddNX_Call struct {
	*mock.Call
}

// CFAddNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *UniversalClient_Expecter) CFAddNX(ctx interface{}, key interface{}, element interface{}) *UniversalClient_CFAddNX_Call {
	return &UniversalClient_CFAddNX_Call{Call: _e.mock.On("CFAddNX", ctx, key, element)}
}

func (_c *UniversalClient_CFAddNX_Call) Run(run func(ctx context.Context, key string, element interface{})) *UniversalClient_CFAddNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_CFAddNX_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_CFAddNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFAddNX_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.BoolCmd) *UniversalClient_CFAddNX_Call {
	_c.Call.Return(run)
	return _c
}

// CFCount provides a mock function with given fields: ctx, key, element
func (_m *UniversalClient) CFCount(ctx context.Context, key string, element interface{}) *redis.IntCmd {
	ret := _m.Called(ctx, key, element)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_CFCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFCount'
type UniversalClient_CFCount_Call struct {
	*mock.Call
}

// CFCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *UniversalClient_Expecter) CFCount(ctx interface{}, key interface{}, element interface{}) *UniversalClient_CFCount_Call {
	return &UniversalClient_CFCount_Call{Call: _e.mock.On("CFCount", ctx, key, element)}
}

func (_c *UniversalClient_CFCount_Call) Run(run func(ctx context.Context, key string, element interface{})) *UniversalClient_CFCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_CFCount_Call) Return(_a0 *redis.IntCmd) *UniversalClient_CFCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFCount_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.IntCmd) *UniversalClient_CFCount_Call {
	_c.Call.Return(run)
	return _c
}

// CFDel provides a mock function with given fields: ctx, key, element
func (_m *UniversalClient) CFDel(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	ret := _m.Called(ctx, key, element)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_CFDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFDel'
type UniversalClient_CFDel_Call struct {
	*mock.Call
}

// CFDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *UniversalClient_Expecter) CFDel(ctx interface{}, key interface{}, element interface{}) *UniversalClient_CFDel_Call {
	return &UniversalClient_CFDel_Call{Call: _e.mock.On("CFDel", ctx, key, element)}
}

func (_c *UniversalClient_CFDel_Call) Run(run func(ctx context.Context, key string, element interface{})) *UniversalClient_CFDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_CFDel_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_CFDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFDel_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.BoolCmd) *UniversalClient_CFDel_Call {
	_c.Call.Return(run)
	return _c
}

// CFExists provides a mock function with given fields: ctx, key, element
func (_m *UniversalClient) CFExists(ctx context.Context, key string, element interface{}) *redis.BoolCmd {
	ret := _m.Called(ctx, key, element)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, element)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_CFExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFExists'
type UniversalClient_CFExists_Call struct {
	*mock.Call
}

// CFExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - element interface{}
func (_e *UniversalClient_Expecter) CFExists(ctx interface{}, key interface{}, element interface{}) *UniversalClient_CFExists_Call {
	return &UniversalClient_CFExists_Call{Call: _e.mock.On("CFExists", ctx, key, element)}
}

func (_c *UniversalClient_CFExists_Call) Run(run func(ctx context.Context, key string, element interface{})) *UniversalClient_CFExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_CFExists_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_CFExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFExists_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.BoolCmd) *UniversalClient_CFExists_Call {
	_c.Call.Return(run)
	return _c
}

// CFInfo provides a mock function with given fields: ctx, key
func (_m *UniversalClient) CFInfo(ctx context.Context, key string) *redis.CFInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.CFInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.CFInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.CFInfoCmd)
		}
	}

	return r0
}

// UniversalClient_CFInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFInfo'
type UniversalClient_CFInfo_Call struct {
	*mock.Call
}

// CFInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) CFInfo(ctx interface{}, key interface{}) *UniversalClient_CFInfo_Call {
	return &UniversalClient_CFInfo_Call{Call: _e.mock.On("CFInfo", ctx, key)}
}

func (_c *UniversalClient_CFInfo_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_CFInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_CFInfo_Call) Return(_a0 *redis.CFInfoCmd) *UniversalClient_CFInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFInfo_Call) RunAndReturn(run func(context.Context, string) *redis.CFInfoCmd) *UniversalClient_CFInfo_Call {
	_c.Call.Return(run)
	return _c
}

// CFInsert provides a mock function with given fields: ctx, key, options, elements
func (_m *UniversalClient) CFInsert(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.CFInsertOptions, ...interface{}) *redis.BoolSliceCmd); ok {
		r0 = rf(ctx, key, options, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolSliceCmd)
		}
	}

	return r0
}

// UniversalClient_CFInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFInsert'
type UniversalClient_CFInsert_Call struct {
	*mock.Call
}

// CFInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *redis.CFInsertOptions
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) CFInsert(ctx interface{}, key interface{}, options interface{}, elements ...interface{}) *UniversalClient_CFInsert_Call {
	return &UniversalClient_CFInsert_Call{Call: _e.mock.On("CFInsert",
		append([]interface{}{ctx, key, options}, elements...)...)}
}

func (_c *UniversalClient_CFInsert_Call) Run(run func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{})) *UniversalClient_CFInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.CFInsertOptions), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_CFInsert_Call) Return(_a0 *redis.BoolSliceCmd) *UniversalClient_CFInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFInsert_Call) RunAndReturn(run func(context.Context, string, *redis.CFInsertOptions, ...interface{}) *redis.BoolSliceCmd) *UniversalClient_CFInsert_Call {
	_c.Call.Return(run)
	return _c
}

// CFInsertNX provides a mock function with given fields: ctx, key, options, elements
func (_m *UniversalClient) CFInsertNX(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{}) *redis.IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, options)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.CFInsertOptions, ...interface{}) *redis.IntSliceCmd); ok {
		r0 = rf(ctx, key, options, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntSliceCmd)
		}
	}

	return r0
}

// UniversalClient_CFInsertNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFInsertNX'
type UniversalClient_CFInsertNX_Call struct {
	*mock.Call
}

// CFInsertNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *redis.CFInsertOptions
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) CFInsertNX(ctx interface{}, key interface{}, options interface{}, elements ...interface{}) *UniversalClient_CFInsertNX_Call {
	return &UniversalClient_CFInsertNX_Call{Call: _e.mock.On("CFInsertNX",
		append([]interface{}{ctx, key, options}, elements...)...)}
}

func (_c *UniversalClient_CFInsertNX_Call) Run(run func(ctx context.Context, key string, options *redis.CFInsertOptions, elements ...interface{})) *UniversalClient_CFInsertNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.CFInsertOptions), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_CFInsertNX_Call) Return(_a0 *redis.IntSliceCmd) *UniversalClient_CFInsertNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFInsertNX_Call) RunAndReturn(run func(context.Context, string, *redis.CFInsertOptions, ...interface{}) *redis.IntSliceCmd) *UniversalClient_CFInsertNX_Call {
	_c.Call.Return(run)
	return _c
}

// CFLoadChunk provides a mock function with given fields: ctx, key, iterator, data
func (_m *UniversalClient) CFLoadChunk(ctx context.Context, key string, iterator int64, data interface{}) *redis.StatusCmd {
	ret := _m.Called(ctx, key, iterator, data)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, iterator, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CFLoadChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFLoadChunk'
type UniversalClient_CFLoadChunk_Call struct {
	*mock.Call
}

// CFLoadChunk is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
//   - data interface{}
func (_e *UniversalClient_Expecter) CFLoadChunk(ctx interface{}, key interface{}, iterator interface{}, data interface{}) *UniversalClient_CFLoadChunk_Call {
	return &UniversalClient_CFLoadChunk_Call{Call: _e.mock.On("CFLoadChunk", ctx, key, iterator, data)}
}

func (_c *UniversalClient_CFLoadChunk_Call) Run(run func(ctx context.Context, key string, iterator int64, data interface{})) *UniversalClient_CFLoadChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_CFLoadChunk_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CFLoadChunk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFLoadChunk_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *redis.StatusCmd) *UniversalClient_CFLoadChunk_Call {
	_c.Call.Return(run)
	return _c
}

// CFMExists provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) CFMExists(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolSliceCmd)
		}
	}

	return r0
}

// UniversalClient_CFMExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFMExists'
type UniversalClient_CFMExists_Call struct {
	*mock.Call
}

// CFMExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) CFMExists(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_CFMExists_Call {
	return &UniversalClient_CFMExists_Call{Call: _e.mock.On("CFMExists",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_CFMExists_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *UniversalClient_CFMExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_CFMExists_Call) Return(_a0 *redis.BoolSliceCmd) *UniversalClient_CFMExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFMExists_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.BoolSliceCmd) *UniversalClient_CFMExists_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserve provides a mock function with given fields: ctx, key, capacity
func (_m *UniversalClient) CFReserve(ctx context.Context, key string, capacity int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, capacity)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CFReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserve'
type UniversalClient_CFReserve_Call struct {
	*mock.Call
}

// CFReserve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
func (_e *UniversalClient_Expecter) CFReserve(ctx interface{}, key interface{}, capacity interface{}) *UniversalClient_CFReserve_Call {
	return &UniversalClient_CFReserve_Call{Call: _e.mock.On("CFReserve", ctx, key, capacity)}
}

func (_c *UniversalClient_CFReserve_Call) Run(run func(ctx context.Context, key string, capacity int64)) *UniversalClient_CFReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_CFReserve_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CFReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFReserve_Call) RunAndReturn(run func(context.Context, string, int64) *redis.StatusCmd) *UniversalClient_CFReserve_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveArgs provides a mock function with given fields: ctx, key, options
func (_m *UniversalClient) CFReserveArgs(ctx context.Context, key string, options *redis.CFReserveOptions) *redis.StatusCmd {
	ret := _m.Called(ctx, key, options)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.CFReserveOptions) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CFReserveArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveArgs'
type UniversalClient_CFReserveArgs_Call struct {
	*mock.Call
}

// CFReserveArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - options *redis.CFReserveOptions
func (_e *UniversalClient_Expecter) CFReserveArgs(ctx interface{}, key interface{}, options interface{}) *UniversalClient_CFReserveArgs_Call {
	return &UniversalClient_CFReserveArgs_Call{Call: _e.mock.On("CFReserveArgs", ctx, key, options)}
}

func (_c *UniversalClient_CFReserveArgs_Call) Run(run func(ctx context.Context, key string, options *redis.CFReserveOptions)) *UniversalClient_CFReserveArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.CFReserveOptions))
	})
	return _c
}

func (_c *UniversalClient_CFReserveArgs_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CFReserveArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFReserveArgs_Call) RunAndReturn(run func(context.Context, string, *redis.CFReserveOptions) *redis.StatusCmd) *UniversalClient_CFReserveArgs_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveBucketSize provides a mock function with given fields: ctx, key, capacity, bucketsize
func (_m *UniversalClient) CFReserveBucketSize(ctx context.Context, key string, capacity int64, bucketsize int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, capacity, bucketsize)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, capacity, bucketsize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CFReserveBucketSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveBucketSize'
type UniversalClient_CFReserveBucketSize_Call struct {
	*mock.Call
}

// CFReserveBucketSize is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
//   - bucketsize int64
func (_e *UniversalClient_Expecter) CFReserveBucketSize(ctx interface{}, key interface{}, capacity interface{}, bucketsize interface{}) *UniversalClient_CFReserveBucketSize_Call {
	return &UniversalClient_CFReserveBucketSize_Call{Call: _e.mock.On("CFReserveBucketSize", ctx, key, capacity, bucketsize)}
}

func (_c *UniversalClient_CFReserveBucketSize_Call) Run(run func(ctx context.Context, key string, capacity int64, bucketsize int64)) *UniversalClient_CFReserveBucketSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_CFReserveBucketSize_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CFReserveBucketSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFReserveBucketSize_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.StatusCmd) *UniversalClient_CFReserveBucketSize_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveExpansion provides a mock function with given fields: ctx, key, capacity, expansion
func (_m *UniversalClient) CFReserveExpansion(ctx context.Context, key string, capacity int64, expansion int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, capacity, expansion)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, capacity, expansion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CFReserveExpansion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveExpansion'
type UniversalClient_CFReserveExpansion_Call struct {
	*mock.Call
}

// CFReserveExpansion is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
//   - expansion int64
func (_e *UniversalClient_Expecter) CFReserveExpansion(ctx interface{}, key interface{}, capacity interface{}, expansion interface{}) *UniversalClient_CFReserveExpansion_Call {
	return &UniversalClient_CFReserveExpansion_Call{Call: _e.mock.On("CFReserveExpansion", ctx, key, capacity, expansion)}
}

func (_c *UniversalClient_CFReserveExpansion_Call) Run(run func(ctx context.Context, key string, capacity int64, expansion int64)) *UniversalClient_CFReserveExpansion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_CFReserveExpansion_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CFReserveExpansion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFReserveExpansion_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.StatusCmd) *UniversalClient_CFReserveExpansion_Call {
	_c.Call.Return(run)
	return _c
}

// CFReserveMaxIterations provides a mock function with given fields: ctx, key, capacity, maxiterations
func (_m *UniversalClient) CFReserveMaxIterations(ctx context.Context, key string, capacity int64, maxiterations int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, capacity, maxiterations)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, capacity, maxiterations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CFReserveMaxIterations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFReserveMaxIterations'
type UniversalClient_CFReserveMaxIterations_Call struct {
	*mock.Call
}

// CFReserveMaxIterations is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - capacity int64
//   - maxiterations int64
func (_e *UniversalClient_Expecter) CFReserveMaxIterations(ctx interface{}, key interface{}, capacity interface{}, maxiterations interface{}) *UniversalClient_CFReserveMaxIterations_Call {
	return &UniversalClient_CFReserveMaxIterations_Call{Call: _e.mock.On("CFReserveMaxIterations", ctx, key, capacity, maxiterations)}
}

func (_c *UniversalClient_CFReserveMaxIterations_Call) Run(run func(ctx context.Context, key string, capacity int64, maxiterations int64)) *UniversalClient_CFReserveMaxIterations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_CFReserveMaxIterations_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CFReserveMaxIterations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFReserveMaxIterations_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.StatusCmd) *UniversalClient_CFReserveMaxIterations_Call {
	_c.Call.Return(run)
	return _c
}

// CFScanDump provides a mock function with given fields: ctx, key, iterator
func (_m *UniversalClient) CFScanDump(ctx context.Context, key string, iterator int64) *redis.ScanDumpCmd {
	ret := _m.Called(ctx, key, iterator)

	var r0 *redis.ScanDumpCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.ScanDumpCmd); ok {
		r0 = rf(ctx, key, iterator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ScanDumpCmd)
		}
	}

	return r0
}

// UniversalClient_CFScanDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CFScanDump'
type UniversalClient_CFScanDump_Call struct {
	*mock.Call
}

// CFScanDump is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - iterator int64
func (_e *UniversalClient_Expecter) CFScanDump(ctx interface{}, key interface{}, iterator interface{}) *UniversalClient_CFScanDump_Call {
	return &UniversalClient_CFScanDump_Call{Call: _e.mock.On("CFScanDump", ctx, key, iterator)}
}

func (_c *UniversalClient_CFScanDump_Call) Run(run func(ctx context.Context, key string, iterator int64)) *UniversalClient_CFScanDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_CFScanDump_Call) Return(_a0 *redis.ScanDumpCmd) *UniversalClient_CFScanDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CFScanDump_Call) RunAndReturn(run func(context.Context, string, int64) *redis.ScanDumpCmd) *UniversalClient_CFScanDump_Call {
	_c.Call.Return(run)
	return _c
}

// CMSIncrBy provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) CMSIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntSliceCmd)
		}
	}

	return r0
}

// UniversalClient_CMSIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSIncrBy'
type UniversalClient_CMSIncrBy_Call struct {
	*mock.Call
}

// CMSIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) CMSIncrBy(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_CMSIncrBy_Call {
	return &UniversalClient_CMSIncrBy_Call{Call: _e.mock.On("CMSIncrBy",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_CMSIncrBy_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *UniversalClient_CMSIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_CMSIncrBy_Call) Return(_a0 *redis.IntSliceCmd) *UniversalClient_CMSIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CMSIncrBy_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntSliceCmd) *UniversalClient_CMSIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// CMSInfo provides a mock function with given fields: ctx, key
func (_m *UniversalClient) CMSInfo(ctx context.Context, key string) *redis.CMSInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.CMSInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.CMSInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.CMSInfoCmd)
		}
	}

	return r0
}

// UniversalClient_CMSInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSInfo'
type UniversalClient_CMSInfo_Call struct {
	*mock.Call
}

// CMSInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) CMSInfo(ctx interface{}, key interface{}) *UniversalClient_CMSInfo_Call {
	return &UniversalClient_CMSInfo_Call{Call: _e.mock.On("CMSInfo", ctx, key)}
}

func (_c *UniversalClient_CMSInfo_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_CMSInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_CMSInfo_Call) Return(_a0 *redis.CMSInfoCmd) *UniversalClient_CMSInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CMSInfo_Call) RunAndReturn(run func(context.Context, string) *redis.CMSInfoCmd) *UniversalClient_CMSInfo_Call {
	_c.Call.Return(run)
	return _c
}

// CMSInitByDim provides a mock function with given fields: ctx, key, width, height
func (_m *UniversalClient) CMSInitByDim(ctx context.Context, key string, width int64, height int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, width, height)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, width, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CMSInitByDim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSInitByDim'
type UniversalClient_CMSInitByDim_Call struct {
	*mock.Call
}

// CMSInitByDim is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - width int64
//   - height int64
func (_e *UniversalClient_Expecter) CMSInitByDim(ctx interface{}, key interface{}, width interface{}, height interface{}) *UniversalClient_CMSInitByDim_Call {
	return &UniversalClient_CMSInitByDim_Call{Call: _e.mock.On("CMSInitByDim", ctx, key, width, height)}
}

func (_c *UniversalClient_CMSInitByDim_Call) Run(run func(ctx context.Context, key string, width int64, height int64)) *UniversalClient_CMSInitByDim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_CMSInitByDim_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CMSInitByDim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CMSInitByDim_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.StatusCmd) *UniversalClient_CMSInitByDim_Call {
	_c.Call.Return(run)
	return _c
}

// CMSInitByProb provides a mock function with given fields: ctx, key, errorRate, probability
func (_m *UniversalClient) CMSInitByProb(ctx context.Context, key string, errorRate float64, probability float64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, errorRate, probability)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, errorRate, probability)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CMSInitByProb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSInitByProb'
type UniversalClient_CMSInitByProb_Call struct {
	*mock.Call
}

// CMSInitByProb is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - errorRate float64
//   - probability float64
func (_e *UniversalClient_Expecter) CMSInitByProb(ctx interface{}, key interface{}, errorRate interface{}, probability interface{}) *UniversalClient_CMSInitByProb_Call {
	return &UniversalClient_CMSInitByProb_Call{Call: _e.mock.On("CMSInitByProb", ctx, key, errorRate, probability)}
}

func (_c *UniversalClient_CMSInitByProb_Call) Run(run func(ctx context.Context, key string, errorRate float64, probability float64)) *UniversalClient_CMSInitByProb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *UniversalClient_CMSInitByProb_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CMSInitByProb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CMSInitByProb_Call) RunAndReturn(run func(context.Context, string, float64, float64) *redis.StatusCmd) *UniversalClient_CMSInitByProb_Call {
	_c.Call.Return(run)
	return _c
}

// CMSMerge provides a mock function with given fields: ctx, destKey, sourceKeys
func (_m *UniversalClient) CMSMerge(ctx context.Context, destKey string, sourceKeys ...string) *redis.StatusCmd {
	_va := make([]interface{}, len(sourceKeys))
	for _i := range sourceKeys {
		_va[_i] = sourceKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.StatusCmd); ok {
		r0 = rf(ctx, destKey, sourceKeys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CMSMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSMerge'
type UniversalClient_CMSMerge_Call struct {
	*mock.Call
}

// CMSMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - sourceKeys ...string
func (_e *UniversalClient_Expecter) CMSMerge(ctx interface{}, destKey interface{}, sourceKeys ...interface{}) *UniversalClient_CMSMerge_Call {
	return &UniversalClient_CMSMerge_Call{Call: _e.mock.On("CMSMerge",
		append([]interface{}{ctx, destKey}, sourceKeys...)...)}
}

func (_c *UniversalClient_CMSMerge_Call) Run(run func(ctx context.Context, destKey string, sourceKeys ...string)) *UniversalClient_CMSMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_CMSMerge_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CMSMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CMSMerge_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.StatusCmd) *UniversalClient_CMSMerge_Call {
	_c.Call.Return(run)
	return _c
}

// CMSMergeWithWeight provides a mock function with given fields: ctx, destKey, sourceKeys
func (_m *UniversalClient) CMSMergeWithWeight(ctx context.Context, destKey string, sourceKeys map[string]int64) *redis.StatusCmd {
	ret := _m.Called(ctx, destKey, sourceKeys)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, destKey, sourceKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_CMSMergeWithWeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSMergeWithWeight'
type UniversalClient_CMSMergeWithWeight_Call struct {
	*mock.Call
}

// CMSMergeWithWeight is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - sourceKeys map[string]int64
func (_e *UniversalClient_Expecter) CMSMergeWithWeight(ctx interface{}, destKey interface{}, sourceKeys interface{}) *UniversalClient_CMSMergeWithWeight_Call {
	return &UniversalClient_CMSMergeWithWeight_Call{Call: _e.mock.On("CMSMergeWithWeight", ctx, destKey, sourceKeys)}
}

func (_c *UniversalClient_CMSMergeWithWeight_Call) Run(run func(ctx context.Context, destKey string, sourceKeys map[string]int64)) *UniversalClient_CMSMergeWithWeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]int64))
	})
	return _c
}

func (_c *UniversalClient_CMSMergeWithWeight_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_CMSMergeWithWeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CMSMergeWithWeight_Call) RunAndReturn(run func(context.Context, string, map[string]int64) *redis.StatusCmd) *UniversalClient_CMSMergeWithWeight_Call {
	_c.Call.Return(run)
	return _c
}

// CMSQuery provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) CMSQuery(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntSliceCmd)
		}
	}

	return r0
}

// UniversalClient_CMSQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CMSQuery'
type UniversalClient_CMSQuery_Call struct {
	*mock.Call
}

// CMSQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) CMSQuery(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_CMSQuery_Call {
	return &UniversalClient_CMSQuery_Call{Call: _e.mock.On("CMSQuery",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_CMSQuery_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *UniversalClient_CMSQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_CMSQuery_Call) Return(_a0 *redis.IntSliceCmd) *UniversalClient_CMSQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CMSQuery_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntSliceCmd) *UniversalClient_CMSQuery_Call {
	_c.Call.Return(run)
	return _c
}

// ClientGetName provides a mock function with given fields: ctx
func (_m *UniversalClient) ClientGetName(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_ClientGetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientGetName'
type UniversalClient_ClientGetName_Call struct {
	*mock.Call
}

// ClientGetName is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClientGetName(ctx interface{}) *UniversalClient_ClientGetName_Call {
	return &UniversalClient_ClientGetName_Call{Call: _e.mock.On("ClientGetName", ctx)}
}

func (_c *UniversalClient_ClientGetName_Call) Run(run func(ctx context.Context)) *UniversalClient_ClientGetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClientGetName_Call) Return(_a0 *redis.StringCmd) *UniversalClient_ClientGetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientGetName_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_ClientGetName_Call {
	_c.Call.Return(run)
	return _c
}

// ClientID provides a mock function with given fields: ctx
func (_m *UniversalClient) ClientID(ctx context.Context) *redis.IntCmd {
	ret := _m.Called(ctx)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientID'
type UniversalClient_ClientID_Call struct {
	*mock.Call
}

// ClientID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClientID(ctx interface{}) *UniversalClient_ClientID_Call {
	return &UniversalClient_ClientID_Call{Call: _e.mock.On("ClientID", ctx)}
}

func (_c *UniversalClient_ClientID_Call) Run(run func(ctx context.Context)) *UniversalClient_ClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClientID_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ClientID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientID_Call) RunAndReturn(run func(context.Context) *redis.IntCmd) *UniversalClient_ClientID_Call {
	_c.Call.Return(run)
	return _c
}

// ClientInfo provides a mock function with given fields: ctx
func (_m *UniversalClient) ClientInfo(ctx context.Context) *redis.ClientInfoCmd {
	ret := _m.Called(ctx)

	var r0 *redis.ClientInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.ClientInfoCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ClientInfoCmd)
		}
	}

	return r0
}

// UniversalClient_ClientInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientInfo'
type UniversalClient_ClientInfo_Call struct {
	*mock.Call
}

// ClientInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClientInfo(ctx interface{}) *UniversalClient_ClientInfo_Call {
	return &UniversalClient_ClientInfo_Call{Call: _e.mock.On("ClientInfo", ctx)}
}

func (_c *UniversalClient_ClientInfo_Call) Run(run func(ctx context.Context)) *UniversalClient_ClientInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClientInfo_Call) Return(_a0 *redis.ClientInfoCmd) *UniversalClient_ClientInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientInfo_Call) RunAndReturn(run func(context.Context) *redis.ClientInfoCmd) *UniversalClient_ClientInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ClientKill provides a mock function with given fields: ctx, ipPort
func (_m *UniversalClient) ClientKill(ctx context.Context, ipPort string) *redis.StatusCmd {
	ret := _m.Called(ctx, ipPort)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, ipPort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClientKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientKill'
type UniversalClient_ClientKill_Call struct {
	*mock.Call
}

// ClientKill is a helper method to define mock.On call
//   - ctx context.Context
//   - ipPort string
func (_e *UniversalClient_Expecter) ClientKill(ctx interface{}, ipPort interface{}) *UniversalClient_ClientKill_Call {
	return &UniversalClient_ClientKill_Call{Call: _e.mock.On("ClientKill", ctx, ipPort)}
}

func (_c *UniversalClient_ClientKill_Call) Run(run func(ctx context.Context, ipPort string)) *UniversalClient_ClientKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ClientKill_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClientKill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientKill_Call) RunAndReturn(run func(context.Context, string) *redis.StatusCmd) *UniversalClient_ClientKill_Call {
	_c.Call.Return(run)
	return _c
}

// ClientKillByFilter provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) ClientKillByFilter(ctx context.Context, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ClientKillByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientKillByFilter'
type UniversalClient_ClientKillByFilter_Call struct {
	*mock.Call
}

// ClientKillByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) ClientKillByFilter(ctx interface{}, keys ...interface{}) *UniversalClient_ClientKillByFilter_Call {
	return &UniversalClient_ClientKillByFilter_Call{Call: _e.mock.On("ClientKillByFilter",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_ClientKillByFilter_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_ClientKillByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ClientKillByFilter_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ClientKillByFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientKillByFilter_Call) RunAndReturn(run func(context.Context, ...string) *redis.IntCmd) *UniversalClient_ClientKillByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// ClientList provides a mock function with given fields: ctx
func (_m *UniversalClient) ClientList(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_ClientList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientList'
type UniversalClient_ClientList_Call struct {
	*mock.Call
}

// ClientList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClientList(ctx interface{}) *UniversalClient_ClientList_Call {
	return &UniversalClient_ClientList_Call{Call: _e.mock.On("ClientList", ctx)}
}

func (_c *UniversalClient_ClientList_Call) Run(run func(ctx context.Context)) *UniversalClient_ClientList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClientList_Call) Return(_a0 *redis.StringCmd) *UniversalClient_ClientList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientList_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_ClientList_Call {
	_c.Call.Return(run)
	return _c
}

// ClientPause provides a mock function with given fields: ctx, dur
func (_m *UniversalClient) ClientPause(ctx context.Context, dur time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, dur)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, dur)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_ClientPause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientPause'
type UniversalClient_ClientPause_Call struct {
	*mock.Call
}

// ClientPause is a helper method to define mock.On call
//   - ctx context.Context
//   - dur time.Duration
func (_e *UniversalClient_Expecter) ClientPause(ctx interface{}, dur interface{}) *UniversalClient_ClientPause_Call {
	return &UniversalClient_ClientPause_Call{Call: _e.mock.On("ClientPause", ctx, dur)}
}

func (_c *UniversalClient_ClientPause_Call) Run(run func(ctx context.Context, dur time.Duration)) *UniversalClient_ClientPause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_ClientPause_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_ClientPause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientPause_Call) RunAndReturn(run func(context.Context, time.Duration) *redis.BoolCmd) *UniversalClient_ClientPause_Call {
	_c.Call.Return(run)
	return _c
}

// ClientUnblock provides a mock function with given fields: ctx, id
func (_m *UniversalClient) ClientUnblock(ctx context.Context, id int64) *redis.IntCmd {
	ret := _m.Called(ctx, id)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ClientUnblock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientUnblock'
type UniversalClient_ClientUnblock_Call struct {
	*mock.Call
}

// ClientUnblock is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *UniversalClient_Expecter) ClientUnblock(ctx interface{}, id interface{}) *UniversalClient_ClientUnblock_Call {
	return &UniversalClient_ClientUnblock_Call{Call: _e.mock.On("ClientUnblock", ctx, id)}
}

func (_c *UniversalClient_ClientUnblock_Call) Run(run func(ctx context.Context, id int64)) *UniversalClient_ClientUnblock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UniversalClient_ClientUnblock_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ClientUnblock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientUnblock_Call) RunAndReturn(run func(context.Context, int64) *redis.IntCmd) *UniversalClient_ClientUnblock_Call {
	_c.Call.Return(run)
	return _c
}

// ClientUnblockWithError provides a mock function with given fields: ctx, id
func (_m *UniversalClient) ClientUnblockWithError(ctx context.Context, id int64) *redis.IntCmd {
	ret := _m.Called(ctx, id)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ClientUnblockWithError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientUnblockWithError'
type UniversalClient_ClientUnblockWithError_Call struct {
	*mock.Call
}

// ClientUnblockWithError is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *UniversalClient_Expecter) ClientUnblockWithError(ctx interface{}, id interface{}) *UniversalClient_ClientUnblockWithError_Call {
	return &UniversalClient_ClientUnblockWithError_Call{Call: _e.mock.On("ClientUnblockWithError", ctx, id)}
}

func (_c *UniversalClient_ClientUnblockWithError_Call) Run(run func(ctx context.Context, id int64)) *UniversalClient_ClientUnblockWithError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UniversalClient_ClientUnblockWithError_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ClientUnblockWithError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientUnblockWithError_Call) RunAndReturn(run func(context.Context, int64) *redis.IntCmd) *UniversalClient_ClientUnblockWithError_Call {
	_c.Call.Return(run)
	return _c
}

// ClientUnpause provides a mock function with given fields: ctx
func (_m *UniversalClient) ClientUnpause(ctx context.Context) *redis.BoolCmd {
	ret := _m.Called(ctx)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.BoolCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_ClientUnpause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientUnpause'
type UniversalClient_ClientUnpause_Call struct {
	*mock.Call
}

// ClientUnpause is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClientUnpause(ctx interface{}) *UniversalClient_ClientUnpause_Call {
	return &UniversalClient_ClientUnpause_Call{Call: _e.mock.On("ClientUnpause", ctx)}
}

func (_c *UniversalClient_ClientUnpause_Call) Run(run func(ctx context.Context)) *UniversalClient_ClientUnpause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClientUnpause_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_ClientUnpause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClientUnpause_Call) RunAndReturn(run func(context.Context) *redis.BoolCmd) *UniversalClient_ClientUnpause_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *UniversalClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UniversalClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type UniversalClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *UniversalClient_Expecter) Close() *UniversalClient_Close_Call {
	return &UniversalClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *UniversalClient_Close_Call) Run(run func()) *UniversalClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UniversalClient_Close_Call) Return(_a0 error) *UniversalClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Close_Call) RunAndReturn(run func() error) *UniversalClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterAddSlots provides a mock function with given fields: ctx, slots
func (_m *UniversalClient) ClusterAddSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	_va := make([]interface{}, len(slots))
	for _i := range slots {
		_va[_i] = slots[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...int) *redis.StatusCmd); ok {
		r0 = rf(ctx, slots...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterAddSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterAddSlots'
type UniversalClient_ClusterAddSlots_Call struct {
	*mock.Call
}

// ClusterAddSlots is a helper method to define mock.On call
//   - ctx context.Context
//   - slots ...int
func (_e *UniversalClient_Expecter) ClusterAddSlots(ctx interface{}, slots ...interface{}) *UniversalClient_ClusterAddSlots_Call {
	return &UniversalClient_ClusterAddSlots_Call{Call: _e.mock.On("ClusterAddSlots",
		append([]interface{}{ctx}, slots...)...)}
}

func (_c *UniversalClient_ClusterAddSlots_Call) Run(run func(ctx context.Context, slots ...int)) *UniversalClient_ClusterAddSlots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ClusterAddSlots_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterAddSlots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterAddSlots_Call) RunAndReturn(run func(context.Context, ...int) *redis.StatusCmd) *UniversalClient_ClusterAddSlots_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterAddSlotsRange provides a mock function with given fields: ctx, min, max
func (_m *UniversalClient) ClusterAddSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	ret := _m.Called(ctx, min, max)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *redis.StatusCmd); ok {
		r0 = rf(ctx, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterAddSlotsRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterAddSlotsRange'
type UniversalClient_ClusterAddSlotsRange_Call struct {
	*mock.Call
}

// ClusterAddSlotsRange is a helper method to define mock.On call
//   - ctx context.Context
//   - min int
//   - max int
func (_e *UniversalClient_Expecter) ClusterAddSlotsRange(ctx interface{}, min interface{}, max interface{}) *UniversalClient_ClusterAddSlotsRange_Call {
	return &UniversalClient_ClusterAddSlotsRange_Call{Call: _e.mock.On("ClusterAddSlotsRange", ctx, min, max)}
}

func (_c *UniversalClient_ClusterAddSlotsRange_Call) Run(run func(ctx context.Context, min int, max int)) *UniversalClient_ClusterAddSlotsRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_ClusterAddSlotsRange_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterAddSlotsRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterAddSlotsRange_Call) RunAndReturn(run func(context.Context, int, int) *redis.StatusCmd) *UniversalClient_ClusterAddSlotsRange_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterCountFailureReports provides a mock function with given fields: ctx, nodeID
func (_m *UniversalClient) ClusterCountFailureReports(ctx context.Context, nodeID string) *redis.IntCmd {
	ret := _m.Called(ctx, nodeID)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterCountFailureReports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterCountFailureReports'
type UniversalClient_ClusterCountFailureReports_Call struct {
	*mock.Call
}

// ClusterCountFailureReports is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *UniversalClient_Expecter) ClusterCountFailureReports(ctx interface{}, nodeID interface{}) *UniversalClient_ClusterCountFailureReports_Call {
	return &UniversalClient_ClusterCountFailureReports_Call{Call: _e.mock.On("ClusterCountFailureReports", ctx, nodeID)}
}

func (_c *UniversalClient_ClusterCountFailureReports_Call) Run(run func(ctx context.Context, nodeID string)) *UniversalClient_ClusterCountFailureReports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ClusterCountFailureReports_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ClusterCountFailureReports_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterCountFailureReports_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_ClusterCountFailureReports_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterCountKeysInSlot provides a mock function with given fields: ctx, slot
func (_m *UniversalClient) ClusterCountKeysInSlot(ctx context.Context, slot int) *redis.IntCmd {
	ret := _m.Called(ctx, slot)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int) *redis.IntCmd); ok {
		r0 = rf(ctx, slot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterCountKeysInSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterCountKeysInSlot'
type UniversalClient_ClusterCountKeysInSlot_Call struct {
	*mock.Call
}

// ClusterCountKeysInSlot is a helper method to define mock.On call
//   - ctx context.Context
//   - slot int
func (_e *UniversalClient_Expecter) ClusterCountKeysInSlot(ctx interface{}, slot interface{}) *UniversalClient_ClusterCountKeysInSlot_Call {
	return &UniversalClient_ClusterCountKeysInSlot_Call{Call: _e.mock.On("ClusterCountKeysInSlot", ctx, slot)}
}

func (_c *UniversalClient_ClusterCountKeysInSlot_Call) Run(run func(ctx context.Context, slot int)) *UniversalClient_ClusterCountKeysInSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *UniversalClient_ClusterCountKeysInSlot_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ClusterCountKeysInSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterCountKeysInSlot_Call) RunAndReturn(run func(context.Context, int) *redis.IntCmd) *UniversalClient_ClusterCountKeysInSlot_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterDelSlots provides a mock function with given fields: ctx, slots
func (_m *UniversalClient) ClusterDelSlots(ctx context.Context, slots ...int) *redis.StatusCmd {
	_va := make([]interface{}, len(slots))
	for _i := range slots {
		_va[_i] = slots[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...int) *redis.StatusCmd); ok {
		r0 = rf(ctx, slots...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterDelSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterDelSlots'
type UniversalClient_ClusterDelSlots_Call struct {
	*mock.Call
}

// ClusterDelSlots is a helper method to define mock.On call
//   - ctx context.Context
//   - slots ...int
func (_e *UniversalClient_Expecter) ClusterDelSlots(ctx interface{}, slots ...interface{}) *UniversalClient_ClusterDelSlots_Call {
	return &UniversalClient_ClusterDelSlots_Call{Call: _e.mock.On("ClusterDelSlots",
		append([]interface{}{ctx}, slots...)...)}
}

func (_c *UniversalClient_ClusterDelSlots_Call) Run(run func(ctx context.Context, slots ...int)) *UniversalClient_ClusterDelSlots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ClusterDelSlots_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterDelSlots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterDelSlots_Call) RunAndReturn(run func(context.Context, ...int) *redis.StatusCmd) *UniversalClient_ClusterDelSlots_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterDelSlotsRange provides a mock function with given fields: ctx, min, max
func (_m *UniversalClient) ClusterDelSlotsRange(ctx context.Context, min int, max int) *redis.StatusCmd {
	ret := _m.Called(ctx, min, max)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *redis.StatusCmd); ok {
		r0 = rf(ctx, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterDelSlotsRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterDelSlotsRange'
type UniversalClient_ClusterDelSlotsRange_Call struct {
	*mock.Call
}

// ClusterDelSlotsRange is a helper method to define mock.On call
//   - ctx context.Context
//   - min int
//   - max int
func (_e *UniversalClient_Expecter) ClusterDelSlotsRange(ctx interface{}, min interface{}, max interface{}) *UniversalClient_ClusterDelSlotsRange_Call {
	return &UniversalClient_ClusterDelSlotsRange_Call{Call: _e.mock.On("ClusterDelSlotsRange", ctx, min, max)}
}

func (_c *UniversalClient_ClusterDelSlotsRange_Call) Run(run func(ctx context.Context, min int, max int)) *UniversalClient_ClusterDelSlotsRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_ClusterDelSlotsRange_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterDelSlotsRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterDelSlotsRange_Call) RunAndReturn(run func(context.Context, int, int) *redis.StatusCmd) *UniversalClient_ClusterDelSlotsRange_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterFailover provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterFailover(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterFailover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterFailover'
type UniversalClient_ClusterFailover_Call struct {
	*mock.Call
}

// ClusterFailover is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterFailover(ctx interface{}) *UniversalClient_ClusterFailover_Call {
	return &UniversalClient_ClusterFailover_Call{Call: _e.mock.On("ClusterFailover", ctx)}
}

func (_c *UniversalClient_ClusterFailover_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterFailover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterFailover_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterFailover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterFailover_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ClusterFailover_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterForget provides a mock function with given fields: ctx, nodeID
func (_m *UniversalClient) ClusterForget(ctx context.Context, nodeID string) *redis.StatusCmd {
	ret := _m.Called(ctx, nodeID)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterForget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterForget'
type UniversalClient_ClusterForget_Call struct {
	*mock.Call
}

// ClusterForget is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *UniversalClient_Expecter) ClusterForget(ctx interface{}, nodeID interface{}) *UniversalClient_ClusterForget_Call {
	return &UniversalClient_ClusterForget_Call{Call: _e.mock.On("ClusterForget", ctx, nodeID)}
}

func (_c *UniversalClient_ClusterForget_Call) Run(run func(ctx context.Context, nodeID string)) *UniversalClient_ClusterForget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ClusterForget_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterForget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterForget_Call) RunAndReturn(run func(context.Context, string) *redis.StatusCmd) *UniversalClient_ClusterForget_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterGetKeysInSlot provides a mock function with given fields: ctx, slot, count
func (_m *UniversalClient) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) *redis.StringSliceCmd {
	ret := _m.Called(ctx, slot, count)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, slot, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterGetKeysInSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterGetKeysInSlot'
type UniversalClient_ClusterGetKeysInSlot_Call struct {
	*mock.Call
}

// ClusterGetKeysInSlot is a helper method to define mock.On call
//   - ctx context.Context
//   - slot int
//   - count int
func (_e *UniversalClient_Expecter) ClusterGetKeysInSlot(ctx interface{}, slot interface{}, count interface{}) *UniversalClient_ClusterGetKeysInSlot_Call {
	return &UniversalClient_ClusterGetKeysInSlot_Call{Call: _e.mock.On("ClusterGetKeysInSlot", ctx, slot, count)}
}

func (_c *UniversalClient_ClusterGetKeysInSlot_Call) Run(run func(ctx context.Context, slot int, count int)) *UniversalClient_ClusterGetKeysInSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_ClusterGetKeysInSlot_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ClusterGetKeysInSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterGetKeysInSlot_Call) RunAndReturn(run func(context.Context, int, int) *redis.StringSliceCmd) *UniversalClient_ClusterGetKeysInSlot_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterInfo provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterInfo(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterInfo'
type UniversalClient_ClusterInfo_Call struct {
	*mock.Call
}

// ClusterInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterInfo(ctx interface{}) *UniversalClient_ClusterInfo_Call {
	return &UniversalClient_ClusterInfo_Call{Call: _e.mock.On("ClusterInfo", ctx)}
}

func (_c *UniversalClient_ClusterInfo_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterInfo_Call) Return(_a0 *redis.StringCmd) *UniversalClient_ClusterInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterInfo_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_ClusterInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterKeySlot provides a mock function with given fields: ctx, key
func (_m *UniversalClient) ClusterKeySlot(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterKeySlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterKeySlot'
type UniversalClient_ClusterKeySlot_Call struct {
	*mock.Call
}

// ClusterKeySlot is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) ClusterKeySlot(ctx interface{}, key interface{}) *UniversalClient_ClusterKeySlot_Call {
	return &UniversalClient_ClusterKeySlot_Call{Call: _e.mock.On("ClusterKeySlot", ctx, key)}
}

func (_c *UniversalClient_ClusterKeySlot_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_ClusterKeySlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ClusterKeySlot_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ClusterKeySlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterKeySlot_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_ClusterKeySlot_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterLinks provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterLinks(ctx context.Context) *redis.ClusterLinksCmd {
	ret := _m.Called(ctx)

	var r0 *redis.ClusterLinksCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.ClusterLinksCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ClusterLinksCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterLinks'
type UniversalClient_ClusterLinks_Call struct {
	*mock.Call
}

// ClusterLinks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterLinks(ctx interface{}) *UniversalClient_ClusterLinks_Call {
	return &UniversalClient_ClusterLinks_Call{Call: _e.mock.On("ClusterLinks", ctx)}
}

func (_c *UniversalClient_ClusterLinks_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterLinks_Call) Return(_a0 *redis.ClusterLinksCmd) *UniversalClient_ClusterLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterLinks_Call) RunAndReturn(run func(context.Context) *redis.ClusterLinksCmd) *UniversalClient_ClusterLinks_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterMeet provides a mock function with given fields: ctx, host, port
func (_m *UniversalClient) ClusterMeet(ctx context.Context, host string, port string) *redis.StatusCmd {
	ret := _m.Called(ctx, host, port)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, host, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterMeet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterMeet'
type UniversalClient_ClusterMeet_Call struct {
	*mock.Call
}

// ClusterMeet is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - port string
func (_e *UniversalClient_Expecter) ClusterMeet(ctx interface{}, host interface{}, port interface{}) *UniversalClient_ClusterMeet_Call {
	return &UniversalClient_ClusterMeet_Call{Call: _e.mock.On("ClusterMeet", ctx, host, port)}
}

func (_c *UniversalClient_ClusterMeet_Call) Run(run func(ctx context.Context, host string, port string)) *UniversalClient_ClusterMeet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_ClusterMeet_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterMeet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterMeet_Call) RunAndReturn(run func(context.Context, string, string) *redis.StatusCmd) *UniversalClient_ClusterMeet_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterMyShardID provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterMyShardID(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterMyShardID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterMyShardID'
type UniversalClient_ClusterMyShardID_Call struct {
	*mock.Call
}

// ClusterMyShardID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterMyShardID(ctx interface{}) *UniversalClient_ClusterMyShardID_Call {
	return &UniversalClient_ClusterMyShardID_Call{Call: _e.mock.On("ClusterMyShardID", ctx)}
}

func (_c *UniversalClient_ClusterMyShardID_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterMyShardID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterMyShardID_Call) Return(_a0 *redis.StringCmd) *UniversalClient_ClusterMyShardID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterMyShardID_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_ClusterMyShardID_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterNodes provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterNodes(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterNodes'
type UniversalClient_ClusterNodes_Call struct {
	*mock.Call
}

// ClusterNodes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterNodes(ctx interface{}) *UniversalClient_ClusterNodes_Call {
	return &UniversalClient_ClusterNodes_Call{Call: _e.mock.On("ClusterNodes", ctx)}
}

func (_c *UniversalClient_ClusterNodes_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterNodes_Call) Return(_a0 *redis.StringCmd) *UniversalClient_ClusterNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterNodes_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_ClusterNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterReplicate provides a mock function with given fields: ctx, nodeID
func (_m *UniversalClient) ClusterReplicate(ctx context.Context, nodeID string) *redis.StatusCmd {
	ret := _m.Called(ctx, nodeID)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterReplicate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterReplicate'
type UniversalClient_ClusterReplicate_Call struct {
	*mock.Call
}

// ClusterReplicate is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *UniversalClient_Expecter) ClusterReplicate(ctx interface{}, nodeID interface{}) *UniversalClient_ClusterReplicate_Call {
	return &UniversalClient_ClusterReplicate_Call{Call: _e.mock.On("ClusterReplicate", ctx, nodeID)}
}

func (_c *UniversalClient_ClusterReplicate_Call) Run(run func(ctx context.Context, nodeID string)) *UniversalClient_ClusterReplicate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ClusterReplicate_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterReplicate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterReplicate_Call) RunAndReturn(run func(context.Context, string) *redis.StatusCmd) *UniversalClient_ClusterReplicate_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterResetHard provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterResetHard(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterResetHard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterResetHard'
type UniversalClient_ClusterResetHard_Call struct {
	*mock.Call
}

// ClusterResetHard is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterResetHard(ctx interface{}) *UniversalClient_ClusterResetHard_Call {
	return &UniversalClient_ClusterResetHard_Call{Call: _e.mock.On("ClusterResetHard", ctx)}
}

func (_c *UniversalClient_ClusterResetHard_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterResetHard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterResetHard_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterResetHard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterResetHard_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ClusterResetHard_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterResetSoft provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterResetSoft(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterResetSoft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterResetSoft'
type UniversalClient_ClusterResetSoft_Call struct {
	*mock.Call
}

// ClusterResetSoft is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterResetSoft(ctx interface{}) *UniversalClient_ClusterResetSoft_Call {
	return &UniversalClient_ClusterResetSoft_Call{Call: _e.mock.On("ClusterResetSoft", ctx)}
}

func (_c *UniversalClient_ClusterResetSoft_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterResetSoft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterResetSoft_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterResetSoft_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterResetSoft_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ClusterResetSoft_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterSaveConfig provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterSaveConfig(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterSaveConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterSaveConfig'
type UniversalClient_ClusterSaveConfig_Call struct {
	*mock.Call
}

// ClusterSaveConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterSaveConfig(ctx interface{}) *UniversalClient_ClusterSaveConfig_Call {
	return &UniversalClient_ClusterSaveConfig_Call{Call: _e.mock.On("ClusterSaveConfig", ctx)}
}

func (_c *UniversalClient_ClusterSaveConfig_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterSaveConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterSaveConfig_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ClusterSaveConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterSaveConfig_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ClusterSaveConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterShards provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterShards(ctx context.Context) *redis.ClusterShardsCmd {
	ret := _m.Called(ctx)

	var r0 *redis.ClusterShardsCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.ClusterShardsCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ClusterShardsCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterShards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterShards'
type UniversalClient_ClusterShards_Call struct {
	*mock.Call
}

// ClusterShards is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterShards(ctx interface{}) *UniversalClient_ClusterShards_Call {
	return &UniversalClient_ClusterShards_Call{Call: _e.mock.On("ClusterShards", ctx)}
}

func (_c *UniversalClient_ClusterShards_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterShards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterShards_Call) Return(_a0 *redis.ClusterShardsCmd) *UniversalClient_ClusterShards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterShards_Call) RunAndReturn(run func(context.Context) *redis.ClusterShardsCmd) *UniversalClient_ClusterShards_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterSlaves provides a mock function with given fields: ctx, nodeID
func (_m *UniversalClient) ClusterSlaves(ctx context.Context, nodeID string) *redis.StringSliceCmd {
	ret := _m.Called(ctx, nodeID)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterSlaves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterSlaves'
type UniversalClient_ClusterSlaves_Call struct {
	*mock.Call
}

// ClusterSlaves is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *UniversalClient_Expecter) ClusterSlaves(ctx interface{}, nodeID interface{}) *UniversalClient_ClusterSlaves_Call {
	return &UniversalClient_ClusterSlaves_Call{Call: _e.mock.On("ClusterSlaves", ctx, nodeID)}
}

func (_c *UniversalClient_ClusterSlaves_Call) Run(run func(ctx context.Context, nodeID string)) *UniversalClient_ClusterSlaves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ClusterSlaves_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ClusterSlaves_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterSlaves_Call) RunAndReturn(run func(context.Context, string) *redis.StringSliceCmd) *UniversalClient_ClusterSlaves_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterSlots provides a mock function with given fields: ctx
func (_m *UniversalClient) ClusterSlots(ctx context.Context) *redis.ClusterSlotsCmd {
	ret := _m.Called(ctx)

	var r0 *redis.ClusterSlotsCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.ClusterSlotsCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ClusterSlotsCmd)
		}
	}

	return r0
}

// UniversalClient_ClusterSlots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterSlots'
type UniversalClient_ClusterSlots_Call struct {
	*mock.Call
}

// ClusterSlots is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ClusterSlots(ctx interface{}) *UniversalClient_ClusterSlots_Call {
	return &UniversalClient_ClusterSlots_Call{Call: _e.mock.On("ClusterSlots", ctx)}
}

func (_c *UniversalClient_ClusterSlots_Call) Run(run func(ctx context.Context)) *UniversalClient_ClusterSlots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ClusterSlots_Call) Return(_a0 *redis.ClusterSlotsCmd) *UniversalClient_ClusterSlots_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ClusterSlots_Call) RunAndReturn(run func(context.Context) *redis.ClusterSlotsCmd) *UniversalClient_ClusterSlots_Call {
	_c.Call.Return(run)
	return _c
}

// Command provides a mock function with given fields: ctx
func (_m *UniversalClient) Command(ctx context.Context) *redis.CommandsInfoCmd {
	ret := _m.Called(ctx)

	var r0 *redis.CommandsInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.CommandsInfoCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.CommandsInfoCmd)
		}
	}

	return r0
}

// UniversalClient_Command_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Command'
type UniversalClient_Command_Call struct {
	*mock.Call
}

// Command is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) Command(ctx interface{}) *UniversalClient_Command_Call {
	return &UniversalClient_Command_Call{Call: _e.mock.On("Command", ctx)}
}

func (_c *UniversalClient_Command_Call) Run(run func(ctx context.Context)) *UniversalClient_Command_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_Command_Call) Return(_a0 *redis.CommandsInfoCmd) *UniversalClient_Command_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Command_Call) RunAndReturn(run func(context.Context) *redis.CommandsInfoCmd) *UniversalClient_Command_Call {
	_c.Call.Return(run)
	return _c
}

// CommandGetKeys provides a mock function with given fields: ctx, commands
func (_m *UniversalClient) CommandGetKeys(ctx context.Context, commands ...interface{}) *redis.StringSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, commands...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, commands...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_CommandGetKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandGetKeys'
type UniversalClient_CommandGetKeys_Call struct {
	*mock.Call
}

// CommandGetKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - commands ...interface{}
func (_e *UniversalClient_Expecter) CommandGetKeys(ctx interface{}, commands ...interface{}) *UniversalClient_CommandGetKeys_Call {
	return &UniversalClient_CommandGetKeys_Call{Call: _e.mock.On("CommandGetKeys",
		append([]interface{}{ctx}, commands...)...)}
}

func (_c *UniversalClient_CommandGetKeys_Call) Run(run func(ctx context.Context, commands ...interface{})) *UniversalClient_CommandGetKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_CommandGetKeys_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_CommandGetKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CommandGetKeys_Call) RunAndReturn(run func(context.Context, ...interface{}) *redis.StringSliceCmd) *UniversalClient_CommandGetKeys_Call {
	_c.Call.Return(run)
	return _c
}

// CommandGetKeysAndFlags provides a mock function with given fields: ctx, commands
func (_m *UniversalClient) CommandGetKeysAndFlags(ctx context.Context, commands ...interface{}) *redis.KeyFlagsCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, commands...)
	ret := _m.Called(_ca...)

	var r0 *redis.KeyFlagsCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *redis.KeyFlagsCmd); ok {
		r0 = rf(ctx, commands...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.KeyFlagsCmd)
		}
	}

	return r0
}

// UniversalClient_CommandGetKeysAndFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandGetKeysAndFlags'
type UniversalClient_CommandGetKeysAndFlags_Call struct {
	*mock.Call
}

// CommandGetKeysAndFlags is a helper method to define mock.On call
//   - ctx context.Context
//   - commands ...interface{}
func (_e *UniversalClient_Expecter) CommandGetKeysAndFlags(ctx interface{}, commands ...interface{}) *UniversalClient_CommandGetKeysAndFlags_Call {
	return &UniversalClient_CommandGetKeysAndFlags_Call{Call: _e.mock.On("CommandGetKeysAndFlags",
		append([]interface{}{ctx}, commands...)...)}
}

func (_c *UniversalClient_CommandGetKeysAndFlags_Call) Run(run func(ctx context.Context, commands ...interface{})) *UniversalClient_CommandGetKeysAndFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_CommandGetKeysAndFlags_Call) Return(_a0 *redis.KeyFlagsCmd) *UniversalClient_CommandGetKeysAndFlags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CommandGetKeysAndFlags_Call) RunAndReturn(run func(context.Context, ...interface{}) *redis.KeyFlagsCmd) *UniversalClient_CommandGetKeysAndFlags_Call {
	_c.Call.Return(run)
	return _c
}

// CommandList provides a mock function with given fields: ctx, filter
func (_m *UniversalClient) CommandList(ctx context.Context, filter *redis.FilterBy) *redis.StringSliceCmd {
	ret := _m.Called(ctx, filter)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.FilterBy) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_CommandList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandList'
type UniversalClient_CommandList_Call struct {
	*mock.Call
}

// CommandList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *redis.FilterBy
func (_e *UniversalClient_Expecter) CommandList(ctx interface{}, filter interface{}) *UniversalClient_CommandList_Call {
	return &UniversalClient_CommandList_Call{Call: _e.mock.On("CommandList", ctx, filter)}
}

func (_c *UniversalClient_CommandList_Call) Run(run func(ctx context.Context, filter *redis.FilterBy)) *UniversalClient_CommandList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.FilterBy))
	})
	return _c
}

func (_c *UniversalClient_CommandList_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_CommandList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_CommandList_Call) RunAndReturn(run func(context.Context, *redis.FilterBy) *redis.StringSliceCmd) *UniversalClient_CommandList_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigGet provides a mock function with given fields: ctx, parameter
func (_m *UniversalClient) ConfigGet(ctx context.Context, parameter string) *redis.MapStringStringCmd {
	ret := _m.Called(ctx, parameter)

	var r0 *redis.MapStringStringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.MapStringStringCmd); ok {
		r0 = rf(ctx, parameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.MapStringStringCmd)
		}
	}

	return r0
}

// UniversalClient_ConfigGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigGet'
type UniversalClient_ConfigGet_Call struct {
	*mock.Call
}

// ConfigGet is a helper method to define mock.On call
//   - ctx context.Context
//   - parameter string
func (_e *UniversalClient_Expecter) ConfigGet(ctx interface{}, parameter interface{}) *UniversalClient_ConfigGet_Call {
	return &UniversalClient_ConfigGet_Call{Call: _e.mock.On("ConfigGet", ctx, parameter)}
}

func (_c *UniversalClient_ConfigGet_Call) Run(run func(ctx context.Context, parameter string)) *UniversalClient_ConfigGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ConfigGet_Call) Return(_a0 *redis.MapStringStringCmd) *UniversalClient_ConfigGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ConfigGet_Call) RunAndReturn(run func(context.Context, string) *redis.MapStringStringCmd) *UniversalClient_ConfigGet_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigResetStat provides a mock function with given fields: ctx
func (_m *UniversalClient) ConfigResetStat(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ConfigResetStat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigResetStat'
type UniversalClient_ConfigResetStat_Call struct {
	*mock.Call
}

// ConfigResetStat is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ConfigResetStat(ctx interface{}) *UniversalClient_ConfigResetStat_Call {
	return &UniversalClient_ConfigResetStat_Call{Call: _e.mock.On("ConfigResetStat", ctx)}
}

func (_c *UniversalClient_ConfigResetStat_Call) Run(run func(ctx context.Context)) *UniversalClient_ConfigResetStat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ConfigResetStat_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ConfigResetStat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ConfigResetStat_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ConfigResetStat_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigRewrite provides a mock function with given fields: ctx
func (_m *UniversalClient) ConfigRewrite(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ConfigRewrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigRewrite'
type UniversalClient_ConfigRewrite_Call struct {
	*mock.Call
}

// ConfigRewrite is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ConfigRewrite(ctx interface{}) *UniversalClient_ConfigRewrite_Call {
	return &UniversalClient_ConfigRewrite_Call{Call: _e.mock.On("ConfigRewrite", ctx)}
}

func (_c *UniversalClient_ConfigRewrite_Call) Run(run func(ctx context.Context)) *UniversalClient_ConfigRewrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ConfigRewrite_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ConfigRewrite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ConfigRewrite_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ConfigRewrite_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigSet provides a mock function with given fields: ctx, parameter, value
func (_m *UniversalClient) ConfigSet(ctx context.Context, parameter string, value string) *redis.StatusCmd {
	ret := _m.Called(ctx, parameter, value)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, parameter, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigSet'
type UniversalClient_ConfigSet_Call struct {
	*mock.Call
}

// ConfigSet is a helper method to define mock.On call
//   - ctx context.Context
//   - parameter string
//   - value string
func (_e *UniversalClient_Expecter) ConfigSet(ctx interface{}, parameter interface{}, value interface{}) *UniversalClient_ConfigSet_Call {
	return &UniversalClient_ConfigSet_Call{Call: _e.mock.On("ConfigSet", ctx, parameter, value)}
}

func (_c *UniversalClient_ConfigSet_Call) Run(run func(ctx context.Context, parameter string, value string)) *UniversalClient_ConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_ConfigSet_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ConfigSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ConfigSet_Call) RunAndReturn(run func(context.Context, string, string) *redis.StatusCmd) *UniversalClient_ConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// Copy provides a mock function with given fields: ctx, sourceKey, destKey, db, replace
func (_m *UniversalClient) Copy(ctx context.Context, sourceKey string, destKey string, db int, replace bool) *redis.IntCmd {
	ret := _m.Called(ctx, sourceKey, destKey, db, replace)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, bool) *redis.IntCmd); ok {
		r0 = rf(ctx, sourceKey, destKey, db, replace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type UniversalClient_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceKey string
//   - destKey string
//   - db int
//   - replace bool
func (_e *UniversalClient_Expecter) Copy(ctx interface{}, sourceKey interface{}, destKey interface{}, db interface{}, replace interface{}) *UniversalClient_Copy_Call {
	return &UniversalClient_Copy_Call{Call: _e.mock.On("Copy", ctx, sourceKey, destKey, db, replace)}
}

func (_c *UniversalClient_Copy_Call) Run(run func(ctx context.Context, sourceKey string, destKey string, db int, replace bool)) *UniversalClient_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(bool))
	})
	return _c
}

func (_c *UniversalClient_Copy_Call) Return(_a0 *redis.IntCmd) *UniversalClient_Copy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Copy_Call) RunAndReturn(run func(context.Context, string, string, int, bool) *redis.IntCmd) *UniversalClient_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// DBSize provides a mock function with given fields: ctx
func (_m *UniversalClient) DBSize(ctx context.Context) *redis.IntCmd {
	ret := _m.Called(ctx)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_DBSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBSize'
type UniversalClient_DBSize_Call struct {
	*mock.Call
}

// DBSize is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) DBSize(ctx interface{}) *UniversalClient_DBSize_Call {
	return &UniversalClient_DBSize_Call{Call: _e.mock.On("DBSize", ctx)}
}

func (_c *UniversalClient_DBSize_Call) Run(run func(ctx context.Context)) *UniversalClient_DBSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_DBSize_Call) Return(_a0 *redis.IntCmd) *UniversalClient_DBSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_DBSize_Call) RunAndReturn(run func(context.Context) *redis.IntCmd) *UniversalClient_DBSize_Call {
	_c.Call.Return(run)
	return _c
}

// DebugObject provides a mock function with given fields: ctx, key
func (_m *UniversalClient) DebugObject(ctx context.Context, key string) *redis.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_DebugObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DebugObject'
type UniversalClient_DebugObject_Call struct {
	*mock.Call
}

// DebugObject is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) DebugObject(ctx interface{}, key interface{}) *UniversalClient_DebugObject_Call {
	return &UniversalClient_DebugObject_Call{Call: _e.mock.On("DebugObject", ctx, key)}
}

func (_c *UniversalClient_DebugObject_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_DebugObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_DebugObject_Call) Return(_a0 *redis.StringCmd) *UniversalClient_DebugObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_DebugObject_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_DebugObject_Call {
	_c.Call.Return(run)
	return _c
}

// Decr provides a mock function with given fields: ctx, key
func (_m *UniversalClient) Decr(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_Decr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decr'
type UniversalClient_Decr_Call struct {
	*mock.Call
}

// Decr is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) Decr(ctx interface{}, key interface{}) *UniversalClient_Decr_Call {
	return &UniversalClient_Decr_Call{Call: _e.mock.On("Decr", ctx, key)}
}

func (_c *UniversalClient_Decr_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_Decr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_Decr_Call) Return(_a0 *redis.IntCmd) *UniversalClient_Decr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Decr_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_Decr_Call {
	_c.Call.Return(run)
	return _c
}

// DecrBy provides a mock function with given fields: ctx, key, decrement
func (_m *UniversalClient) DecrBy(ctx context.Context, key string, decrement int64) *redis.IntCmd {
	ret := _m.Called(ctx, key, decrement)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, key, decrement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_DecrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecrBy'
type UniversalClient_DecrBy_Call struct {
	*mock.Call
}

// DecrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - decrement int64
func (_e *UniversalClient_Expecter) DecrBy(ctx interface{}, key interface{}, decrement interface{}) *UniversalClient_DecrBy_Call {
	return &UniversalClient_DecrBy_Call{Call: _e.mock.On("DecrBy", ctx, key, decrement)}
}

func (_c *UniversalClient_DecrBy_Call) Run(run func(ctx context.Context, key string, decrement int64)) *UniversalClient_DecrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_DecrBy_Call) Return(_a0 *redis.IntCmd) *UniversalClient_DecrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_DecrBy_Call) RunAndReturn(run func(context.Context, string, int64) *redis.IntCmd) *UniversalClient_DecrBy_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type UniversalClient_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) Del(ctx interface{}, keys ...interface{}) *UniversalClient_Del_Call {
	return &UniversalClient_Del_Call{Call: _e.mock.On("Del",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_Del_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_Del_Call) Return(_a0 *redis.IntCmd) *UniversalClient_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Del_Call) RunAndReturn(run func(context.Context, ...string) *redis.IntCmd) *UniversalClient_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function with given fields: ctx, args
func (_m *UniversalClient) Do(ctx context.Context, args ...interface{}) *redis.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *redis.Cmd); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type UniversalClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...interface{}
func (_e *UniversalClient_Expecter) Do(ctx interface{}, args ...interface{}) *UniversalClient_Do_Call {
	return &UniversalClient_Do_Call{Call: _e.mock.On("Do",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *UniversalClient_Do_Call) Run(run func(ctx context.Context, args ...interface{})) *UniversalClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_Do_Call) Return(_a0 *redis.Cmd) *UniversalClient_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Do_Call) RunAndReturn(run func(context.Context, ...interface{}) *redis.Cmd) *UniversalClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// Dump provides a mock function with given fields: ctx, key
func (_m *UniversalClient) Dump(ctx context.Context, key string) *redis.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_Dump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dump'
type UniversalClient_Dump_Call struct {
	*mock.Call
}

// Dump is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) Dump(ctx interface{}, key interface{}) *UniversalClient_Dump_Call {
	return &UniversalClient_Dump_Call{Call: _e.mock.On("Dump", ctx, key)}
}

func (_c *UniversalClient_Dump_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_Dump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_Dump_Call) Return(_a0 *redis.StringCmd) *UniversalClient_Dump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Dump_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_Dump_Call {
	_c.Call.Return(run)
	return _c
}

// Echo provides a mock function with given fields: ctx, message
func (_m *UniversalClient) Echo(ctx context.Context, message interface{}) *redis.StringCmd {
	ret := _m.Called(ctx, message)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *redis.StringCmd); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_Echo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Echo'
type UniversalClient_Echo_Call struct {
	*mock.Call
}

// Echo is a helper method to define mock.On call
//   - ctx context.Context
//   - message interface{}
func (_e *UniversalClient_Expecter) Echo(ctx interface{}, message interface{}) *UniversalClient_Echo_Call {
	return &UniversalClient_Echo_Call{Call: _e.mock.On("Echo", ctx, message)}
}

func (_c *UniversalClient_Echo_Call) Run(run func(ctx context.Context, message interface{})) *UniversalClient_Echo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_Echo_Call) Return(_a0 *redis.StringCmd) *UniversalClient_Echo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Echo_Call) RunAndReturn(run func(context.Context, interface{}) *redis.StringCmd) *UniversalClient_Echo_Call {
	_c.Call.Return(run)
	return _c
}

// Eval provides a mock function with given fields: ctx, script, keys, args
func (_m *UniversalClient) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, script, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *redis.Cmd); ok {
		r0 = rf(ctx, script, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_Eval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eval'
type UniversalClient_Eval_Call struct {
	*mock.Call
}

// Eval is a helper method to define mock.On call
//   - ctx context.Context
//   - script string
//   - keys []string
//   - args ...interface{}
func (_e *UniversalClient_Expecter) Eval(ctx interface{}, script interface{}, keys interface{}, args ...interface{}) *UniversalClient_Eval_Call {
	return &UniversalClient_Eval_Call{Call: _e.mock.On("Eval",
		append([]interface{}{ctx, script, keys}, args...)...)}
}

func (_c *UniversalClient_Eval_Call) Run(run func(ctx context.Context, script string, keys []string, args ...interface{})) *UniversalClient_Eval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_Eval_Call) Return(_a0 *redis.Cmd) *UniversalClient_Eval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Eval_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *redis.Cmd) *UniversalClient_Eval_Call {
	_c.Call.Return(run)
	return _c
}

// EvalRO provides a mock function with given fields: ctx, script, keys, args
func (_m *UniversalClient) EvalRO(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, script, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *redis.Cmd); ok {
		r0 = rf(ctx, script, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_EvalRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalRO'
type UniversalClient_EvalRO_Call struct {
	*mock.Call
}

// EvalRO is a helper method to define mock.On call
//   - ctx context.Context
//   - script string
//   - keys []string
//   - args ...interface{}
func (_e *UniversalClient_Expecter) EvalRO(ctx interface{}, script interface{}, keys interface{}, args ...interface{}) *UniversalClient_EvalRO_Call {
	return &UniversalClient_EvalRO_Call{Call: _e.mock.On("EvalRO",
		append([]interface{}{ctx, script, keys}, args...)...)}
}

func (_c *UniversalClient_EvalRO_Call) Run(run func(ctx context.Context, script string, keys []string, args ...interface{})) *UniversalClient_EvalRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_EvalRO_Call) Return(_a0 *redis.Cmd) *UniversalClient_EvalRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_EvalRO_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *redis.Cmd) *UniversalClient_EvalRO_Call {
	_c.Call.Return(run)
	return _c
}

// EvalSha provides a mock function with given fields: ctx, sha1, keys, args
func (_m *UniversalClient) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, sha1, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *redis.Cmd); ok {
		r0 = rf(ctx, sha1, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_EvalSha_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalSha'
type UniversalClient_EvalSha_Call struct {
	*mock.Call
}

// EvalSha is a helper method to define mock.On call
//   - ctx context.Context
//   - sha1 string
//   - keys []string
//   - args ...interface{}
func (_e *UniversalClient_Expecter) EvalSha(ctx interface{}, sha1 interface{}, keys interface{}, args ...interface{}) *UniversalClient_EvalSha_Call {
	return &UniversalClient_EvalSha_Call{Call: _e.mock.On("EvalSha",
		append([]interface{}{ctx, sha1, keys}, args...)...)}
}

func (_c *UniversalClient_EvalSha_Call) Run(run func(ctx context.Context, sha1 string, keys []string, args ...interface{})) *UniversalClient_EvalSha_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_EvalSha_Call) Return(_a0 *redis.Cmd) *UniversalClient_EvalSha_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_EvalSha_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *redis.Cmd) *UniversalClient_EvalSha_Call {
	_c.Call.Return(run)
	return _c
}

// EvalShaRO provides a mock function with given fields: ctx, sha1, keys, args
func (_m *UniversalClient) EvalShaRO(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, sha1, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *redis.Cmd); ok {
		r0 = rf(ctx, sha1, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_EvalShaRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvalShaRO'
type UniversalClient_EvalShaRO_Call struct {
	*mock.Call
}

// EvalShaRO is a helper method to define mock.On call
//   - ctx context.Context
//   - sha1 string
//   - keys []string
//   - args ...interface{}
func (_e *UniversalClient_Expecter) EvalShaRO(ctx interface{}, sha1 interface{}, keys interface{}, args ...interface{}) *UniversalClient_EvalShaRO_Call {
	return &UniversalClient_EvalShaRO_Call{Call: _e.mock.On("EvalShaRO",
		append([]interface{}{ctx, sha1, keys}, args...)...)}
}

func (_c *UniversalClient_EvalShaRO_Call) Run(run func(ctx context.Context, sha1 string, keys []string, args ...interface{})) *UniversalClient_EvalShaRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_EvalShaRO_Call) Return(_a0 *redis.Cmd) *UniversalClient_EvalShaRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_EvalShaRO_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *redis.Cmd) *UniversalClient_EvalShaRO_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) Exists(ctx context.Context, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type UniversalClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) Exists(ctx interface{}, keys ...interface{}) *UniversalClient_Exists_Call {
	return &UniversalClient_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_Exists_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_Exists_Call) Return(_a0 *redis.IntCmd) *UniversalClient_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Exists_Call) RunAndReturn(run func(context.Context, ...string) *redis.IntCmd) *UniversalClient_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Expire provides a mock function with given fields: ctx, key, expiration
func (_m *UniversalClient) Expire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type UniversalClient_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) Expire(ctx interface{}, key interface{}, expiration interface{}) *UniversalClient_Expire_Call {
	return &UniversalClient_Expire_Call{Call: _e.mock.On("Expire", ctx, key, expiration)}
}

func (_c *UniversalClient_Expire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *UniversalClient_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_Expire_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_Expire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Expire_Call) RunAndReturn(run func(context.Context, string, time.Duration) *redis.BoolCmd) *UniversalClient_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireAt provides a mock function with given fields: ctx, key, tm
func (_m *UniversalClient) ExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	ret := _m.Called(ctx, key, tm)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, tm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_ExpireAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireAt'
type UniversalClient_ExpireAt_Call struct {
	*mock.Call
}

// ExpireAt is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - tm time.Time
func (_e *UniversalClient_Expecter) ExpireAt(ctx interface{}, key interface{}, tm interface{}) *UniversalClient_ExpireAt_Call {
	return &UniversalClient_ExpireAt_Call{Call: _e.mock.On("ExpireAt", ctx, key, tm)}
}

func (_c *UniversalClient_ExpireAt_Call) Run(run func(ctx context.Context, key string, tm time.Time)) *UniversalClient_ExpireAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *UniversalClient_ExpireAt_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_ExpireAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ExpireAt_Call) RunAndReturn(run func(context.Context, string, time.Time) *redis.BoolCmd) *UniversalClient_ExpireAt_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireGT provides a mock function with given fields: ctx, key, expiration
func (_m *UniversalClient) ExpireGT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_ExpireGT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireGT'
type UniversalClient_ExpireGT_Call struct {
	*mock.Call
}

// ExpireGT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) ExpireGT(ctx interface{}, key interface{}, expiration interface{}) *UniversalClient_ExpireGT_Call {
	return &UniversalClient_ExpireGT_Call{Call: _e.mock.On("ExpireGT", ctx, key, expiration)}
}

func (_c *UniversalClient_ExpireGT_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *UniversalClient_ExpireGT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_ExpireGT_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_ExpireGT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ExpireGT_Call) RunAndReturn(run func(context.Context, string, time.Duration) *redis.BoolCmd) *UniversalClient_ExpireGT_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireLT provides a mock function with given fields: ctx, key, expiration
func (_m *UniversalClient) ExpireLT(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_ExpireLT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireLT'
type UniversalClient_ExpireLT_Call struct {
	*mock.Call
}

// ExpireLT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) ExpireLT(ctx interface{}, key interface{}, expiration interface{}) *UniversalClient_ExpireLT_Call {
	return &UniversalClient_ExpireLT_Call{Call: _e.mock.On("ExpireLT", ctx, key, expiration)}
}

func (_c *UniversalClient_ExpireLT_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *UniversalClient_ExpireLT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_ExpireLT_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_ExpireLT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ExpireLT_Call) RunAndReturn(run func(context.Context, string, time.Duration) *redis.BoolCmd) *UniversalClient_ExpireLT_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireNX provides a mock function with given fields: ctx, key, expiration
func (_m *UniversalClient) ExpireNX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_ExpireNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireNX'
type UniversalClient_ExpireNX_Call struct {
	*mock.Call
}

// ExpireNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) ExpireNX(ctx interface{}, key interface{}, expiration interface{}) *UniversalClient_ExpireNX_Call {
	return &UniversalClient_ExpireNX_Call{Call: _e.mock.On("ExpireNX", ctx, key, expiration)}
}

func (_c *UniversalClient_ExpireNX_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *UniversalClient_ExpireNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_ExpireNX_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_ExpireNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ExpireNX_Call) RunAndReturn(run func(context.Context, string, time.Duration) *redis.BoolCmd) *UniversalClient_ExpireNX_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireTime provides a mock function with given fields: ctx, key
func (_m *UniversalClient) ExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.DurationCmd)
		}
	}

	return r0
}

// UniversalClient_ExpireTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireTime'
type UniversalClient_ExpireTime_Call struct {
	*mock.Call
}

// ExpireTime is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) ExpireTime(ctx interface{}, key interface{}) *UniversalClient_ExpireTime_Call {
	return &UniversalClient_ExpireTime_Call{Call: _e.mock.On("ExpireTime", ctx, key)}
}

func (_c *UniversalClient_ExpireTime_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_ExpireTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ExpireTime_Call) Return(_a0 *redis.DurationCmd) *UniversalClient_ExpireTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ExpireTime_Call) RunAndReturn(run func(context.Context, string) *redis.DurationCmd) *UniversalClient_ExpireTime_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireXX provides a mock function with given fields: ctx, key, expiration
func (_m *UniversalClient) ExpireXX(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_ExpireXX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireXX'
type UniversalClient_ExpireXX_Call struct {
	*mock.Call
}

// ExpireXX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) ExpireXX(ctx interface{}, key interface{}, expiration interface{}) *UniversalClient_ExpireXX_Call {
	return &UniversalClient_ExpireXX_Call{Call: _e.mock.On("ExpireXX", ctx, key, expiration)}
}

func (_c *UniversalClient_ExpireXX_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *UniversalClient_ExpireXX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_ExpireXX_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_ExpireXX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ExpireXX_Call) RunAndReturn(run func(context.Context, string, time.Duration) *redis.BoolCmd) *UniversalClient_ExpireXX_Call {
	_c.Call.Return(run)
	return _c
}

// FCall provides a mock function with given fields: ctx, function, keys, args
func (_m *UniversalClient) FCall(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, function, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *redis.Cmd); ok {
		r0 = rf(ctx, function, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_FCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FCall'
type UniversalClient_FCall_Call struct {
	*mock.Call
}

// FCall is a helper method to define mock.On call
//   - ctx context.Context
//   - function string
//   - keys []string
//   - args ...interface{}
func (_e *UniversalClient_Expecter) FCall(ctx interface{}, function interface{}, keys interface{}, args ...interface{}) *UniversalClient_FCall_Call {
	return &UniversalClient_FCall_Call{Call: _e.mock.On("FCall",
		append([]interface{}{ctx, function, keys}, args...)...)}
}

func (_c *UniversalClient_FCall_Call) Run(run func(ctx context.Context, function string, keys []string, args ...interface{})) *UniversalClient_FCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_FCall_Call) Return(_a0 *redis.Cmd) *UniversalClient_FCall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FCall_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *redis.Cmd) *UniversalClient_FCall_Call {
	_c.Call.Return(run)
	return _c
}

// FCallRO provides a mock function with given fields: ctx, function, keys, args
func (_m *UniversalClient) FCallRO(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, function, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *redis.Cmd); ok {
		r0 = rf(ctx, function, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_FCallRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FCallRO'
type UniversalClient_FCallRO_Call struct {
	*mock.Call
}

// FCallRO is a helper method to define mock.On call
//   - ctx context.Context
//   - function string
//   - keys []string
//   - args ...interface{}
func (_e *UniversalClient_Expecter) FCallRO(ctx interface{}, function interface{}, keys interface{}, args ...interface{}) *UniversalClient_FCallRO_Call {
	return &UniversalClient_FCallRO_Call{Call: _e.mock.On("FCallRO",
		append([]interface{}{ctx, function, keys}, args...)...)}
}

func (_c *UniversalClient_FCallRO_Call) Run(run func(ctx context.Context, function string, keys []string, args ...interface{})) *UniversalClient_FCallRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_FCallRO_Call) Return(_a0 *redis.Cmd) *UniversalClient_FCallRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FCallRO_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *redis.Cmd) *UniversalClient_FCallRO_Call {
	_c.Call.Return(run)
	return _c
}

// FCallRo provides a mock function with given fields: ctx, function, keys, args
func (_m *UniversalClient) FCallRo(ctx context.Context, function string, keys []string, args ...interface{}) *redis.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, function, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *redis.Cmd); ok {
		r0 = rf(ctx, function, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_FCallRo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FCallRo'
type UniversalClient_FCallRo_Call struct {
	*mock.Call
}

// FCallRo is a helper method to define mock.On call
//   - ctx context.Context
//   - function string
//   - keys []string
//   - args ...interface{}
func (_e *UniversalClient_Expecter) FCallRo(ctx interface{}, function interface{}, keys interface{}, args ...interface{}) *UniversalClient_FCallRo_Call {
	return &UniversalClient_FCallRo_Call{Call: _e.mock.On("FCallRo",
		append([]interface{}{ctx, function, keys}, args...)...)}
}

func (_c *UniversalClient_FCallRo_Call) Run(run func(ctx context.Context, function string, keys []string, args ...interface{})) *UniversalClient_FCallRo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_FCallRo_Call) Return(_a0 *redis.Cmd) *UniversalClient_FCallRo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FCallRo_Call) RunAndReturn(run func(context.Context, string, []string, ...interface{}) *redis.Cmd) *UniversalClient_FCallRo_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAll provides a mock function with given fields: ctx
func (_m *UniversalClient) FlushAll(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_FlushAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAll'
type UniversalClient_FlushAll_Call struct {
	*mock.Call
}

// FlushAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) FlushAll(ctx interface{}) *UniversalClient_FlushAll_Call {
	return &UniversalClient_FlushAll_Call{Call: _e.mock.On("FlushAll", ctx)}
}

func (_c *UniversalClient_FlushAll_Call) Run(run func(ctx context.Context)) *UniversalClient_FlushAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_FlushAll_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_FlushAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FlushAll_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_FlushAll_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAllAsync provides a mock function with given fields: ctx
func (_m *UniversalClient) FlushAllAsync(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_FlushAllAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAllAsync'
type UniversalClient_FlushAllAsync_Call struct {
	*mock.Call
}

// FlushAllAsync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) FlushAllAsync(ctx interface{}) *UniversalClient_FlushAllAsync_Call {
	return &UniversalClient_FlushAllAsync_Call{Call: _e.mock.On("FlushAllAsync", ctx)}
}

func (_c *UniversalClient_FlushAllAsync_Call) Run(run func(ctx context.Context)) *UniversalClient_FlushAllAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_FlushAllAsync_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_FlushAllAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FlushAllAsync_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_FlushAllAsync_Call {
	_c.Call.Return(run)
	return _c
}

// FlushDB provides a mock function with given fields: ctx
func (_m *UniversalClient) FlushDB(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_FlushDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushDB'
type UniversalClient_FlushDB_Call struct {
	*mock.Call
}

// FlushDB is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) FlushDB(ctx interface{}) *UniversalClient_FlushDB_Call {
	return &UniversalClient_FlushDB_Call{Call: _e.mock.On("FlushDB", ctx)}
}

func (_c *UniversalClient_FlushDB_Call) Run(run func(ctx context.Context)) *UniversalClient_FlushDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_FlushDB_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_FlushDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FlushDB_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_FlushDB_Call {
	_c.Call.Return(run)
	return _c
}

// FlushDBAsync provides a mock function with given fields: ctx
func (_m *UniversalClient) FlushDBAsync(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_FlushDBAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushDBAsync'
type UniversalClient_FlushDBAsync_Call struct {
	*mock.Call
}

// FlushDBAsync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) FlushDBAsync(ctx interface{}) *UniversalClient_FlushDBAsync_Call {
	return &UniversalClient_FlushDBAsync_Call{Call: _e.mock.On("FlushDBAsync", ctx)}
}

func (_c *UniversalClient_FlushDBAsync_Call) Run(run func(ctx context.Context)) *UniversalClient_FlushDBAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_FlushDBAsync_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_FlushDBAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FlushDBAsync_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_FlushDBAsync_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionDelete provides a mock function with given fields: ctx, libName
func (_m *UniversalClient) FunctionDelete(ctx context.Context, libName string) *redis.StringCmd {
	ret := _m.Called(ctx, libName)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, libName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionDelete'
type UniversalClient_FunctionDelete_Call struct {
	*mock.Call
}

// FunctionDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
func (_e *UniversalClient_Expecter) FunctionDelete(ctx interface{}, libName interface{}) *UniversalClient_FunctionDelete_Call {
	return &UniversalClient_FunctionDelete_Call{Call: _e.mock.On("FunctionDelete", ctx, libName)}
}

func (_c *UniversalClient_FunctionDelete_Call) Run(run func(ctx context.Context, libName string)) *UniversalClient_FunctionDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_FunctionDelete_Call) Return(_a0 *redis.StringCmd) *UniversalClient_FunctionDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionDelete_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_FunctionDelete_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionDump provides a mock function with given fields: ctx
func (_m *UniversalClient) FunctionDump(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionDump'
type UniversalClient_FunctionDump_Call struct {
	*mock.Call
}

// FunctionDump is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) FunctionDump(ctx interface{}) *UniversalClient_FunctionDump_Call {
	return &UniversalClient_FunctionDump_Call{Call: _e.mock.On("FunctionDump", ctx)}
}

func (_c *UniversalClient_FunctionDump_Call) Run(run func(ctx context.Context)) *UniversalClient_FunctionDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_FunctionDump_Call) Return(_a0 *redis.StringCmd) *UniversalClient_FunctionDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionDump_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_FunctionDump_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionFlush provides a mock function with given fields: ctx
func (_m *UniversalClient) FunctionFlush(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionFlush'
type UniversalClient_FunctionFlush_Call struct {
	*mock.Call
}

// FunctionFlush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) FunctionFlush(ctx interface{}) *UniversalClient_FunctionFlush_Call {
	return &UniversalClient_FunctionFlush_Call{Call: _e.mock.On("FunctionFlush", ctx)}
}

func (_c *UniversalClient_FunctionFlush_Call) Run(run func(ctx context.Context)) *UniversalClient_FunctionFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_FunctionFlush_Call) Return(_a0 *redis.StringCmd) *UniversalClient_FunctionFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionFlush_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_FunctionFlush_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionFlushAsync provides a mock function with given fields: ctx
func (_m *UniversalClient) FunctionFlushAsync(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionFlushAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionFlushAsync'
type UniversalClient_FunctionFlushAsync_Call struct {
	*mock.Call
}

// FunctionFlushAsync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) FunctionFlushAsync(ctx interface{}) *UniversalClient_FunctionFlushAsync_Call {
	return &UniversalClient_FunctionFlushAsync_Call{Call: _e.mock.On("FunctionFlushAsync", ctx)}
}

func (_c *UniversalClient_FunctionFlushAsync_Call) Run(run func(ctx context.Context)) *UniversalClient_FunctionFlushAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_FunctionFlushAsync_Call) Return(_a0 *redis.StringCmd) *UniversalClient_FunctionFlushAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionFlushAsync_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_FunctionFlushAsync_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionKill provides a mock function with given fields: ctx
func (_m *UniversalClient) FunctionKill(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionKill'
type UniversalClient_FunctionKill_Call struct {
	*mock.Call
}

// FunctionKill is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) FunctionKill(ctx interface{}) *UniversalClient_FunctionKill_Call {
	return &UniversalClient_FunctionKill_Call{Call: _e.mock.On("FunctionKill", ctx)}
}

func (_c *UniversalClient_FunctionKill_Call) Run(run func(ctx context.Context)) *UniversalClient_FunctionKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_FunctionKill_Call) Return(_a0 *redis.StringCmd) *UniversalClient_FunctionKill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionKill_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_FunctionKill_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionList provides a mock function with given fields: ctx, q
func (_m *UniversalClient) FunctionList(ctx context.Context, q redis.FunctionListQuery) *redis.FunctionListCmd {
	ret := _m.Called(ctx, q)

	var r0 *redis.FunctionListCmd
	if rf, ok := ret.Get(0).(func(context.Context, redis.FunctionListQuery) *redis.FunctionListCmd); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FunctionListCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionList'
type UniversalClient_FunctionList_Call struct {
	*mock.Call
}

// FunctionList is a helper method to define mock.On call
//   - ctx context.Context
//   - q redis.FunctionListQuery
func (_e *UniversalClient_Expecter) FunctionList(ctx interface{}, q interface{}) *UniversalClient_FunctionList_Call {
	return &UniversalClient_FunctionList_Call{Call: _e.mock.On("FunctionList", ctx, q)}
}

func (_c *UniversalClient_FunctionList_Call) Run(run func(ctx context.Context, q redis.FunctionListQuery)) *UniversalClient_FunctionList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(redis.FunctionListQuery))
	})
	return _c
}

func (_c *UniversalClient_FunctionList_Call) Return(_a0 *redis.FunctionListCmd) *UniversalClient_FunctionList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionList_Call) RunAndReturn(run func(context.Context, redis.FunctionListQuery) *redis.FunctionListCmd) *UniversalClient_FunctionList_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionLoad provides a mock function with given fields: ctx, code
func (_m *UniversalClient) FunctionLoad(ctx context.Context, code string) *redis.StringCmd {
	ret := _m.Called(ctx, code)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionLoad'
type UniversalClient_FunctionLoad_Call struct {
	*mock.Call
}

// FunctionLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *UniversalClient_Expecter) FunctionLoad(ctx interface{}, code interface{}) *UniversalClient_FunctionLoad_Call {
	return &UniversalClient_FunctionLoad_Call{Call: _e.mock.On("FunctionLoad", ctx, code)}
}

func (_c *UniversalClient_FunctionLoad_Call) Run(run func(ctx context.Context, code string)) *UniversalClient_FunctionLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_FunctionLoad_Call) Return(_a0 *redis.StringCmd) *UniversalClient_FunctionLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionLoad_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_FunctionLoad_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionLoadReplace provides a mock function with given fields: ctx, code
func (_m *UniversalClient) FunctionLoadReplace(ctx context.Context, code string) *redis.StringCmd {
	ret := _m.Called(ctx, code)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionLoadReplace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionLoadReplace'
type UniversalClient_FunctionLoadReplace_Call struct {
	*mock.Call
}

// FunctionLoadReplace is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *UniversalClient_Expecter) FunctionLoadReplace(ctx interface{}, code interface{}) *UniversalClient_FunctionLoadReplace_Call {
	return &UniversalClient_FunctionLoadReplace_Call{Call: _e.mock.On("FunctionLoadReplace", ctx, code)}
}

func (_c *UniversalClient_FunctionLoadReplace_Call) Run(run func(ctx context.Context, code string)) *UniversalClient_FunctionLoadReplace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_FunctionLoadReplace_Call) Return(_a0 *redis.StringCmd) *UniversalClient_FunctionLoadReplace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionLoadReplace_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_FunctionLoadReplace_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionRestore provides a mock function with given fields: ctx, libDump
func (_m *UniversalClient) FunctionRestore(ctx context.Context, libDump string) *redis.StringCmd {
	ret := _m.Called(ctx, libDump)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, libDump)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionRestore'
type UniversalClient_FunctionRestore_Call struct {
	*mock.Call
}

// FunctionRestore is a helper method to define mock.On call
//   - ctx context.Context
//   - libDump string
func (_e *UniversalClient_Expecter) FunctionRestore(ctx interface{}, libDump interface{}) *UniversalClient_FunctionRestore_Call {
	return &UniversalClient_FunctionRestore_Call{Call: _e.mock.On("FunctionRestore", ctx, libDump)}
}

func (_c *UniversalClient_FunctionRestore_Call) Run(run func(ctx context.Context, libDump string)) *UniversalClient_FunctionRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_FunctionRestore_Call) Return(_a0 *redis.StringCmd) *UniversalClient_FunctionRestore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionRestore_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_FunctionRestore_Call {
	_c.Call.Return(run)
	return _c
}

// FunctionStats provides a mock function with given fields: ctx
func (_m *UniversalClient) FunctionStats(ctx context.Context) *redis.FunctionStatsCmd {
	ret := _m.Called(ctx)

	var r0 *redis.FunctionStatsCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.FunctionStatsCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FunctionStatsCmd)
		}
	}

	return r0
}

// UniversalClient_FunctionStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FunctionStats'
type UniversalClient_FunctionStats_Call struct {
	*mock.Call
}

// FunctionStats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) FunctionStats(ctx interface{}) *UniversalClient_FunctionStats_Call {
	return &UniversalClient_FunctionStats_Call{Call: _e.mock.On("FunctionStats", ctx)}
}

func (_c *UniversalClient_FunctionStats_Call) Run(run func(ctx context.Context)) *UniversalClient_FunctionStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_FunctionStats_Call) Return(_a0 *redis.FunctionStatsCmd) *UniversalClient_FunctionStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_FunctionStats_Call) RunAndReturn(run func(context.Context) *redis.FunctionStatsCmd) *UniversalClient_FunctionStats_Call {
	_c.Call.Return(run)
	return _c
}

// GeoAdd provides a mock function with given fields: ctx, key, geoLocation
func (_m *UniversalClient) GeoAdd(ctx context.Context, key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd {
	_va := make([]interface{}, len(geoLocation))
	for _i := range geoLocation {
		_va[_i] = geoLocation[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*redis.GeoLocation) *redis.IntCmd); ok {
		r0 = rf(ctx, key, geoLocation...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_GeoAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoAdd'
type UniversalClient_GeoAdd_Call struct {
	*mock.Call
}

// GeoAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - geoLocation ...*redis.GeoLocation
func (_e *UniversalClient_Expecter) GeoAdd(ctx interface{}, key interface{}, geoLocation ...interface{}) *UniversalClient_GeoAdd_Call {
	return &UniversalClient_GeoAdd_Call{Call: _e.mock.On("GeoAdd",
		append([]interface{}{ctx, key}, geoLocation...)...)}
}

func (_c *UniversalClient_GeoAdd_Call) Run(run func(ctx context.Context, key string, geoLocation ...*redis.GeoLocation)) *UniversalClient_GeoAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*redis.GeoLocation, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*redis.GeoLocation)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_GeoAdd_Call) Return(_a0 *redis.IntCmd) *UniversalClient_GeoAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoAdd_Call) RunAndReturn(run func(context.Context, string, ...*redis.GeoLocation) *redis.IntCmd) *UniversalClient_GeoAdd_Call {
	_c.Call.Return(run)
	return _c
}

// GeoDist provides a mock function with given fields: ctx, key, member1, member2, unit
func (_m *UniversalClient) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) *redis.FloatCmd {
	ret := _m.Called(ctx, key, member1, member2, unit)

	var r0 *redis.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *redis.FloatCmd); ok {
		r0 = rf(ctx, key, member1, member2, unit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatCmd)
		}
	}

	return r0
}

// UniversalClient_GeoDist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoDist'
type UniversalClient_GeoDist_Call struct {
	*mock.Call
}

// GeoDist is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member1 string
//   - member2 string
//   - unit string
func (_e *UniversalClient_Expecter) GeoDist(ctx interface{}, key interface{}, member1 interface{}, member2 interface{}, unit interface{}) *UniversalClient_GeoDist_Call {
	return &UniversalClient_GeoDist_Call{Call: _e.mock.On("GeoDist", ctx, key, member1, member2, unit)}
}

func (_c *UniversalClient_GeoDist_Call) Run(run func(ctx context.Context, key string, member1 string, member2 string, unit string)) *UniversalClient_GeoDist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *UniversalClient_GeoDist_Call) Return(_a0 *redis.FloatCmd) *UniversalClient_GeoDist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoDist_Call) RunAndReturn(run func(context.Context, string, string, string, string) *redis.FloatCmd) *UniversalClient_GeoDist_Call {
	_c.Call.Return(run)
	return _c
}

// GeoHash provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) GeoHash(ctx context.Context, key string, members ...string) *redis.StringSliceCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_GeoHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoHash'
type UniversalClient_GeoHash_Call struct {
	*mock.Call
}

// GeoHash is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...string
func (_e *UniversalClient_Expecter) GeoHash(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_GeoHash_Call {
	return &UniversalClient_GeoHash_Call{Call: _e.mock.On("GeoHash",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_GeoHash_Call) Run(run func(ctx context.Context, key string, members ...string)) *UniversalClient_GeoHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_GeoHash_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_GeoHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoHash_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.StringSliceCmd) *UniversalClient_GeoHash_Call {
	_c.Call.Return(run)
	return _c
}

// GeoPos provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) GeoPos(ctx context.Context, key string, members ...string) *redis.GeoPosCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.GeoPosCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.GeoPosCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.GeoPosCmd)
		}
	}

	return r0
}

// UniversalClient_GeoPos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoPos'
type UniversalClient_GeoPos_Call struct {
	*mock.Call
}

// GeoPos is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...string
func (_e *UniversalClient_Expecter) GeoPos(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_GeoPos_Call {
	return &UniversalClient_GeoPos_Call{Call: _e.mock.On("GeoPos",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_GeoPos_Call) Run(run func(ctx context.Context, key string, members ...string)) *UniversalClient_GeoPos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_GeoPos_Call) Return(_a0 *redis.GeoPosCmd) *UniversalClient_GeoPos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoPos_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.GeoPosCmd) *UniversalClient_GeoPos_Call {
	_c.Call.Return(run)
	return _c
}

// GeoRadius provides a mock function with given fields: ctx, key, longitude, latitude, query
func (_m *UniversalClient) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	ret := _m.Called(ctx, key, longitude, latitude, query)

	var r0 *redis.GeoLocationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64, *redis.GeoRadiusQuery) *redis.GeoLocationCmd); ok {
		r0 = rf(ctx, key, longitude, latitude, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.GeoLocationCmd)
		}
	}

	return r0
}

// UniversalClient_GeoRadius_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoRadius'
type UniversalClient_GeoRadius_Call struct {
	*mock.Call
}

// GeoRadius is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - longitude float64
//   - latitude float64
//   - query *redis.GeoRadiusQuery
func (_e *UniversalClient_Expecter) GeoRadius(ctx interface{}, key interface{}, longitude interface{}, latitude interface{}, query interface{}) *UniversalClient_GeoRadius_Call {
	return &UniversalClient_GeoRadius_Call{Call: _e.mock.On("GeoRadius", ctx, key, longitude, latitude, query)}
}

func (_c *UniversalClient_GeoRadius_Call) Run(run func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery)) *UniversalClient_GeoRadius_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64), args[4].(*redis.GeoRadiusQuery))
	})
	return _c
}

func (_c *UniversalClient_GeoRadius_Call) Return(_a0 *redis.GeoLocationCmd) *UniversalClient_GeoRadius_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoRadius_Call) RunAndReturn(run func(context.Context, string, float64, float64, *redis.GeoRadiusQuery) *redis.GeoLocationCmd) *UniversalClient_GeoRadius_Call {
	_c.Call.Return(run)
	return _c
}

// GeoRadiusByMember provides a mock function with given fields: ctx, key, member, query
func (_m *UniversalClient) GeoRadiusByMember(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	ret := _m.Called(ctx, key, member, query)

	var r0 *redis.GeoLocationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *redis.GeoRadiusQuery) *redis.GeoLocationCmd); ok {
		r0 = rf(ctx, key, member, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.GeoLocationCmd)
		}
	}

	return r0
}

// UniversalClient_GeoRadiusByMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoRadiusByMember'
type UniversalClient_GeoRadiusByMember_Call struct {
	*mock.Call
}

// GeoRadiusByMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
//   - query *redis.GeoRadiusQuery
func (_e *UniversalClient_Expecter) GeoRadiusByMember(ctx interface{}, key interface{}, member interface{}, query interface{}) *UniversalClient_GeoRadiusByMember_Call {
	return &UniversalClient_GeoRadiusByMember_Call{Call: _e.mock.On("GeoRadiusByMember", ctx, key, member, query)}
}

func (_c *UniversalClient_GeoRadiusByMember_Call) Run(run func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery)) *UniversalClient_GeoRadiusByMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*redis.GeoRadiusQuery))
	})
	return _c
}

func (_c *UniversalClient_GeoRadiusByMember_Call) Return(_a0 *redis.GeoLocationCmd) *UniversalClient_GeoRadiusByMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoRadiusByMember_Call) RunAndReturn(run func(context.Context, string, string, *redis.GeoRadiusQuery) *redis.GeoLocationCmd) *UniversalClient_GeoRadiusByMember_Call {
	_c.Call.Return(run)
	return _c
}

// GeoRadiusByMemberStore provides a mock function with given fields: ctx, key, member, query
func (_m *UniversalClient) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery) *redis.IntCmd {
	ret := _m.Called(ctx, key, member, query)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *redis.GeoRadiusQuery) *redis.IntCmd); ok {
		r0 = rf(ctx, key, member, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_GeoRadiusByMemberStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoRadiusByMemberStore'
type UniversalClient_GeoRadiusByMemberStore_Call struct {
	*mock.Call
}

// GeoRadiusByMemberStore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
//   - query *redis.GeoRadiusQuery
func (_e *UniversalClient_Expecter) GeoRadiusByMemberStore(ctx interface{}, key interface{}, member interface{}, query interface{}) *UniversalClient_GeoRadiusByMemberStore_Call {
	return &UniversalClient_GeoRadiusByMemberStore_Call{Call: _e.mock.On("GeoRadiusByMemberStore", ctx, key, member, query)}
}

func (_c *UniversalClient_GeoRadiusByMemberStore_Call) Run(run func(ctx context.Context, key string, member string, query *redis.GeoRadiusQuery)) *UniversalClient_GeoRadiusByMemberStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*redis.GeoRadiusQuery))
	})
	return _c
}

func (_c *UniversalClient_GeoRadiusByMemberStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_GeoRadiusByMemberStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoRadiusByMemberStore_Call) RunAndReturn(run func(context.Context, string, string, *redis.GeoRadiusQuery) *redis.IntCmd) *UniversalClient_GeoRadiusByMemberStore_Call {
	_c.Call.Return(run)
	return _c
}

// GeoRadiusStore provides a mock function with given fields: ctx, key, longitude, latitude, query
func (_m *UniversalClient) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery) *redis.IntCmd {
	ret := _m.Called(ctx, key, longitude, latitude, query)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64, *redis.GeoRadiusQuery) *redis.IntCmd); ok {
		r0 = rf(ctx, key, longitude, latitude, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_GeoRadiusStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoRadiusStore'
type UniversalClient_GeoRadiusStore_Call struct {
	*mock.Call
}

// GeoRadiusStore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - longitude float64
//   - latitude float64
//   - query *redis.GeoRadiusQuery
func (_e *UniversalClient_Expecter) GeoRadiusStore(ctx interface{}, key interface{}, longitude interface{}, latitude interface{}, query interface{}) *UniversalClient_GeoRadiusStore_Call {
	return &UniversalClient_GeoRadiusStore_Call{Call: _e.mock.On("GeoRadiusStore", ctx, key, longitude, latitude, query)}
}

func (_c *UniversalClient_GeoRadiusStore_Call) Run(run func(ctx context.Context, key string, longitude float64, latitude float64, query *redis.GeoRadiusQuery)) *UniversalClient_GeoRadiusStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64), args[4].(*redis.GeoRadiusQuery))
	})
	return _c
}

func (_c *UniversalClient_GeoRadiusStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_GeoRadiusStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoRadiusStore_Call) RunAndReturn(run func(context.Context, string, float64, float64, *redis.GeoRadiusQuery) *redis.IntCmd) *UniversalClient_GeoRadiusStore_Call {
	_c.Call.Return(run)
	return _c
}

// GeoSearch provides a mock function with given fields: ctx, key, q
func (_m *UniversalClient) GeoSearch(ctx context.Context, key string, q *redis.GeoSearchQuery) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, q)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.GeoSearchQuery) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_GeoSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoSearch'
type UniversalClient_GeoSearch_Call struct {
	*mock.Call
}

// GeoSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - q *redis.GeoSearchQuery
func (_e *UniversalClient_Expecter) GeoSearch(ctx interface{}, key interface{}, q interface{}) *UniversalClient_GeoSearch_Call {
	return &UniversalClient_GeoSearch_Call{Call: _e.mock.On("GeoSearch", ctx, key, q)}
}

func (_c *UniversalClient_GeoSearch_Call) Run(run func(ctx context.Context, key string, q *redis.GeoSearchQuery)) *UniversalClient_GeoSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.GeoSearchQuery))
	})
	return _c
}

func (_c *UniversalClient_GeoSearch_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_GeoSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoSearch_Call) RunAndReturn(run func(context.Context, string, *redis.GeoSearchQuery) *redis.StringSliceCmd) *UniversalClient_GeoSearch_Call {
	_c.Call.Return(run)
	return _c
}

// GeoSearchLocation provides a mock function with given fields: ctx, key, q
func (_m *UniversalClient) GeoSearchLocation(ctx context.Context, key string, q *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd {
	ret := _m.Called(ctx, key, q)

	var r0 *redis.GeoSearchLocationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd); ok {
		r0 = rf(ctx, key, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.GeoSearchLocationCmd)
		}
	}

	return r0
}

// UniversalClient_GeoSearchLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoSearchLocation'
type UniversalClient_GeoSearchLocation_Call struct {
	*mock.Call
}

// GeoSearchLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - q *redis.GeoSearchLocationQuery
func (_e *UniversalClient_Expecter) GeoSearchLocation(ctx interface{}, key interface{}, q interface{}) *UniversalClient_GeoSearchLocation_Call {
	return &UniversalClient_GeoSearchLocation_Call{Call: _e.mock.On("GeoSearchLocation", ctx, key, q)}
}

func (_c *UniversalClient_GeoSearchLocation_Call) Run(run func(ctx context.Context, key string, q *redis.GeoSearchLocationQuery)) *UniversalClient_GeoSearchLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.GeoSearchLocationQuery))
	})
	return _c
}

func (_c *UniversalClient_GeoSearchLocation_Call) Return(_a0 *redis.GeoSearchLocationCmd) *UniversalClient_GeoSearchLocation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoSearchLocation_Call) RunAndReturn(run func(context.Context, string, *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd) *UniversalClient_GeoSearchLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GeoSearchStore provides a mock function with given fields: ctx, key, store, q
func (_m *UniversalClient) GeoSearchStore(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery) *redis.IntCmd {
	ret := _m.Called(ctx, key, store, q)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *redis.GeoSearchStoreQuery) *redis.IntCmd); ok {
		r0 = rf(ctx, key, store, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_GeoSearchStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeoSearchStore'
type UniversalClient_GeoSearchStore_Call struct {
	*mock.Call
}

// GeoSearchStore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - store string
//   - q *redis.GeoSearchStoreQuery
func (_e *UniversalClient_Expecter) GeoSearchStore(ctx interface{}, key interface{}, store interface{}, q interface{}) *UniversalClient_GeoSearchStore_Call {
	return &UniversalClient_GeoSearchStore_Call{Call: _e.mock.On("GeoSearchStore", ctx, key, store, q)}
}

func (_c *UniversalClient_GeoSearchStore_Call) Run(run func(ctx context.Context, key string, store string, q *redis.GeoSearchStoreQuery)) *UniversalClient_GeoSearchStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*redis.GeoSearchStoreQuery))
	})
	return _c
}

func (_c *UniversalClient_GeoSearchStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_GeoSearchStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GeoSearchStore_Call) RunAndReturn(run func(context.Context, string, string, *redis.GeoSearchStoreQuery) *redis.IntCmd) *UniversalClient_GeoSearchStore_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *UniversalClient) Get(ctx context.Context, key string) *redis.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UniversalClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) Get(ctx interface{}, key interface{}) *UniversalClient_Get_Call {
	return &UniversalClient_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *UniversalClient_Get_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_Get_Call) Return(_a0 *redis.StringCmd) *UniversalClient_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Get_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBit provides a mock function with given fields: ctx, key, offset
func (_m *UniversalClient) GetBit(ctx context.Context, key string, offset int64) *redis.IntCmd {
	ret := _m.Called(ctx, key, offset)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, key, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_GetBit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBit'
type UniversalClient_GetBit_Call struct {
	*mock.Call
}

// GetBit is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - offset int64
func (_e *UniversalClient_Expecter) GetBit(ctx interface{}, key interface{}, offset interface{}) *UniversalClient_GetBit_Call {
	return &UniversalClient_GetBit_Call{Call: _e.mock.On("GetBit", ctx, key, offset)}
}

func (_c *UniversalClient_GetBit_Call) Run(run func(ctx context.Context, key string, offset int64)) *UniversalClient_GetBit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_GetBit_Call) Return(_a0 *redis.IntCmd) *UniversalClient_GetBit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GetBit_Call) RunAndReturn(run func(context.Context, string, int64) *redis.IntCmd) *UniversalClient_GetBit_Call {
	_c.Call.Return(run)
	return _c
}

// GetDel provides a mock function with given fields: ctx, key
func (_m *UniversalClient) GetDel(ctx context.Context, key string) *redis.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_GetDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDel'
type UniversalClient_GetDel_Call struct {
	*mock.Call
}

// GetDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) GetDel(ctx interface{}, key interface{}) *UniversalClient_GetDel_Call {
	return &UniversalClient_GetDel_Call{Call: _e.mock.On("GetDel", ctx, key)}
}

func (_c *UniversalClient_GetDel_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_GetDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_GetDel_Call) Return(_a0 *redis.StringCmd) *UniversalClient_GetDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GetDel_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_GetDel_Call {
	_c.Call.Return(run)
	return _c
}

// GetEx provides a mock function with given fields: ctx, key, expiration
func (_m *UniversalClient) GetEx(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *redis.StringCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_GetEx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEx'
type UniversalClient_GetEx_Call struct {
	*mock.Call
}

// GetEx is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) GetEx(ctx interface{}, key interface{}, expiration interface{}) *UniversalClient_GetEx_Call {
	return &UniversalClient_GetEx_Call{Call: _e.mock.On("GetEx", ctx, key, expiration)}
}

func (_c *UniversalClient_GetEx_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *UniversalClient_GetEx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_GetEx_Call) Return(_a0 *redis.StringCmd) *UniversalClient_GetEx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GetEx_Call) RunAndReturn(run func(context.Context, string, time.Duration) *redis.StringCmd) *UniversalClient_GetEx_Call {
	_c.Call.Return(run)
	return _c
}

// GetRange provides a mock function with given fields: ctx, key, start, end
func (_m *UniversalClient) GetRange(ctx context.Context, key string, start int64, end int64) *redis.StringCmd {
	ret := _m.Called(ctx, key, start, end)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.StringCmd); ok {
		r0 = rf(ctx, key, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_GetRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRange'
type UniversalClient_GetRange_Call struct {
	*mock.Call
}

// GetRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - end int64
func (_e *UniversalClient_Expecter) GetRange(ctx interface{}, key interface{}, start interface{}, end interface{}) *UniversalClient_GetRange_Call {
	return &UniversalClient_GetRange_Call{Call: _e.mock.On("GetRange", ctx, key, start, end)}
}

func (_c *UniversalClient_GetRange_Call) Run(run func(ctx context.Context, key string, start int64, end int64)) *UniversalClient_GetRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_GetRange_Call) Return(_a0 *redis.StringCmd) *UniversalClient_GetRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GetRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.StringCmd) *UniversalClient_GetRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetSet provides a mock function with given fields: ctx, key, value
func (_m *UniversalClient) GetSet(ctx context.Context, key string, value interface{}) *redis.StringCmd {
	ret := _m.Called(ctx, key, value)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.StringCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_GetSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSet'
type UniversalClient_GetSet_Call struct {
	*mock.Call
}

// GetSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
func (_e *UniversalClient_Expecter) GetSet(ctx interface{}, key interface{}, value interface{}) *UniversalClient_GetSet_Call {
	return &UniversalClient_GetSet_Call{Call: _e.mock.On("GetSet", ctx, key, value)}
}

func (_c *UniversalClient_GetSet_Call) Run(run func(ctx context.Context, key string, value interface{})) *UniversalClient_GetSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_GetSet_Call) Return(_a0 *redis.StringCmd) *UniversalClient_GetSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_GetSet_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.StringCmd) *UniversalClient_GetSet_Call {
	_c.Call.Return(run)
	return _c
}

// HDel provides a mock function with given fields: ctx, key, fields
func (_m *UniversalClient) HDel(ctx context.Context, key string, fields ...string) *redis.IntCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_HDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HDel'
type UniversalClient_HDel_Call struct {
	*mock.Call
}

// HDel is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *UniversalClient_Expecter) HDel(ctx interface{}, key interface{}, fields ...interface{}) *UniversalClient_HDel_Call {
	return &UniversalClient_HDel_Call{Call: _e.mock.On("HDel",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *UniversalClient_HDel_Call) Run(run func(ctx context.Context, key string, fields ...string)) *UniversalClient_HDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_HDel_Call) Return(_a0 *redis.IntCmd) *UniversalClient_HDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HDel_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.IntCmd) *UniversalClient_HDel_Call {
	_c.Call.Return(run)
	return _c
}

// HExists provides a mock function with given fields: ctx, key, field
func (_m *UniversalClient) HExists(ctx context.Context, key string, field string) *redis.BoolCmd {
	ret := _m.Called(ctx, key, field)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_HExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HExists'
type UniversalClient_HExists_Call struct {
	*mock.Call
}

// HExists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
func (_e *UniversalClient_Expecter) HExists(ctx interface{}, key interface{}, field interface{}) *UniversalClient_HExists_Call {
	return &UniversalClient_HExists_Call{Call: _e.mock.On("HExists", ctx, key, field)}
}

func (_c *UniversalClient_HExists_Call) Run(run func(ctx context.Context, key string, field string)) *UniversalClient_HExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_HExists_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_HExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HExists_Call) RunAndReturn(run func(context.Context, string, string) *redis.BoolCmd) *UniversalClient_HExists_Call {
	_c.Call.Return(run)
	return _c
}

// HGet provides a mock function with given fields: ctx, key, field
func (_m *UniversalClient) HGet(ctx context.Context, key string, field string) *redis.StringCmd {
	ret := _m.Called(ctx, key, field)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_HGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HGet'
type UniversalClient_HGet_Call struct {
	*mock.Call
}

// HGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
func (_e *UniversalClient_Expecter) HGet(ctx interface{}, key interface{}, field interface{}) *UniversalClient_HGet_Call {
	return &UniversalClient_HGet_Call{Call: _e.mock.On("HGet", ctx, key, field)}
}

func (_c *UniversalClient_HGet_Call) Run(run func(ctx context.Context, key string, field string)) *UniversalClient_HGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_HGet_Call) Return(_a0 *redis.StringCmd) *UniversalClient_HGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HGet_Call) RunAndReturn(run func(context.Context, string, string) *redis.StringCmd) *UniversalClient_HGet_Call {
	_c.Call.Return(run)
	return _c
}

// HGetAll provides a mock function with given fields: ctx, key
func (_m *UniversalClient) HGetAll(ctx context.Context, key string) *redis.MapStringStringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.MapStringStringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.MapStringStringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.MapStringStringCmd)
		}
	}

	return r0
}

// UniversalClient_HGetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HGetAll'
type UniversalClient_HGetAll_Call struct {
	*mock.Call
}

// HGetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) HGetAll(ctx interface{}, key interface{}) *UniversalClient_HGetAll_Call {
	return &UniversalClient_HGetAll_Call{Call: _e.mock.On("HGetAll", ctx, key)}
}

func (_c *UniversalClient_HGetAll_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_HGetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_HGetAll_Call) Return(_a0 *redis.MapStringStringCmd) *UniversalClient_HGetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HGetAll_Call) RunAndReturn(run func(context.Context, string) *redis.MapStringStringCmd) *UniversalClient_HGetAll_Call {
	_c.Call.Return(run)
	return _c
}

// HIncrBy provides a mock function with given fields: ctx, key, field, incr
func (_m *UniversalClient) HIncrBy(ctx context.Context, key string, field string, incr int64) *redis.IntCmd {
	ret := _m.Called(ctx, key, field, incr)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, key, field, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_HIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HIncrBy'
type UniversalClient_HIncrBy_Call struct {
	*mock.Call
}

// HIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
//   - incr int64
func (_e *UniversalClient_Expecter) HIncrBy(ctx interface{}, key interface{}, field interface{}, incr interface{}) *UniversalClient_HIncrBy_Call {
	return &UniversalClient_HIncrBy_Call{Call: _e.mock.On("HIncrBy", ctx, key, field, incr)}
}

func (_c *UniversalClient_HIncrBy_Call) Run(run func(ctx context.Context, key string, field string, incr int64)) *UniversalClient_HIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_HIncrBy_Call) Return(_a0 *redis.IntCmd) *UniversalClient_HIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HIncrBy_Call) RunAndReturn(run func(context.Context, string, string, int64) *redis.IntCmd) *UniversalClient_HIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// HIncrByFloat provides a mock function with given fields: ctx, key, field, incr
func (_m *UniversalClient) HIncrByFloat(ctx context.Context, key string, field string, incr float64) *redis.FloatCmd {
	ret := _m.Called(ctx, key, field, incr)

	var r0 *redis.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) *redis.FloatCmd); ok {
		r0 = rf(ctx, key, field, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatCmd)
		}
	}

	return r0
}

// UniversalClient_HIncrByFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HIncrByFloat'
type UniversalClient_HIncrByFloat_Call struct {
	*mock.Call
}

// HIncrByFloat is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
//   - incr float64
func (_e *UniversalClient_Expecter) HIncrByFloat(ctx interface{}, key interface{}, field interface{}, incr interface{}) *UniversalClient_HIncrByFloat_Call {
	return &UniversalClient_HIncrByFloat_Call{Call: _e.mock.On("HIncrByFloat", ctx, key, field, incr)}
}

func (_c *UniversalClient_HIncrByFloat_Call) Run(run func(ctx context.Context, key string, field string, incr float64)) *UniversalClient_HIncrByFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *UniversalClient_HIncrByFloat_Call) Return(_a0 *redis.FloatCmd) *UniversalClient_HIncrByFloat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HIncrByFloat_Call) RunAndReturn(run func(context.Context, string, string, float64) *redis.FloatCmd) *UniversalClient_HIncrByFloat_Call {
	_c.Call.Return(run)
	return _c
}

// HKeys provides a mock function with given fields: ctx, key
func (_m *UniversalClient) HKeys(ctx context.Context, key string) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_HKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HKeys'
type UniversalClient_HKeys_Call struct {
	*mock.Call
}

// HKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) HKeys(ctx interface{}, key interface{}) *UniversalClient_HKeys_Call {
	return &UniversalClient_HKeys_Call{Call: _e.mock.On("HKeys", ctx, key)}
}

func (_c *UniversalClient_HKeys_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_HKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_HKeys_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_HKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HKeys_Call) RunAndReturn(run func(context.Context, string) *redis.StringSliceCmd) *UniversalClient_HKeys_Call {
	_c.Call.Return(run)
	return _c
}

// HLen provides a mock function with given fields: ctx, key
func (_m *UniversalClient) HLen(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_HLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HLen'
type UniversalClient_HLen_Call struct {
	*mock.Call
}

// HLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) HLen(ctx interface{}, key interface{}) *UniversalClient_HLen_Call {
	return &UniversalClient_HLen_Call{Call: _e.mock.On("HLen", ctx, key)}
}

func (_c *UniversalClient_HLen_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_HLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_HLen_Call) Return(_a0 *redis.IntCmd) *UniversalClient_HLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HLen_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_HLen_Call {
	_c.Call.Return(run)
	return _c
}

// HMGet provides a mock function with given fields: ctx, key, fields
func (_m *UniversalClient) HMGet(ctx context.Context, key string, fields ...string) *redis.SliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.SliceCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.SliceCmd)
		}
	}

	return r0
}

// UniversalClient_HMGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HMGet'
type UniversalClient_HMGet_Call struct {
	*mock.Call
}

// HMGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - fields ...string
func (_e *UniversalClient_Expecter) HMGet(ctx interface{}, key interface{}, fields ...interface{}) *UniversalClient_HMGet_Call {
	return &UniversalClient_HMGet_Call{Call: _e.mock.On("HMGet",
		append([]interface{}{ctx, key}, fields...)...)}
}

func (_c *UniversalClient_HMGet_Call) Run(run func(ctx context.Context, key string, fields ...string)) *UniversalClient_HMGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_HMGet_Call) Return(_a0 *redis.SliceCmd) *UniversalClient_HMGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HMGet_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.SliceCmd) *UniversalClient_HMGet_Call {
	_c.Call.Return(run)
	return _c
}

// HMSet provides a mock function with given fields: ctx, key, values
func (_m *UniversalClient) HMSet(ctx context.Context, key string, values ...interface{}) *redis.BoolCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_HMSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HMSet'
type UniversalClient_HMSet_Call struct {
	*mock.Call
}

// HMSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *UniversalClient_Expecter) HMSet(ctx interface{}, key interface{}, values ...interface{}) *UniversalClient_HMSet_Call {
	return &UniversalClient_HMSet_Call{Call: _e.mock.On("HMSet",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *UniversalClient_HMSet_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *UniversalClient_HMSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_HMSet_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_HMSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HMSet_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.BoolCmd) *UniversalClient_HMSet_Call {
	_c.Call.Return(run)
	return _c
}

// HRandField provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) HRandField(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_HRandField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HRandField'
type UniversalClient_HRandField_Call struct {
	*mock.Call
}

// HRandField is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *UniversalClient_Expecter) HRandField(ctx interface{}, key interface{}, count interface{}) *UniversalClient_HRandField_Call {
	return &UniversalClient_HRandField_Call{Call: _e.mock.On("HRandField", ctx, key, count)}
}

func (_c *UniversalClient_HRandField_Call) Run(run func(ctx context.Context, key string, count int)) *UniversalClient_HRandField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_HRandField_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_HRandField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HRandField_Call) RunAndReturn(run func(context.Context, string, int) *redis.StringSliceCmd) *UniversalClient_HRandField_Call {
	_c.Call.Return(run)
	return _c
}

// HRandFieldWithValues provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) HRandFieldWithValues(ctx context.Context, key string, count int) *redis.KeyValueSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *redis.KeyValueSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *redis.KeyValueSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.KeyValueSliceCmd)
		}
	}

	return r0
}

// UniversalClient_HRandFieldWithValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HRandFieldWithValues'
type UniversalClient_HRandFieldWithValues_Call struct {
	*mock.Call
}

// HRandFieldWithValues is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *UniversalClient_Expecter) HRandFieldWithValues(ctx interface{}, key interface{}, count interface{}) *UniversalClient_HRandFieldWithValues_Call {
	return &UniversalClient_HRandFieldWithValues_Call{Call: _e.mock.On("HRandFieldWithValues", ctx, key, count)}
}

func (_c *UniversalClient_HRandFieldWithValues_Call) Run(run func(ctx context.Context, key string, count int)) *UniversalClient_HRandFieldWithValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_HRandFieldWithValues_Call) Return(_a0 *redis.KeyValueSliceCmd) *UniversalClient_HRandFieldWithValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HRandFieldWithValues_Call) RunAndReturn(run func(context.Context, string, int) *redis.KeyValueSliceCmd) *UniversalClient_HRandFieldWithValues_Call {
	_c.Call.Return(run)
	return _c
}

// HScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *UniversalClient) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	var r0 *redis.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *redis.ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ScanCmd)
		}
	}

	return r0
}

// UniversalClient_HScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HScan'
type UniversalClient_HScan_Call struct {
	*mock.Call
}

// HScan is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - cursor uint64
//   - match string
//   - count int64
func (_e *UniversalClient_Expecter) HScan(ctx interface{}, key interface{}, cursor interface{}, match interface{}, count interface{}) *UniversalClient_HScan_Call {
	return &UniversalClient_HScan_Call{Call: _e.mock.On("HScan", ctx, key, cursor, match, count)}
}

func (_c *UniversalClient_HScan_Call) Run(run func(ctx context.Context, key string, cursor uint64, match string, count int64)) *UniversalClient_HScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *UniversalClient_HScan_Call) Return(_a0 *redis.ScanCmd) *UniversalClient_HScan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HScan_Call) RunAndReturn(run func(context.Context, string, uint64, string, int64) *redis.ScanCmd) *UniversalClient_HScan_Call {
	_c.Call.Return(run)
	return _c
}

// HSet provides a mock function with given fields: ctx, key, values
func (_m *UniversalClient) HSet(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_HSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HSet'
type UniversalClient_HSet_Call struct {
	*mock.Call
}

// HSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *UniversalClient_Expecter) HSet(ctx interface{}, key interface{}, values ...interface{}) *UniversalClient_HSet_Call {
	return &UniversalClient_HSet_Call{Call: _e.mock.On("HSet",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *UniversalClient_HSet_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *UniversalClient_HSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_HSet_Call) Return(_a0 *redis.IntCmd) *UniversalClient_HSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HSet_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *UniversalClient_HSet_Call {
	_c.Call.Return(run)
	return _c
}

// HSetNX provides a mock function with given fields: ctx, key, field, value
func (_m *UniversalClient) HSetNX(ctx context.Context, key string, field string, value interface{}) *redis.BoolCmd {
	ret := _m.Called(ctx, key, field, value)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_HSetNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HSetNX'
type UniversalClient_HSetNX_Call struct {
	*mock.Call
}

// HSetNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - field string
//   - value interface{}
func (_e *UniversalClient_Expecter) HSetNX(ctx interface{}, key interface{}, field interface{}, value interface{}) *UniversalClient_HSetNX_Call {
	return &UniversalClient_HSetNX_Call{Call: _e.mock.On("HSetNX", ctx, key, field, value)}
}

func (_c *UniversalClient_HSetNX_Call) Run(run func(ctx context.Context, key string, field string, value interface{})) *UniversalClient_HSetNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_HSetNX_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_HSetNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HSetNX_Call) RunAndReturn(run func(context.Context, string, string, interface{}) *redis.BoolCmd) *UniversalClient_HSetNX_Call {
	_c.Call.Return(run)
	return _c
}

// HVals provides a mock function with given fields: ctx, key
func (_m *UniversalClient) HVals(ctx context.Context, key string) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_HVals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HVals'
type UniversalClient_HVals_Call struct {
	*mock.Call
}

// HVals is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) HVals(ctx interface{}, key interface{}) *UniversalClient_HVals_Call {
	return &UniversalClient_HVals_Call{Call: _e.mock.On("HVals", ctx, key)}
}

func (_c *UniversalClient_HVals_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_HVals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_HVals_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_HVals_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_HVals_Call) RunAndReturn(run func(context.Context, string) *redis.StringSliceCmd) *UniversalClient_HVals_Call {
	_c.Call.Return(run)
	return _c
}

// Incr provides a mock function with given fields: ctx, key
func (_m *UniversalClient) Incr(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_Incr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Incr'
type UniversalClient_Incr_Call struct {
	*mock.Call
}

// Incr is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) Incr(ctx interface{}, key interface{}) *UniversalClient_Incr_Call {
	return &UniversalClient_Incr_Call{Call: _e.mock.On("Incr", ctx, key)}
}

func (_c *UniversalClient_Incr_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_Incr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_Incr_Call) Return(_a0 *redis.IntCmd) *UniversalClient_Incr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Incr_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_Incr_Call {
	_c.Call.Return(run)
	return _c
}

// IncrBy provides a mock function with given fields: ctx, key, value
func (_m *UniversalClient) IncrBy(ctx context.Context, key string, value int64) *redis.IntCmd {
	ret := _m.Called(ctx, key, value)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_IncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrBy'
type UniversalClient_IncrBy_Call struct {
	*mock.Call
}

// IncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value int64
func (_e *UniversalClient_Expecter) IncrBy(ctx interface{}, key interface{}, value interface{}) *UniversalClient_IncrBy_Call {
	return &UniversalClient_IncrBy_Call{Call: _e.mock.On("IncrBy", ctx, key, value)}
}

func (_c *UniversalClient_IncrBy_Call) Run(run func(ctx context.Context, key string, value int64)) *UniversalClient_IncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_IncrBy_Call) Return(_a0 *redis.IntCmd) *UniversalClient_IncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_IncrBy_Call) RunAndReturn(run func(context.Context, string, int64) *redis.IntCmd) *UniversalClient_IncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// IncrByFloat provides a mock function with given fields: ctx, key, value
func (_m *UniversalClient) IncrByFloat(ctx context.Context, key string, value float64) *redis.FloatCmd {
	ret := _m.Called(ctx, key, value)

	var r0 *redis.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *redis.FloatCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatCmd)
		}
	}

	return r0
}

// UniversalClient_IncrByFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrByFloat'
type UniversalClient_IncrByFloat_Call struct {
	*mock.Call
}

// IncrByFloat is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value float64
func (_e *UniversalClient_Expecter) IncrByFloat(ctx interface{}, key interface{}, value interface{}) *UniversalClient_IncrByFloat_Call {
	return &UniversalClient_IncrByFloat_Call{Call: _e.mock.On("IncrByFloat", ctx, key, value)}
}

func (_c *UniversalClient_IncrByFloat_Call) Run(run func(ctx context.Context, key string, value float64)) *UniversalClient_IncrByFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *UniversalClient_IncrByFloat_Call) Return(_a0 *redis.FloatCmd) *UniversalClient_IncrByFloat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_IncrByFloat_Call) RunAndReturn(run func(context.Context, string, float64) *redis.FloatCmd) *UniversalClient_IncrByFloat_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: ctx, section
func (_m *UniversalClient) Info(ctx context.Context, section ...string) *redis.StringCmd {
	_va := make([]interface{}, len(section))
	for _i := range section {
		_va[_i] = section[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.StringCmd); ok {
		r0 = rf(ctx, section...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type UniversalClient_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - section ...string
func (_e *UniversalClient_Expecter) Info(ctx interface{}, section ...interface{}) *UniversalClient_Info_Call {
	return &UniversalClient_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{ctx}, section...)...)}
}

func (_c *UniversalClient_Info_Call) Run(run func(ctx context.Context, section ...string)) *UniversalClient_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_Info_Call) Return(_a0 *redis.StringCmd) *UniversalClient_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Info_Call) RunAndReturn(run func(context.Context, ...string) *redis.StringCmd) *UniversalClient_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function with given fields: ctx, pattern
func (_m *UniversalClient) Keys(ctx context.Context, pattern string) *redis.StringSliceCmd {
	ret := _m.Called(ctx, pattern)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type UniversalClient_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
//   - ctx context.Context
//   - pattern string
func (_e *UniversalClient_Expecter) Keys(ctx interface{}, pattern interface{}) *UniversalClient_Keys_Call {
	return &UniversalClient_Keys_Call{Call: _e.mock.On("Keys", ctx, pattern)}
}

func (_c *UniversalClient_Keys_Call) Run(run func(ctx context.Context, pattern string)) *UniversalClient_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_Keys_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_Keys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Keys_Call) RunAndReturn(run func(context.Context, string) *redis.StringSliceCmd) *UniversalClient_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// LCS provides a mock function with given fields: ctx, q
func (_m *UniversalClient) LCS(ctx context.Context, q *redis.LCSQuery) *redis.LCSCmd {
	ret := _m.Called(ctx, q)

	var r0 *redis.LCSCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.LCSQuery) *redis.LCSCmd); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.LCSCmd)
		}
	}

	return r0
}

// UniversalClient_LCS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LCS'
type UniversalClient_LCS_Call struct {
	*mock.Call
}

// LCS is a helper method to define mock.On call
//   - ctx context.Context
//   - q *redis.LCSQuery
func (_e *UniversalClient_Expecter) LCS(ctx interface{}, q interface{}) *UniversalClient_LCS_Call {
	return &UniversalClient_LCS_Call{Call: _e.mock.On("LCS", ctx, q)}
}

func (_c *UniversalClient_LCS_Call) Run(run func(ctx context.Context, q *redis.LCSQuery)) *UniversalClient_LCS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.LCSQuery))
	})
	return _c
}

func (_c *UniversalClient_LCS_Call) Return(_a0 *redis.LCSCmd) *UniversalClient_LCS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LCS_Call) RunAndReturn(run func(context.Context, *redis.LCSQuery) *redis.LCSCmd) *UniversalClient_LCS_Call {
	_c.Call.Return(run)
	return _c
}

// LIndex provides a mock function with given fields: ctx, key, index
func (_m *UniversalClient) LIndex(ctx context.Context, key string, index int64) *redis.StringCmd {
	ret := _m.Called(ctx, key, index)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.StringCmd); ok {
		r0 = rf(ctx, key, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_LIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LIndex'
type UniversalClient_LIndex_Call struct {
	*mock.Call
}

// LIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - index int64
func (_e *UniversalClient_Expecter) LIndex(ctx interface{}, key interface{}, index interface{}) *UniversalClient_LIndex_Call {
	return &UniversalClient_LIndex_Call{Call: _e.mock.On("LIndex", ctx, key, index)}
}

func (_c *UniversalClient_LIndex_Call) Run(run func(ctx context.Context, key string, index int64)) *UniversalClient_LIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_LIndex_Call) Return(_a0 *redis.StringCmd) *UniversalClient_LIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LIndex_Call) RunAndReturn(run func(context.Context, string, int64) *redis.StringCmd) *UniversalClient_LIndex_Call {
	_c.Call.Return(run)
	return _c
}

// LInsert provides a mock function with given fields: ctx, key, op, pivot, value
func (_m *UniversalClient) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *redis.IntCmd {
	ret := _m.Called(ctx, key, op, pivot, value)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, op, pivot, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_LInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LInsert'
type UniversalClient_LInsert_Call struct {
	*mock.Call
}

// LInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - op string
//   - pivot interface{}
//   - value interface{}
func (_e *UniversalClient_Expecter) LInsert(ctx interface{}, key interface{}, op interface{}, pivot interface{}, value interface{}) *UniversalClient_LInsert_Call {
	return &UniversalClient_LInsert_Call{Call: _e.mock.On("LInsert", ctx, key, op, pivot, value)}
}

func (_c *UniversalClient_LInsert_Call) Run(run func(ctx context.Context, key string, op string, pivot interface{}, value interface{})) *UniversalClient_LInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_LInsert_Call) Return(_a0 *redis.IntCmd) *UniversalClient_LInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LInsert_Call) RunAndReturn(run func(context.Context, string, string, interface{}, interface{}) *redis.IntCmd) *UniversalClient_LInsert_Call {
	_c.Call.Return(run)
	return _c
}

// LInsertAfter provides a mock function with given fields: ctx, key, pivot, value
func (_m *UniversalClient) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	ret := _m.Called(ctx, key, pivot, value)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, pivot, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_LInsertAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LInsertAfter'
type UniversalClient_LInsertAfter_Call struct {
	*mock.Call
}

// LInsertAfter is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - pivot interface{}
//   - value interface{}
func (_e *UniversalClient_Expecter) LInsertAfter(ctx interface{}, key interface{}, pivot interface{}, value interface{}) *UniversalClient_LInsertAfter_Call {
	return &UniversalClient_LInsertAfter_Call{Call: _e.mock.On("LInsertAfter", ctx, key, pivot, value)}
}

func (_c *UniversalClient_LInsertAfter_Call) Run(run func(ctx context.Context, key string, pivot interface{}, value interface{})) *UniversalClient_LInsertAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_LInsertAfter_Call) Return(_a0 *redis.IntCmd) *UniversalClient_LInsertAfter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LInsertAfter_Call) RunAndReturn(run func(context.Context, string, interface{}, interface{}) *redis.IntCmd) *UniversalClient_LInsertAfter_Call {
	_c.Call.Return(run)
	return _c
}

// LInsertBefore provides a mock function with given fields: ctx, key, pivot, value
func (_m *UniversalClient) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) *redis.IntCmd {
	ret := _m.Called(ctx, key, pivot, value)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, pivot, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_LInsertBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LInsertBefore'
type UniversalClient_LInsertBefore_Call struct {
	*mock.Call
}

// LInsertBefore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - pivot interface{}
//   - value interface{}
func (_e *UniversalClient_Expecter) LInsertBefore(ctx interface{}, key interface{}, pivot interface{}, value interface{}) *UniversalClient_LInsertBefore_Call {
	return &UniversalClient_LInsertBefore_Call{Call: _e.mock.On("LInsertBefore", ctx, key, pivot, value)}
}

func (_c *UniversalClient_LInsertBefore_Call) Run(run func(ctx context.Context, key string, pivot interface{}, value interface{})) *UniversalClient_LInsertBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_LInsertBefore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_LInsertBefore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LInsertBefore_Call) RunAndReturn(run func(context.Context, string, interface{}, interface{}) *redis.IntCmd) *UniversalClient_LInsertBefore_Call {
	_c.Call.Return(run)
	return _c
}

// LLen provides a mock function with given fields: ctx, key
func (_m *UniversalClient) LLen(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_LLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LLen'
type UniversalClient_LLen_Call struct {
	*mock.Call
}

// LLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) LLen(ctx interface{}, key interface{}) *UniversalClient_LLen_Call {
	return &UniversalClient_LLen_Call{Call: _e.mock.On("LLen", ctx, key)}
}

func (_c *UniversalClient_LLen_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_LLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_LLen_Call) Return(_a0 *redis.IntCmd) *UniversalClient_LLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LLen_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_LLen_Call {
	_c.Call.Return(run)
	return _c
}

// LMPop provides a mock function with given fields: ctx, direction, count, keys
func (_m *UniversalClient) LMPop(ctx context.Context, direction string, count int64, keys ...string) *redis.KeyValuesCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, direction, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.KeyValuesCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, ...string) *redis.KeyValuesCmd); ok {
		r0 = rf(ctx, direction, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.KeyValuesCmd)
		}
	}

	return r0
}

// UniversalClient_LMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LMPop'
type UniversalClient_LMPop_Call struct {
	*mock.Call
}

// LMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - direction string
//   - count int64
//   - keys ...string
func (_e *UniversalClient_Expecter) LMPop(ctx interface{}, direction interface{}, count interface{}, keys ...interface{}) *UniversalClient_LMPop_Call {
	return &UniversalClient_LMPop_Call{Call: _e.mock.On("LMPop",
		append([]interface{}{ctx, direction, count}, keys...)...)}
}

func (_c *UniversalClient_LMPop_Call) Run(run func(ctx context.Context, direction string, count int64, keys ...string)) *UniversalClient_LMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(int64), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_LMPop_Call) Return(_a0 *redis.KeyValuesCmd) *UniversalClient_LMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LMPop_Call) RunAndReturn(run func(context.Context, string, int64, ...string) *redis.KeyValuesCmd) *UniversalClient_LMPop_Call {
	_c.Call.Return(run)
	return _c
}

// LMove provides a mock function with given fields: ctx, source, destination, srcpos, destpos
func (_m *UniversalClient) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) *redis.StringCmd {
	ret := _m.Called(ctx, source, destination, srcpos, destpos)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *redis.StringCmd); ok {
		r0 = rf(ctx, source, destination, srcpos, destpos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_LMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LMove'
type UniversalClient_LMove_Call struct {
	*mock.Call
}

// LMove is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
//   - srcpos string
//   - destpos string
func (_e *UniversalClient_Expecter) LMove(ctx interface{}, source interface{}, destination interface{}, srcpos interface{}, destpos interface{}) *UniversalClient_LMove_Call {
	return &UniversalClient_LMove_Call{Call: _e.mock.On("LMove", ctx, source, destination, srcpos, destpos)}
}

func (_c *UniversalClient_LMove_Call) Run(run func(ctx context.Context, source string, destination string, srcpos string, destpos string)) *UniversalClient_LMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *UniversalClient_LMove_Call) Return(_a0 *redis.StringCmd) *UniversalClient_LMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LMove_Call) RunAndReturn(run func(context.Context, string, string, string, string) *redis.StringCmd) *UniversalClient_LMove_Call {
	_c.Call.Return(run)
	return _c
}

// LPop provides a mock function with given fields: ctx, key
func (_m *UniversalClient) LPop(ctx context.Context, key string) *redis.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_LPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPop'
type UniversalClient_LPop_Call struct {
	*mock.Call
}

// LPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) LPop(ctx interface{}, key interface{}) *UniversalClient_LPop_Call {
	return &UniversalClient_LPop_Call{Call: _e.mock.On("LPop", ctx, key)}
}

func (_c *UniversalClient_LPop_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_LPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_LPop_Call) Return(_a0 *redis.StringCmd) *UniversalClient_LPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LPop_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_LPop_Call {
	_c.Call.Return(run)
	return _c
}

// LPopCount provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) LPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_LPopCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPopCount'
type UniversalClient_LPopCount_Call struct {
	*mock.Call
}

// LPopCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *UniversalClient_Expecter) LPopCount(ctx interface{}, key interface{}, count interface{}) *UniversalClient_LPopCount_Call {
	return &UniversalClient_LPopCount_Call{Call: _e.mock.On("LPopCount", ctx, key, count)}
}

func (_c *UniversalClient_LPopCount_Call) Run(run func(ctx context.Context, key string, count int)) *UniversalClient_LPopCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_LPopCount_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_LPopCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LPopCount_Call) RunAndReturn(run func(context.Context, string, int) *redis.StringSliceCmd) *UniversalClient_LPopCount_Call {
	_c.Call.Return(run)
	return _c
}

// LPos provides a mock function with given fields: ctx, key, value, args
func (_m *UniversalClient) LPos(ctx context.Context, key string, value string, args redis.LPosArgs) *redis.IntCmd {
	ret := _m.Called(ctx, key, value, args)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, redis.LPosArgs) *redis.IntCmd); ok {
		r0 = rf(ctx, key, value, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_LPos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPos'
type UniversalClient_LPos_Call struct {
	*mock.Call
}

// LPos is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
//   - args redis.LPosArgs
func (_e *UniversalClient_Expecter) LPos(ctx interface{}, key interface{}, value interface{}, args interface{}) *UniversalClient_LPos_Call {
	return &UniversalClient_LPos_Call{Call: _e.mock.On("LPos", ctx, key, value, args)}
}

func (_c *UniversalClient_LPos_Call) Run(run func(ctx context.Context, key string, value string, args redis.LPosArgs)) *UniversalClient_LPos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(redis.LPosArgs))
	})
	return _c
}

func (_c *UniversalClient_LPos_Call) Return(_a0 *redis.IntCmd) *UniversalClient_LPos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LPos_Call) RunAndReturn(run func(context.Context, string, string, redis.LPosArgs) *redis.IntCmd) *UniversalClient_LPos_Call {
	_c.Call.Return(run)
	return _c
}

// LPosCount provides a mock function with given fields: ctx, key, value, count, args
func (_m *UniversalClient) LPosCount(ctx context.Context, key string, value string, count int64, args redis.LPosArgs) *redis.IntSliceCmd {
	ret := _m.Called(ctx, key, value, count, args)

	var r0 *redis.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, redis.LPosArgs) *redis.IntSliceCmd); ok {
		r0 = rf(ctx, key, value, count, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntSliceCmd)
		}
	}

	return r0
}

// UniversalClient_LPosCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPosCount'
type UniversalClient_LPosCount_Call struct {
	*mock.Call
}

// LPosCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
//   - count int64
//   - args redis.LPosArgs
func (_e *UniversalClient_Expecter) LPosCount(ctx interface{}, key interface{}, value interface{}, count interface{}, args interface{}) *UniversalClient_LPosCount_Call {
	return &UniversalClient_LPosCount_Call{Call: _e.mock.On("LPosCount", ctx, key, value, count, args)}
}

func (_c *UniversalClient_LPosCount_Call) Run(run func(ctx context.Context, key string, value string, count int64, args redis.LPosArgs)) *UniversalClient_LPosCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(redis.LPosArgs))
	})
	return _c
}

func (_c *UniversalClient_LPosCount_Call) Return(_a0 *redis.IntSliceCmd) *UniversalClient_LPosCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LPosCount_Call) RunAndReturn(run func(context.Context, string, string, int64, redis.LPosArgs) *redis.IntSliceCmd) *UniversalClient_LPosCount_Call {
	_c.Call.Return(run)
	return _c
}

// LPush provides a mock function with given fields: ctx, key, values
func (_m *UniversalClient) LPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_LPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPush'
type UniversalClient_LPush_Call struct {
	*mock.Call
}

// LPush is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *UniversalClient_Expecter) LPush(ctx interface{}, key interface{}, values ...interface{}) *UniversalClient_LPush_Call {
	return &UniversalClient_LPush_Call{Call: _e.mock.On("LPush",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *UniversalClient_LPush_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *UniversalClient_LPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_LPush_Call) Return(_a0 *redis.IntCmd) *UniversalClient_LPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LPush_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *UniversalClient_LPush_Call {
	_c.Call.Return(run)
	return _c
}

// LPushX provides a mock function with given fields: ctx, key, values
func (_m *UniversalClient) LPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_LPushX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPushX'
type UniversalClient_LPushX_Call struct {
	*mock.Call
}

// LPushX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *UniversalClient_Expecter) LPushX(ctx interface{}, key interface{}, values ...interface{}) *UniversalClient_LPushX_Call {
	return &UniversalClient_LPushX_Call{Call: _e.mock.On("LPushX",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *UniversalClient_LPushX_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *UniversalClient_LPushX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_LPushX_Call) Return(_a0 *redis.IntCmd) *UniversalClient_LPushX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LPushX_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *UniversalClient_LPushX_Call {
	_c.Call.Return(run)
	return _c
}

// LRange provides a mock function with given fields: ctx, key, start, stop
func (_m *UniversalClient) LRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_LRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LRange'
type UniversalClient_LRange_Call struct {
	*mock.Call
}

// LRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *UniversalClient_Expecter) LRange(ctx interface{}, key interface{}, start interface{}, stop interface{}) *UniversalClient_LRange_Call {
	return &UniversalClient_LRange_Call{Call: _e.mock.On("LRange", ctx, key, start, stop)}
}

func (_c *UniversalClient_LRange_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *UniversalClient_LRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_LRange_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_LRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.StringSliceCmd) *UniversalClient_LRange_Call {
	_c.Call.Return(run)
	return _c
}

// LRem provides a mock function with given fields: ctx, key, count, value
func (_m *UniversalClient) LRem(ctx context.Context, key string, count int64, value interface{}) *redis.IntCmd {
	ret := _m.Called(ctx, key, count, value)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, count, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_LRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LRem'
type UniversalClient_LRem_Call struct {
	*mock.Call
}

// LRem is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int64
//   - value interface{}
func (_e *UniversalClient_Expecter) LRem(ctx interface{}, key interface{}, count interface{}, value interface{}) *UniversalClient_LRem_Call {
	return &UniversalClient_LRem_Call{Call: _e.mock.On("LRem", ctx, key, count, value)}
}

func (_c *UniversalClient_LRem_Call) Run(run func(ctx context.Context, key string, count int64, value interface{})) *UniversalClient_LRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_LRem_Call) Return(_a0 *redis.IntCmd) *UniversalClient_LRem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LRem_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *redis.IntCmd) *UniversalClient_LRem_Call {
	_c.Call.Return(run)
	return _c
}

// LSet provides a mock function with given fields: ctx, key, index, value
func (_m *UniversalClient) LSet(ctx context.Context, key string, index int64, value interface{}) *redis.StatusCmd {
	ret := _m.Called(ctx, key, index, value)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, index, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_LSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LSet'
type UniversalClient_LSet_Call struct {
	*mock.Call
}

// LSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - index int64
//   - value interface{}
func (_e *UniversalClient_Expecter) LSet(ctx interface{}, key interface{}, index interface{}, value interface{}) *UniversalClient_LSet_Call {
	return &UniversalClient_LSet_Call{Call: _e.mock.On("LSet", ctx, key, index, value)}
}

func (_c *UniversalClient_LSet_Call) Run(run func(ctx context.Context, key string, index int64, value interface{})) *UniversalClient_LSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_LSet_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_LSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LSet_Call) RunAndReturn(run func(context.Context, string, int64, interface{}) *redis.StatusCmd) *UniversalClient_LSet_Call {
	_c.Call.Return(run)
	return _c
}

// LTrim provides a mock function with given fields: ctx, key, start, stop
func (_m *UniversalClient) LTrim(ctx context.Context, key string, start int64, stop int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_LTrim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LTrim'
type UniversalClient_LTrim_Call struct {
	*mock.Call
}

// LTrim is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *UniversalClient_Expecter) LTrim(ctx interface{}, key interface{}, start interface{}, stop interface{}) *UniversalClient_LTrim_Call {
	return &UniversalClient_LTrim_Call{Call: _e.mock.On("LTrim", ctx, key, start, stop)}
}

func (_c *UniversalClient_LTrim_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *UniversalClient_LTrim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_LTrim_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_LTrim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LTrim_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.StatusCmd) *UniversalClient_LTrim_Call {
	_c.Call.Return(run)
	return _c
}

// LastSave provides a mock function with given fields: ctx
func (_m *UniversalClient) LastSave(ctx context.Context) *redis.IntCmd {
	ret := _m.Called(ctx)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_LastSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastSave'
type UniversalClient_LastSave_Call struct {
	*mock.Call
}

// LastSave is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) LastSave(ctx interface{}) *UniversalClient_LastSave_Call {
	return &UniversalClient_LastSave_Call{Call: _e.mock.On("LastSave", ctx)}
}

func (_c *UniversalClient_LastSave_Call) Run(run func(ctx context.Context)) *UniversalClient_LastSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_LastSave_Call) Return(_a0 *redis.IntCmd) *UniversalClient_LastSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_LastSave_Call) RunAndReturn(run func(context.Context) *redis.IntCmd) *UniversalClient_LastSave_Call {
	_c.Call.Return(run)
	return _c
}

// MGet provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) MGet(ctx context.Context, keys ...string) *redis.SliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.SliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.SliceCmd)
		}
	}

	return r0
}

// UniversalClient_MGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MGet'
type UniversalClient_MGet_Call struct {
	*mock.Call
}

// MGet is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) MGet(ctx interface{}, keys ...interface{}) *UniversalClient_MGet_Call {
	return &UniversalClient_MGet_Call{Call: _e.mock.On("MGet",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_MGet_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_MGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_MGet_Call) Return(_a0 *redis.SliceCmd) *UniversalClient_MGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_MGet_Call) RunAndReturn(run func(context.Context, ...string) *redis.SliceCmd) *UniversalClient_MGet_Call {
	_c.Call.Return(run)
	return _c
}

// MSet provides a mock function with given fields: ctx, values
func (_m *UniversalClient) MSet(ctx context.Context, values ...interface{}) *redis.StatusCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *redis.StatusCmd); ok {
		r0 = rf(ctx, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_MSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MSet'
type UniversalClient_MSet_Call struct {
	*mock.Call
}

// MSet is a helper method to define mock.On call
//   - ctx context.Context
//   - values ...interface{}
func (_e *UniversalClient_Expecter) MSet(ctx interface{}, values ...interface{}) *UniversalClient_MSet_Call {
	return &UniversalClient_MSet_Call{Call: _e.mock.On("MSet",
		append([]interface{}{ctx}, values...)...)}
}

func (_c *UniversalClient_MSet_Call) Run(run func(ctx context.Context, values ...interface{})) *UniversalClient_MSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_MSet_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_MSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_MSet_Call) RunAndReturn(run func(context.Context, ...interface{}) *redis.StatusCmd) *UniversalClient_MSet_Call {
	_c.Call.Return(run)
	return _c
}

// MSetNX provides a mock function with given fields: ctx, values
func (_m *UniversalClient) MSetNX(ctx context.Context, values ...interface{}) *redis.BoolCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_MSetNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MSetNX'
type UniversalClient_MSetNX_Call struct {
	*mock.Call
}

// MSetNX is a helper method to define mock.On call
//   - ctx context.Context
//   - values ...interface{}
func (_e *UniversalClient_Expecter) MSetNX(ctx interface{}, values ...interface{}) *UniversalClient_MSetNX_Call {
	return &UniversalClient_MSetNX_Call{Call: _e.mock.On("MSetNX",
		append([]interface{}{ctx}, values...)...)}
}

func (_c *UniversalClient_MSetNX_Call) Run(run func(ctx context.Context, values ...interface{})) *UniversalClient_MSetNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_MSetNX_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_MSetNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_MSetNX_Call) RunAndReturn(run func(context.Context, ...interface{}) *redis.BoolCmd) *UniversalClient_MSetNX_Call {
	_c.Call.Return(run)
	return _c
}

// MemoryUsage provides a mock function with given fields: ctx, key, samples
func (_m *UniversalClient) MemoryUsage(ctx context.Context, key string, samples ...int) *redis.IntCmd {
	_va := make([]interface{}, len(samples))
	for _i := range samples {
		_va[_i] = samples[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int) *redis.IntCmd); ok {
		r0 = rf(ctx, key, samples...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_MemoryUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemoryUsage'
type UniversalClient_MemoryUsage_Call struct {
	*mock.Call
}

// MemoryUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - samples ...int
func (_e *UniversalClient_Expecter) MemoryUsage(ctx interface{}, key interface{}, samples ...interface{}) *UniversalClient_MemoryUsage_Call {
	return &UniversalClient_MemoryUsage_Call{Call: _e.mock.On("MemoryUsage",
		append([]interface{}{ctx, key}, samples...)...)}
}

func (_c *UniversalClient_MemoryUsage_Call) Run(run func(ctx context.Context, key string, samples ...int)) *UniversalClient_MemoryUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_MemoryUsage_Call) Return(_a0 *redis.IntCmd) *UniversalClient_MemoryUsage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_MemoryUsage_Call) RunAndReturn(run func(context.Context, string, ...int) *redis.IntCmd) *UniversalClient_MemoryUsage_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with given fields: ctx, host, port, key, db, timeout
func (_m *UniversalClient) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *redis.StatusCmd {
	ret := _m.Called(ctx, host, port, key, db, timeout)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, time.Duration) *redis.StatusCmd); ok {
		r0 = rf(ctx, host, port, key, db, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type UniversalClient_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - port string
//   - key string
//   - db int
//   - timeout time.Duration
func (_e *UniversalClient_Expecter) Migrate(ctx interface{}, host interface{}, port interface{}, key interface{}, db interface{}, timeout interface{}) *UniversalClient_Migrate_Call {
	return &UniversalClient_Migrate_Call{Call: _e.mock.On("Migrate", ctx, host, port, key, db, timeout)}
}

func (_c *UniversalClient_Migrate_Call) Run(run func(ctx context.Context, host string, port string, key string, db int, timeout time.Duration)) *UniversalClient_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int), args[5].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_Migrate_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Migrate_Call) RunAndReturn(run func(context.Context, string, string, string, int, time.Duration) *redis.StatusCmd) *UniversalClient_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// ModuleLoadex provides a mock function with given fields: ctx, conf
func (_m *UniversalClient) ModuleLoadex(ctx context.Context, conf *redis.ModuleLoadexConfig) *redis.StringCmd {
	ret := _m.Called(ctx, conf)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.ModuleLoadexConfig) *redis.StringCmd); ok {
		r0 = rf(ctx, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_ModuleLoadex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModuleLoadex'
type UniversalClient_ModuleLoadex_Call struct {
	*mock.Call
}

// ModuleLoadex is a helper method to define mock.On call
//   - ctx context.Context
//   - conf *redis.ModuleLoadexConfig
func (_e *UniversalClient_Expecter) ModuleLoadex(ctx interface{}, conf interface{}) *UniversalClient_ModuleLoadex_Call {
	return &UniversalClient_ModuleLoadex_Call{Call: _e.mock.On("ModuleLoadex", ctx, conf)}
}

func (_c *UniversalClient_ModuleLoadex_Call) Run(run func(ctx context.Context, conf *redis.ModuleLoadexConfig)) *UniversalClient_ModuleLoadex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.ModuleLoadexConfig))
	})
	return _c
}

func (_c *UniversalClient_ModuleLoadex_Call) Return(_a0 *redis.StringCmd) *UniversalClient_ModuleLoadex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ModuleLoadex_Call) RunAndReturn(run func(context.Context, *redis.ModuleLoadexConfig) *redis.StringCmd) *UniversalClient_ModuleLoadex_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: ctx, key, db
func (_m *UniversalClient) Move(ctx context.Context, key string, db int) *redis.BoolCmd {
	ret := _m.Called(ctx, key, db)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type UniversalClient_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - db int
func (_e *UniversalClient_Expecter) Move(ctx interface{}, key interface{}, db interface{}) *UniversalClient_Move_Call {
	return &UniversalClient_Move_Call{Call: _e.mock.On("Move", ctx, key, db)}
}

func (_c *UniversalClient_Move_Call) Run(run func(ctx context.Context, key string, db int)) *UniversalClient_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_Move_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_Move_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Move_Call) RunAndReturn(run func(context.Context, string, int) *redis.BoolCmd) *UniversalClient_Move_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectEncoding provides a mock function with given fields: ctx, key
func (_m *UniversalClient) ObjectEncoding(ctx context.Context, key string) *redis.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_ObjectEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectEncoding'
type UniversalClient_ObjectEncoding_Call struct {
	*mock.Call
}

// ObjectEncoding is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) ObjectEncoding(ctx interface{}, key interface{}) *UniversalClient_ObjectEncoding_Call {
	return &UniversalClient_ObjectEncoding_Call{Call: _e.mock.On("ObjectEncoding", ctx, key)}
}

func (_c *UniversalClient_ObjectEncoding_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_ObjectEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ObjectEncoding_Call) Return(_a0 *redis.StringCmd) *UniversalClient_ObjectEncoding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ObjectEncoding_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_ObjectEncoding_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectIdleTime provides a mock function with given fields: ctx, key
func (_m *UniversalClient) ObjectIdleTime(ctx context.Context, key string) *redis.DurationCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.DurationCmd)
		}
	}

	return r0
}

// UniversalClient_ObjectIdleTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectIdleTime'
type UniversalClient_ObjectIdleTime_Call struct {
	*mock.Call
}

// ObjectIdleTime is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) ObjectIdleTime(ctx interface{}, key interface{}) *UniversalClient_ObjectIdleTime_Call {
	return &UniversalClient_ObjectIdleTime_Call{Call: _e.mock.On("ObjectIdleTime", ctx, key)}
}

func (_c *UniversalClient_ObjectIdleTime_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_ObjectIdleTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ObjectIdleTime_Call) Return(_a0 *redis.DurationCmd) *UniversalClient_ObjectIdleTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ObjectIdleTime_Call) RunAndReturn(run func(context.Context, string) *redis.DurationCmd) *UniversalClient_ObjectIdleTime_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectRefCount provides a mock function with given fields: ctx, key
func (_m *UniversalClient) ObjectRefCount(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ObjectRefCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectRefCount'
type UniversalClient_ObjectRefCount_Call struct {
	*mock.Call
}

// ObjectRefCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) ObjectRefCount(ctx interface{}, key interface{}) *UniversalClient_ObjectRefCount_Call {
	return &UniversalClient_ObjectRefCount_Call{Call: _e.mock.On("ObjectRefCount", ctx, key)}
}

func (_c *UniversalClient_ObjectRefCount_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_ObjectRefCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ObjectRefCount_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ObjectRefCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ObjectRefCount_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_ObjectRefCount_Call {
	_c.Call.Return(run)
	return _c
}

// PExpire provides a mock function with given fields: ctx, key, expiration
func (_m *UniversalClient) PExpire(ctx context.Context, key string, expiration time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_PExpire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PExpire'
type UniversalClient_PExpire_Call struct {
	*mock.Call
}

// PExpire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) PExpire(ctx interface{}, key interface{}, expiration interface{}) *UniversalClient_PExpire_Call {
	return &UniversalClient_PExpire_Call{Call: _e.mock.On("PExpire", ctx, key, expiration)}
}

func (_c *UniversalClient_PExpire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *UniversalClient_PExpire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_PExpire_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_PExpire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PExpire_Call) RunAndReturn(run func(context.Context, string, time.Duration) *redis.BoolCmd) *UniversalClient_PExpire_Call {
	_c.Call.Return(run)
	return _c
}

// PExpireAt provides a mock function with given fields: ctx, key, tm
func (_m *UniversalClient) PExpireAt(ctx context.Context, key string, tm time.Time) *redis.BoolCmd {
	ret := _m.Called(ctx, key, tm)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, tm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_PExpireAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PExpireAt'
type UniversalClient_PExpireAt_Call struct {
	*mock.Call
}

// PExpireAt is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - tm time.Time
func (_e *UniversalClient_Expecter) PExpireAt(ctx interface{}, key interface{}, tm interface{}) *UniversalClient_PExpireAt_Call {
	return &UniversalClient_PExpireAt_Call{Call: _e.mock.On("PExpireAt", ctx, key, tm)}
}

func (_c *UniversalClient_PExpireAt_Call) Run(run func(ctx context.Context, key string, tm time.Time)) *UniversalClient_PExpireAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *UniversalClient_PExpireAt_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_PExpireAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PExpireAt_Call) RunAndReturn(run func(context.Context, string, time.Time) *redis.BoolCmd) *UniversalClient_PExpireAt_Call {
	_c.Call.Return(run)
	return _c
}

// PExpireTime provides a mock function with given fields: ctx, key
func (_m *UniversalClient) PExpireTime(ctx context.Context, key string) *redis.DurationCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.DurationCmd)
		}
	}

	return r0
}

// UniversalClient_PExpireTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PExpireTime'
type UniversalClient_PExpireTime_Call struct {
	*mock.Call
}

// PExpireTime is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) PExpireTime(ctx interface{}, key interface{}) *UniversalClient_PExpireTime_Call {
	return &UniversalClient_PExpireTime_Call{Call: _e.mock.On("PExpireTime", ctx, key)}
}

func (_c *UniversalClient_PExpireTime_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_PExpireTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_PExpireTime_Call) Return(_a0 *redis.DurationCmd) *UniversalClient_PExpireTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PExpireTime_Call) RunAndReturn(run func(context.Context, string) *redis.DurationCmd) *UniversalClient_PExpireTime_Call {
	_c.Call.Return(run)
	return _c
}

// PFAdd provides a mock function with given fields: ctx, key, els
func (_m *UniversalClient) PFAdd(ctx context.Context, key string, els ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, els...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, els...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_PFAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PFAdd'
type UniversalClient_PFAdd_Call struct {
	*mock.Call
}

// PFAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - els ...interface{}
func (_e *UniversalClient_Expecter) PFAdd(ctx interface{}, key interface{}, els ...interface{}) *UniversalClient_PFAdd_Call {
	return &UniversalClient_PFAdd_Call{Call: _e.mock.On("PFAdd",
		append([]interface{}{ctx, key}, els...)...)}
}

func (_c *UniversalClient_PFAdd_Call) Run(run func(ctx context.Context, key string, els ...interface{})) *UniversalClient_PFAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_PFAdd_Call) Return(_a0 *redis.IntCmd) *UniversalClient_PFAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PFAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *UniversalClient_PFAdd_Call {
	_c.Call.Return(run)
	return _c
}

// PFCount provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) PFCount(ctx context.Context, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_PFCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PFCount'
type UniversalClient_PFCount_Call struct {
	*mock.Call
}

// PFCount is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) PFCount(ctx interface{}, keys ...interface{}) *UniversalClient_PFCount_Call {
	return &UniversalClient_PFCount_Call{Call: _e.mock.On("PFCount",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_PFCount_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_PFCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_PFCount_Call) Return(_a0 *redis.IntCmd) *UniversalClient_PFCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PFCount_Call) RunAndReturn(run func(context.Context, ...string) *redis.IntCmd) *UniversalClient_PFCount_Call {
	_c.Call.Return(run)
	return _c
}

// PFMerge provides a mock function with given fields: ctx, dest, keys
func (_m *UniversalClient) PFMerge(ctx context.Context, dest string, keys ...string) *redis.StatusCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.StatusCmd); ok {
		r0 = rf(ctx, dest, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_PFMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PFMerge'
type UniversalClient_PFMerge_Call struct {
	*mock.Call
}

// PFMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - dest string
//   - keys ...string
func (_e *UniversalClient_Expecter) PFMerge(ctx interface{}, dest interface{}, keys ...interface{}) *UniversalClient_PFMerge_Call {
	return &UniversalClient_PFMerge_Call{Call: _e.mock.On("PFMerge",
		append([]interface{}{ctx, dest}, keys...)...)}
}

func (_c *UniversalClient_PFMerge_Call) Run(run func(ctx context.Context, dest string, keys ...string)) *UniversalClient_PFMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_PFMerge_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_PFMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PFMerge_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.StatusCmd) *UniversalClient_PFMerge_Call {
	_c.Call.Return(run)
	return _c
}

// PSubscribe provides a mock function with given fields: ctx, channels
func (_m *UniversalClient) PSubscribe(ctx context.Context, channels ...string) *redis.PubSub {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.PubSub
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.PubSub); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.PubSub)
		}
	}

	return r0
}

// UniversalClient_PSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PSubscribe'
type UniversalClient_PSubscribe_Call struct {
	*mock.Call
}

// PSubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *UniversalClient_Expecter) PSubscribe(ctx interface{}, channels ...interface{}) *UniversalClient_PSubscribe_Call {
	return &UniversalClient_PSubscribe_Call{Call: _e.mock.On("PSubscribe",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *UniversalClient_PSubscribe_Call) Run(run func(ctx context.Context, channels ...string)) *UniversalClient_PSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_PSubscribe_Call) Return(_a0 *redis.PubSub) *UniversalClient_PSubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PSubscribe_Call) RunAndReturn(run func(context.Context, ...string) *redis.PubSub) *UniversalClient_PSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// PTTL provides a mock function with given fields: ctx, key
func (_m *UniversalClient) PTTL(ctx context.Context, key string) *redis.DurationCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.DurationCmd)
		}
	}

	return r0
}

// UniversalClient_PTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PTTL'
type UniversalClient_PTTL_Call struct {
	*mock.Call
}

// PTTL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) PTTL(ctx interface{}, key interface{}) *UniversalClient_PTTL_Call {
	return &UniversalClient_PTTL_Call{Call: _e.mock.On("PTTL", ctx, key)}
}

func (_c *UniversalClient_PTTL_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_PTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_PTTL_Call) Return(_a0 *redis.DurationCmd) *UniversalClient_PTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PTTL_Call) RunAndReturn(run func(context.Context, string) *redis.DurationCmd) *UniversalClient_PTTL_Call {
	_c.Call.Return(run)
	return _c
}

// Persist provides a mock function with given fields: ctx, key
func (_m *UniversalClient) Persist(ctx context.Context, key string) *redis.BoolCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.BoolCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
type UniversalClient_Persist_Call struct {
	*mock.Call
}

// Persist is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) Persist(ctx interface{}, key interface{}) *UniversalClient_Persist_Call {
	return &UniversalClient_Persist_Call{Call: _e.mock.On("Persist", ctx, key)}
}

func (_c *UniversalClient_Persist_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_Persist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_Persist_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_Persist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Persist_Call) RunAndReturn(run func(context.Context, string) *redis.BoolCmd) *UniversalClient_Persist_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *UniversalClient) Ping(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type UniversalClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) Ping(ctx interface{}) *UniversalClient_Ping_Call {
	return &UniversalClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *UniversalClient_Ping_Call) Run(run func(ctx context.Context)) *UniversalClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_Ping_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Ping_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Pipeline provides a mock function with given fields:
func (_m *UniversalClient) Pipeline() redis.Pipeliner {
	ret := _m.Called()

	var r0 redis.Pipeliner
	if rf, ok := ret.Get(0).(func() redis.Pipeliner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.Pipeliner)
		}
	}

	return r0
}

// UniversalClient_Pipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pipeline'
type UniversalClient_Pipeline_Call struct {
	*mock.Call
}

// Pipeline is a helper method to define mock.On call
func (_e *UniversalClient_Expecter) Pipeline() *UniversalClient_Pipeline_Call {
	return &UniversalClient_Pipeline_Call{Call: _e.mock.On("Pipeline")}
}

func (_c *UniversalClient_Pipeline_Call) Run(run func()) *UniversalClient_Pipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UniversalClient_Pipeline_Call) Return(_a0 redis.Pipeliner) *UniversalClient_Pipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Pipeline_Call) RunAndReturn(run func() redis.Pipeliner) *UniversalClient_Pipeline_Call {
	_c.Call.Return(run)
	return _c
}

// Pipelined provides a mock function with given fields: ctx, fn
func (_m *UniversalClient) Pipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	ret := _m.Called(ctx, fn)

	var r0 []redis.Cmder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)); ok {
		return rf(ctx, fn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(redis.Pipeliner) error) []redis.Cmder); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redis.Cmder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(redis.Pipeliner) error) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UniversalClient_Pipelined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pipelined'
type UniversalClient_Pipelined_Call struct {
	*mock.Call
}

// Pipelined is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(redis.Pipeliner) error
func (_e *UniversalClient_Expecter) Pipelined(ctx interface{}, fn interface{}) *UniversalClient_Pipelined_Call {
	return &UniversalClient_Pipelined_Call{Call: _e.mock.On("Pipelined", ctx, fn)}
}

func (_c *UniversalClient_Pipelined_Call) Run(run func(ctx context.Context, fn func(redis.Pipeliner) error)) *UniversalClient_Pipelined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(redis.Pipeliner) error))
	})
	return _c
}

func (_c *UniversalClient_Pipelined_Call) Return(_a0 []redis.Cmder, _a1 error) *UniversalClient_Pipelined_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UniversalClient_Pipelined_Call) RunAndReturn(run func(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)) *UniversalClient_Pipelined_Call {
	_c.Call.Return(run)
	return _c
}

// PoolStats provides a mock function with given fields:
func (_m *UniversalClient) PoolStats() *redis.PoolStats {
	ret := _m.Called()

	var r0 *redis.PoolStats
	if rf, ok := ret.Get(0).(func() *redis.PoolStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.PoolStats)
		}
	}

	return r0
}

// UniversalClient_PoolStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PoolStats'
type UniversalClient_PoolStats_Call struct {
	*mock.Call
}

// PoolStats is a helper method to define mock.On call
func (_e *UniversalClient_Expecter) PoolStats() *UniversalClient_PoolStats_Call {
	return &UniversalClient_PoolStats_Call{Call: _e.mock.On("PoolStats")}
}

func (_c *UniversalClient_PoolStats_Call) Run(run func()) *UniversalClient_PoolStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UniversalClient_PoolStats_Call) Return(_a0 *redis.PoolStats) *UniversalClient_PoolStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PoolStats_Call) RunAndReturn(run func() *redis.PoolStats) *UniversalClient_PoolStats_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: ctx, cmd
func (_m *UniversalClient) Process(ctx context.Context, cmd redis.Cmder) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, redis.Cmder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UniversalClient_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type UniversalClient_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd redis.Cmder
func (_e *UniversalClient_Expecter) Process(ctx interface{}, cmd interface{}) *UniversalClient_Process_Call {
	return &UniversalClient_Process_Call{Call: _e.mock.On("Process", ctx, cmd)}
}

func (_c *UniversalClient_Process_Call) Run(run func(ctx context.Context, cmd redis.Cmder)) *UniversalClient_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(redis.Cmder))
	})
	return _c
}

func (_c *UniversalClient_Process_Call) Return(_a0 error) *UniversalClient_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Process_Call) RunAndReturn(run func(context.Context, redis.Cmder) error) *UniversalClient_Process_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubChannels provides a mock function with given fields: ctx, pattern
func (_m *UniversalClient) PubSubChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	ret := _m.Called(ctx, pattern)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_PubSubChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubChannels'
type UniversalClient_PubSubChannels_Call struct {
	*mock.Call
}

// PubSubChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - pattern string
func (_e *UniversalClient_Expecter) PubSubChannels(ctx interface{}, pattern interface{}) *UniversalClient_PubSubChannels_Call {
	return &UniversalClient_PubSubChannels_Call{Call: _e.mock.On("PubSubChannels", ctx, pattern)}
}

func (_c *UniversalClient_PubSubChannels_Call) Run(run func(ctx context.Context, pattern string)) *UniversalClient_PubSubChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_PubSubChannels_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_PubSubChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PubSubChannels_Call) RunAndReturn(run func(context.Context, string) *redis.StringSliceCmd) *UniversalClient_PubSubChannels_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubNumPat provides a mock function with given fields: ctx
func (_m *UniversalClient) PubSubNumPat(ctx context.Context) *redis.IntCmd {
	ret := _m.Called(ctx)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_PubSubNumPat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubNumPat'
type UniversalClient_PubSubNumPat_Call struct {
	*mock.Call
}

// PubSubNumPat is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) PubSubNumPat(ctx interface{}) *UniversalClient_PubSubNumPat_Call {
	return &UniversalClient_PubSubNumPat_Call{Call: _e.mock.On("PubSubNumPat", ctx)}
}

func (_c *UniversalClient_PubSubNumPat_Call) Run(run func(ctx context.Context)) *UniversalClient_PubSubNumPat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_PubSubNumPat_Call) Return(_a0 *redis.IntCmd) *UniversalClient_PubSubNumPat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PubSubNumPat_Call) RunAndReturn(run func(context.Context) *redis.IntCmd) *UniversalClient_PubSubNumPat_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubNumSub provides a mock function with given fields: ctx, channels
func (_m *UniversalClient) PubSubNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.MapStringIntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.MapStringIntCmd); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.MapStringIntCmd)
		}
	}

	return r0
}

// UniversalClient_PubSubNumSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubNumSub'
type UniversalClient_PubSubNumSub_Call struct {
	*mock.Call
}

// PubSubNumSub is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *UniversalClient_Expecter) PubSubNumSub(ctx interface{}, channels ...interface{}) *UniversalClient_PubSubNumSub_Call {
	return &UniversalClient_PubSubNumSub_Call{Call: _e.mock.On("PubSubNumSub",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *UniversalClient_PubSubNumSub_Call) Run(run func(ctx context.Context, channels ...string)) *UniversalClient_PubSubNumSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_PubSubNumSub_Call) Return(_a0 *redis.MapStringIntCmd) *UniversalClient_PubSubNumSub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PubSubNumSub_Call) RunAndReturn(run func(context.Context, ...string) *redis.MapStringIntCmd) *UniversalClient_PubSubNumSub_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubShardChannels provides a mock function with given fields: ctx, pattern
func (_m *UniversalClient) PubSubShardChannels(ctx context.Context, pattern string) *redis.StringSliceCmd {
	ret := _m.Called(ctx, pattern)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_PubSubShardChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubShardChannels'
type UniversalClient_PubSubShardChannels_Call struct {
	*mock.Call
}

// PubSubShardChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - pattern string
func (_e *UniversalClient_Expecter) PubSubShardChannels(ctx interface{}, pattern interface{}) *UniversalClient_PubSubShardChannels_Call {
	return &UniversalClient_PubSubShardChannels_Call{Call: _e.mock.On("PubSubShardChannels", ctx, pattern)}
}

func (_c *UniversalClient_PubSubShardChannels_Call) Run(run func(ctx context.Context, pattern string)) *UniversalClient_PubSubShardChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_PubSubShardChannels_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_PubSubShardChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PubSubShardChannels_Call) RunAndReturn(run func(context.Context, string) *redis.StringSliceCmd) *UniversalClient_PubSubShardChannels_Call {
	_c.Call.Return(run)
	return _c
}

// PubSubShardNumSub provides a mock function with given fields: ctx, channels
func (_m *UniversalClient) PubSubShardNumSub(ctx context.Context, channels ...string) *redis.MapStringIntCmd {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.MapStringIntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.MapStringIntCmd); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.MapStringIntCmd)
		}
	}

	return r0
}

// UniversalClient_PubSubShardNumSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubSubShardNumSub'
type UniversalClient_PubSubShardNumSub_Call struct {
	*mock.Call
}

// PubSubShardNumSub is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *UniversalClient_Expecter) PubSubShardNumSub(ctx interface{}, channels ...interface{}) *UniversalClient_PubSubShardNumSub_Call {
	return &UniversalClient_PubSubShardNumSub_Call{Call: _e.mock.On("PubSubShardNumSub",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *UniversalClient_PubSubShardNumSub_Call) Run(run func(ctx context.Context, channels ...string)) *UniversalClient_PubSubShardNumSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_PubSubShardNumSub_Call) Return(_a0 *redis.MapStringIntCmd) *UniversalClient_PubSubShardNumSub_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_PubSubShardNumSub_Call) RunAndReturn(run func(context.Context, ...string) *redis.MapStringIntCmd) *UniversalClient_PubSubShardNumSub_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, channel, message
func (_m *UniversalClient) Publish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	ret := _m.Called(ctx, channel, message)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, channel, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type UniversalClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - channel string
//   - message interface{}
func (_e *UniversalClient_Expecter) Publish(ctx interface{}, channel interface{}, message interface{}) *UniversalClient_Publish_Call {
	return &UniversalClient_Publish_Call{Call: _e.mock.On("Publish", ctx, channel, message)}
}

func (_c *UniversalClient_Publish_Call) Run(run func(ctx context.Context, channel string, message interface{})) *UniversalClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_Publish_Call) Return(_a0 *redis.IntCmd) *UniversalClient_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Publish_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.IntCmd) *UniversalClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Quit provides a mock function with given fields: ctx
func (_m *UniversalClient) Quit(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_Quit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Quit'
type UniversalClient_Quit_Call struct {
	*mock.Call
}

// Quit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) Quit(ctx interface{}) *UniversalClient_Quit_Call {
	return &UniversalClient_Quit_Call{Call: _e.mock.On("Quit", ctx)}
}

func (_c *UniversalClient_Quit_Call) Run(run func(ctx context.Context)) *UniversalClient_Quit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_Quit_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_Quit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Quit_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_Quit_Call {
	_c.Call.Return(run)
	return _c
}

// RPop provides a mock function with given fields: ctx, key
func (_m *UniversalClient) RPop(ctx context.Context, key string) *redis.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_RPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPop'
type UniversalClient_RPop_Call struct {
	*mock.Call
}

// RPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) RPop(ctx interface{}, key interface{}) *UniversalClient_RPop_Call {
	return &UniversalClient_RPop_Call{Call: _e.mock.On("RPop", ctx, key)}
}

func (_c *UniversalClient_RPop_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_RPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_RPop_Call) Return(_a0 *redis.StringCmd) *UniversalClient_RPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_RPop_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_RPop_Call {
	_c.Call.Return(run)
	return _c
}

// RPopCount provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) RPopCount(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_RPopCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPopCount'
type UniversalClient_RPopCount_Call struct {
	*mock.Call
}

// RPopCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *UniversalClient_Expecter) RPopCount(ctx interface{}, key interface{}, count interface{}) *UniversalClient_RPopCount_Call {
	return &UniversalClient_RPopCount_Call{Call: _e.mock.On("RPopCount", ctx, key, count)}
}

func (_c *UniversalClient_RPopCount_Call) Run(run func(ctx context.Context, key string, count int)) *UniversalClient_RPopCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_RPopCount_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_RPopCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_RPopCount_Call) RunAndReturn(run func(context.Context, string, int) *redis.StringSliceCmd) *UniversalClient_RPopCount_Call {
	_c.Call.Return(run)
	return _c
}

// RPopLPush provides a mock function with given fields: ctx, source, destination
func (_m *UniversalClient) RPopLPush(ctx context.Context, source string, destination string) *redis.StringCmd {
	ret := _m.Called(ctx, source, destination)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.StringCmd); ok {
		r0 = rf(ctx, source, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_RPopLPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPopLPush'
type UniversalClient_RPopLPush_Call struct {
	*mock.Call
}

// RPopLPush is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
func (_e *UniversalClient_Expecter) RPopLPush(ctx interface{}, source interface{}, destination interface{}) *UniversalClient_RPopLPush_Call {
	return &UniversalClient_RPopLPush_Call{Call: _e.mock.On("RPopLPush", ctx, source, destination)}
}

func (_c *UniversalClient_RPopLPush_Call) Run(run func(ctx context.Context, source string, destination string)) *UniversalClient_RPopLPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_RPopLPush_Call) Return(_a0 *redis.StringCmd) *UniversalClient_RPopLPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_RPopLPush_Call) RunAndReturn(run func(context.Context, string, string) *redis.StringCmd) *UniversalClient_RPopLPush_Call {
	_c.Call.Return(run)
	return _c
}

// RPush provides a mock function with given fields: ctx, key, values
func (_m *UniversalClient) RPush(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_RPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPush'
type UniversalClient_RPush_Call struct {
	*mock.Call
}

// RPush is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *UniversalClient_Expecter) RPush(ctx interface{}, key interface{}, values ...interface{}) *UniversalClient_RPush_Call {
	return &UniversalClient_RPush_Call{Call: _e.mock.On("RPush",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *UniversalClient_RPush_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *UniversalClient_RPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_RPush_Call) Return(_a0 *redis.IntCmd) *UniversalClient_RPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_RPush_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *UniversalClient_RPush_Call {
	_c.Call.Return(run)
	return _c
}

// RPushX provides a mock function with given fields: ctx, key, values
func (_m *UniversalClient) RPushX(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_RPushX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPushX'
type UniversalClient_RPushX_Call struct {
	*mock.Call
}

// RPushX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...interface{}
func (_e *UniversalClient_Expecter) RPushX(ctx interface{}, key interface{}, values ...interface{}) *UniversalClient_RPushX_Call {
	return &UniversalClient_RPushX_Call{Call: _e.mock.On("RPushX",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *UniversalClient_RPushX_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *UniversalClient_RPushX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_RPushX_Call) Return(_a0 *redis.IntCmd) *UniversalClient_RPushX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_RPushX_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *UniversalClient_RPushX_Call {
	_c.Call.Return(run)
	return _c
}

// RandomKey provides a mock function with given fields: ctx
func (_m *UniversalClient) RandomKey(ctx context.Context) *redis.StringCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_RandomKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomKey'
type UniversalClient_RandomKey_Call struct {
	*mock.Call
}

// RandomKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) RandomKey(ctx interface{}) *UniversalClient_RandomKey_Call {
	return &UniversalClient_RandomKey_Call{Call: _e.mock.On("RandomKey", ctx)}
}

func (_c *UniversalClient_RandomKey_Call) Run(run func(ctx context.Context)) *UniversalClient_RandomKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_RandomKey_Call) Return(_a0 *redis.StringCmd) *UniversalClient_RandomKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_RandomKey_Call) RunAndReturn(run func(context.Context) *redis.StringCmd) *UniversalClient_RandomKey_Call {
	_c.Call.Return(run)
	return _c
}

// ReadOnly provides a mock function with given fields: ctx
func (_m *UniversalClient) ReadOnly(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ReadOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadOnly'
type UniversalClient_ReadOnly_Call struct {
	*mock.Call
}

// ReadOnly is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ReadOnly(ctx interface{}) *UniversalClient_ReadOnly_Call {
	return &UniversalClient_ReadOnly_Call{Call: _e.mock.On("ReadOnly", ctx)}
}

func (_c *UniversalClient_ReadOnly_Call) Run(run func(ctx context.Context)) *UniversalClient_ReadOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ReadOnly_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ReadOnly_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ReadOnly_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ReadOnly_Call {
	_c.Call.Return(run)
	return _c
}

// ReadWrite provides a mock function with given fields: ctx
func (_m *UniversalClient) ReadWrite(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ReadWrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadWrite'
type UniversalClient_ReadWrite_Call struct {
	*mock.Call
}

// ReadWrite is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ReadWrite(ctx interface{}) *UniversalClient_ReadWrite_Call {
	return &UniversalClient_ReadWrite_Call{Call: _e.mock.On("ReadWrite", ctx)}
}

func (_c *UniversalClient_ReadWrite_Call) Run(run func(ctx context.Context)) *UniversalClient_ReadWrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ReadWrite_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ReadWrite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ReadWrite_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ReadWrite_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function with given fields: ctx, key, newkey
func (_m *UniversalClient) Rename(ctx context.Context, key string, newkey string) *redis.StatusCmd {
	ret := _m.Called(ctx, key, newkey)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, newkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type UniversalClient_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - newkey string
func (_e *UniversalClient_Expecter) Rename(ctx interface{}, key interface{}, newkey interface{}) *UniversalClient_Rename_Call {
	return &UniversalClient_Rename_Call{Call: _e.mock.On("Rename", ctx, key, newkey)}
}

func (_c *UniversalClient_Rename_Call) Run(run func(ctx context.Context, key string, newkey string)) *UniversalClient_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_Rename_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_Rename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Rename_Call) RunAndReturn(run func(context.Context, string, string) *redis.StatusCmd) *UniversalClient_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// RenameNX provides a mock function with given fields: ctx, key, newkey
func (_m *UniversalClient) RenameNX(ctx context.Context, key string, newkey string) *redis.BoolCmd {
	ret := _m.Called(ctx, key, newkey)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, newkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_RenameNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameNX'
type UniversalClient_RenameNX_Call struct {
	*mock.Call
}

// RenameNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - newkey string
func (_e *UniversalClient_Expecter) RenameNX(ctx interface{}, key interface{}, newkey interface{}) *UniversalClient_RenameNX_Call {
	return &UniversalClient_RenameNX_Call{Call: _e.mock.On("RenameNX", ctx, key, newkey)}
}

func (_c *UniversalClient_RenameNX_Call) Run(run func(ctx context.Context, key string, newkey string)) *UniversalClient_RenameNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_RenameNX_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_RenameNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_RenameNX_Call) RunAndReturn(run func(context.Context, string, string) *redis.BoolCmd) *UniversalClient_RenameNX_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function with given fields: ctx, key, ttl, value
func (_m *UniversalClient) Restore(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	ret := _m.Called(ctx, key, ttl, value)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, ttl, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type UniversalClient_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ttl time.Duration
//   - value string
func (_e *UniversalClient_Expecter) Restore(ctx interface{}, key interface{}, ttl interface{}, value interface{}) *UniversalClient_Restore_Call {
	return &UniversalClient_Restore_Call{Call: _e.mock.On("Restore", ctx, key, ttl, value)}
}

func (_c *UniversalClient_Restore_Call) Run(run func(ctx context.Context, key string, ttl time.Duration, value string)) *UniversalClient_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_Restore_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_Restore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Restore_Call) RunAndReturn(run func(context.Context, string, time.Duration, string) *redis.StatusCmd) *UniversalClient_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreReplace provides a mock function with given fields: ctx, key, ttl, value
func (_m *UniversalClient) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *redis.StatusCmd {
	ret := _m.Called(ctx, key, ttl, value)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, ttl, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_RestoreReplace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreReplace'
type UniversalClient_RestoreReplace_Call struct {
	*mock.Call
}

// RestoreReplace is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ttl time.Duration
//   - value string
func (_e *UniversalClient_Expecter) RestoreReplace(ctx interface{}, key interface{}, ttl interface{}, value interface{}) *UniversalClient_RestoreReplace_Call {
	return &UniversalClient_RestoreReplace_Call{Call: _e.mock.On("RestoreReplace", ctx, key, ttl, value)}
}

func (_c *UniversalClient_RestoreReplace_Call) Run(run func(ctx context.Context, key string, ttl time.Duration, value string)) *UniversalClient_RestoreReplace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_RestoreReplace_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_RestoreReplace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_RestoreReplace_Call) RunAndReturn(run func(context.Context, string, time.Duration, string) *redis.StatusCmd) *UniversalClient_RestoreReplace_Call {
	_c.Call.Return(run)
	return _c
}

// SAdd provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) SAdd(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SAdd'
type UniversalClient_SAdd_Call struct {
	*mock.Call
}

// SAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *UniversalClient_Expecter) SAdd(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_SAdd_Call {
	return &UniversalClient_SAdd_Call{Call: _e.mock.On("SAdd",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_SAdd_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *UniversalClient_SAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SAdd_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *UniversalClient_SAdd_Call {
	_c.Call.Return(run)
	return _c
}

// SCard provides a mock function with given fields: ctx, key
func (_m *UniversalClient) SCard(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SCard'
type UniversalClient_SCard_Call struct {
	*mock.Call
}

// SCard is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) SCard(ctx interface{}, key interface{}) *UniversalClient_SCard_Call {
	return &UniversalClient_SCard_Call{Call: _e.mock.On("SCard", ctx, key)}
}

func (_c *UniversalClient_SCard_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_SCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_SCard_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SCard_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_SCard_Call {
	_c.Call.Return(run)
	return _c
}

// SDiff provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) SDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_SDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SDiff'
type UniversalClient_SDiff_Call struct {
	*mock.Call
}

// SDiff is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) SDiff(ctx interface{}, keys ...interface{}) *UniversalClient_SDiff_Call {
	return &UniversalClient_SDiff_Call{Call: _e.mock.On("SDiff",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_SDiff_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_SDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SDiff_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_SDiff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SDiff_Call) RunAndReturn(run func(context.Context, ...string) *redis.StringSliceCmd) *UniversalClient_SDiff_Call {
	_c.Call.Return(run)
	return _c
}

// SDiffStore provides a mock function with given fields: ctx, destination, keys
func (_m *UniversalClient) SDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SDiffStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SDiffStore'
type UniversalClient_SDiffStore_Call struct {
	*mock.Call
}

// SDiffStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - keys ...string
func (_e *UniversalClient_Expecter) SDiffStore(ctx interface{}, destination interface{}, keys ...interface{}) *UniversalClient_SDiffStore_Call {
	return &UniversalClient_SDiffStore_Call{Call: _e.mock.On("SDiffStore",
		append([]interface{}{ctx, destination}, keys...)...)}
}

func (_c *UniversalClient_SDiffStore_Call) Run(run func(ctx context.Context, destination string, keys ...string)) *UniversalClient_SDiffStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SDiffStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SDiffStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SDiffStore_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.IntCmd) *UniversalClient_SDiffStore_Call {
	_c.Call.Return(run)
	return _c
}

// SInter provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) SInter(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_SInter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SInter'
type UniversalClient_SInter_Call struct {
	*mock.Call
}

// SInter is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) SInter(ctx interface{}, keys ...interface{}) *UniversalClient_SInter_Call {
	return &UniversalClient_SInter_Call{Call: _e.mock.On("SInter",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_SInter_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_SInter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SInter_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_SInter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SInter_Call) RunAndReturn(run func(context.Context, ...string) *redis.StringSliceCmd) *UniversalClient_SInter_Call {
	_c.Call.Return(run)
	return _c
}

// SInterCard provides a mock function with given fields: ctx, limit, keys
func (_m *UniversalClient) SInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, limit, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SInterCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SInterCard'
type UniversalClient_SInterCard_Call struct {
	*mock.Call
}

// SInterCard is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - keys ...string
func (_e *UniversalClient_Expecter) SInterCard(ctx interface{}, limit interface{}, keys ...interface{}) *UniversalClient_SInterCard_Call {
	return &UniversalClient_SInterCard_Call{Call: _e.mock.On("SInterCard",
		append([]interface{}{ctx, limit}, keys...)...)}
}

func (_c *UniversalClient_SInterCard_Call) Run(run func(ctx context.Context, limit int64, keys ...string)) *UniversalClient_SInterCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SInterCard_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SInterCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SInterCard_Call) RunAndReturn(run func(context.Context, int64, ...string) *redis.IntCmd) *UniversalClient_SInterCard_Call {
	_c.Call.Return(run)
	return _c
}

// SInterStore provides a mock function with given fields: ctx, destination, keys
func (_m *UniversalClient) SInterStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SInterStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SInterStore'
type UniversalClient_SInterStore_Call struct {
	*mock.Call
}

// SInterStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - keys ...string
func (_e *UniversalClient_Expecter) SInterStore(ctx interface{}, destination interface{}, keys ...interface{}) *UniversalClient_SInterStore_Call {
	return &UniversalClient_SInterStore_Call{Call: _e.mock.On("SInterStore",
		append([]interface{}{ctx, destination}, keys...)...)}
}

func (_c *UniversalClient_SInterStore_Call) Run(run func(ctx context.Context, destination string, keys ...string)) *UniversalClient_SInterStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SInterStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SInterStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SInterStore_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.IntCmd) *UniversalClient_SInterStore_Call {
	_c.Call.Return(run)
	return _c
}

// SIsMember provides a mock function with given fields: ctx, key, member
func (_m *UniversalClient) SIsMember(ctx context.Context, key string, member interface{}) *redis.BoolCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_SIsMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SIsMember'
type UniversalClient_SIsMember_Call struct {
	*mock.Call
}

// SIsMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member interface{}
func (_e *UniversalClient_Expecter) SIsMember(ctx interface{}, key interface{}, member interface{}) *UniversalClient_SIsMember_Call {
	return &UniversalClient_SIsMember_Call{Call: _e.mock.On("SIsMember", ctx, key, member)}
}

func (_c *UniversalClient_SIsMember_Call) Run(run func(ctx context.Context, key string, member interface{})) *UniversalClient_SIsMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_SIsMember_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_SIsMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SIsMember_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.BoolCmd) *UniversalClient_SIsMember_Call {
	_c.Call.Return(run)
	return _c
}

// SMIsMember provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) SMIsMember(ctx context.Context, key string, members ...interface{}) *redis.BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.BoolSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolSliceCmd)
		}
	}

	return r0
}

// UniversalClient_SMIsMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMIsMember'
type UniversalClient_SMIsMember_Call struct {
	*mock.Call
}

// SMIsMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *UniversalClient_Expecter) SMIsMember(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_SMIsMember_Call {
	return &UniversalClient_SMIsMember_Call{Call: _e.mock.On("SMIsMember",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_SMIsMember_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *UniversalClient_SMIsMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SMIsMember_Call) Return(_a0 *redis.BoolSliceCmd) *UniversalClient_SMIsMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SMIsMember_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.BoolSliceCmd) *UniversalClient_SMIsMember_Call {
	_c.Call.Return(run)
	return _c
}

// SMembers provides a mock function with given fields: ctx, key
func (_m *UniversalClient) SMembers(ctx context.Context, key string) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_SMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMembers'
type UniversalClient_SMembers_Call struct {
	*mock.Call
}

// SMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) SMembers(ctx interface{}, key interface{}) *UniversalClient_SMembers_Call {
	return &UniversalClient_SMembers_Call{Call: _e.mock.On("SMembers", ctx, key)}
}

func (_c *UniversalClient_SMembers_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_SMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_SMembers_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_SMembers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SMembers_Call) RunAndReturn(run func(context.Context, string) *redis.StringSliceCmd) *UniversalClient_SMembers_Call {
	_c.Call.Return(run)
	return _c
}

// SMembersMap provides a mock function with given fields: ctx, key
func (_m *UniversalClient) SMembersMap(ctx context.Context, key string) *redis.StringStructMapCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringStructMapCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringStructMapCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringStructMapCmd)
		}
	}

	return r0
}

// UniversalClient_SMembersMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMembersMap'
type UniversalClient_SMembersMap_Call struct {
	*mock.Call
}

// SMembersMap is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) SMembersMap(ctx interface{}, key interface{}) *UniversalClient_SMembersMap_Call {
	return &UniversalClient_SMembersMap_Call{Call: _e.mock.On("SMembersMap", ctx, key)}
}

func (_c *UniversalClient_SMembersMap_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_SMembersMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_SMembersMap_Call) Return(_a0 *redis.StringStructMapCmd) *UniversalClient_SMembersMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SMembersMap_Call) RunAndReturn(run func(context.Context, string) *redis.StringStructMapCmd) *UniversalClient_SMembersMap_Call {
	_c.Call.Return(run)
	return _c
}

// SMove provides a mock function with given fields: ctx, source, destination, member
func (_m *UniversalClient) SMove(ctx context.Context, source string, destination string, member interface{}) *redis.BoolCmd {
	ret := _m.Called(ctx, source, destination, member)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *redis.BoolCmd); ok {
		r0 = rf(ctx, source, destination, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_SMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMove'
type UniversalClient_SMove_Call struct {
	*mock.Call
}

// SMove is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - destination string
//   - member interface{}
func (_e *UniversalClient_Expecter) SMove(ctx interface{}, source interface{}, destination interface{}, member interface{}) *UniversalClient_SMove_Call {
	return &UniversalClient_SMove_Call{Call: _e.mock.On("SMove", ctx, source, destination, member)}
}

func (_c *UniversalClient_SMove_Call) Run(run func(ctx context.Context, source string, destination string, member interface{})) *UniversalClient_SMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_SMove_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_SMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SMove_Call) RunAndReturn(run func(context.Context, string, string, interface{}) *redis.BoolCmd) *UniversalClient_SMove_Call {
	_c.Call.Return(run)
	return _c
}

// SPop provides a mock function with given fields: ctx, key
func (_m *UniversalClient) SPop(ctx context.Context, key string) *redis.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_SPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SPop'
type UniversalClient_SPop_Call struct {
	*mock.Call
}

// SPop is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) SPop(ctx interface{}, key interface{}) *UniversalClient_SPop_Call {
	return &UniversalClient_SPop_Call{Call: _e.mock.On("SPop", ctx, key)}
}

func (_c *UniversalClient_SPop_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_SPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_SPop_Call) Return(_a0 *redis.StringCmd) *UniversalClient_SPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SPop_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_SPop_Call {
	_c.Call.Return(run)
	return _c
}

// SPopN provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) SPopN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_SPopN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SPopN'
type UniversalClient_SPopN_Call struct {
	*mock.Call
}

// SPopN is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int64
func (_e *UniversalClient_Expecter) SPopN(ctx interface{}, key interface{}, count interface{}) *UniversalClient_SPopN_Call {
	return &UniversalClient_SPopN_Call{Call: _e.mock.On("SPopN", ctx, key, count)}
}

func (_c *UniversalClient_SPopN_Call) Run(run func(ctx context.Context, key string, count int64)) *UniversalClient_SPopN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_SPopN_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_SPopN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SPopN_Call) RunAndReturn(run func(context.Context, string, int64) *redis.StringSliceCmd) *UniversalClient_SPopN_Call {
	_c.Call.Return(run)
	return _c
}

// SPublish provides a mock function with given fields: ctx, channel, message
func (_m *UniversalClient) SPublish(ctx context.Context, channel string, message interface{}) *redis.IntCmd {
	ret := _m.Called(ctx, channel, message)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, channel, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SPublish'
type UniversalClient_SPublish_Call struct {
	*mock.Call
}

// SPublish is a helper method to define mock.On call
//   - ctx context.Context
//   - channel string
//   - message interface{}
func (_e *UniversalClient_Expecter) SPublish(ctx interface{}, channel interface{}, message interface{}) *UniversalClient_SPublish_Call {
	return &UniversalClient_SPublish_Call{Call: _e.mock.On("SPublish", ctx, channel, message)}
}

func (_c *UniversalClient_SPublish_Call) Run(run func(ctx context.Context, channel string, message interface{})) *UniversalClient_SPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *UniversalClient_SPublish_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SPublish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SPublish_Call) RunAndReturn(run func(context.Context, string, interface{}) *redis.IntCmd) *UniversalClient_SPublish_Call {
	_c.Call.Return(run)
	return _c
}

// SRandMember provides a mock function with given fields: ctx, key
func (_m *UniversalClient) SRandMember(ctx context.Context, key string) *redis.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_SRandMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SRandMember'
type UniversalClient_SRandMember_Call struct {
	*mock.Call
}

// SRandMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) SRandMember(ctx interface{}, key interface{}) *UniversalClient_SRandMember_Call {
	return &UniversalClient_SRandMember_Call{Call: _e.mock.On("SRandMember", ctx, key)}
}

func (_c *UniversalClient_SRandMember_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_SRandMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_SRandMember_Call) Return(_a0 *redis.StringCmd) *UniversalClient_SRandMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SRandMember_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_SRandMember_Call {
	_c.Call.Return(run)
	return _c
}

// SRandMemberN provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) SRandMemberN(ctx context.Context, key string, count int64) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_SRandMemberN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SRandMemberN'
type UniversalClient_SRandMemberN_Call struct {
	*mock.Call
}

// SRandMemberN is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int64
func (_e *UniversalClient_Expecter) SRandMemberN(ctx interface{}, key interface{}, count interface{}) *UniversalClient_SRandMemberN_Call {
	return &UniversalClient_SRandMemberN_Call{Call: _e.mock.On("SRandMemberN", ctx, key, count)}
}

func (_c *UniversalClient_SRandMemberN_Call) Run(run func(ctx context.Context, key string, count int64)) *UniversalClient_SRandMemberN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_SRandMemberN_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_SRandMemberN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SRandMemberN_Call) RunAndReturn(run func(context.Context, string, int64) *redis.StringSliceCmd) *UniversalClient_SRandMemberN_Call {
	_c.Call.Return(run)
	return _c
}

// SRem provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) SRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SRem'
type UniversalClient_SRem_Call struct {
	*mock.Call
}

// SRem is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *UniversalClient_Expecter) SRem(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_SRem_Call {
	return &UniversalClient_SRem_Call{Call: _e.mock.On("SRem",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_SRem_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *UniversalClient_SRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SRem_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SRem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SRem_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *UniversalClient_SRem_Call {
	_c.Call.Return(run)
	return _c
}

// SScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *UniversalClient) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	var r0 *redis.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *redis.ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ScanCmd)
		}
	}

	return r0
}

// UniversalClient_SScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SScan'
type UniversalClient_SScan_Call struct {
	*mock.Call
}

// SScan is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - cursor uint64
//   - match string
//   - count int64
func (_e *UniversalClient_Expecter) SScan(ctx interface{}, key interface{}, cursor interface{}, match interface{}, count interface{}) *UniversalClient_SScan_Call {
	return &UniversalClient_SScan_Call{Call: _e.mock.On("SScan", ctx, key, cursor, match, count)}
}

func (_c *UniversalClient_SScan_Call) Run(run func(ctx context.Context, key string, cursor uint64, match string, count int64)) *UniversalClient_SScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *UniversalClient_SScan_Call) Return(_a0 *redis.ScanCmd) *UniversalClient_SScan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SScan_Call) RunAndReturn(run func(context.Context, string, uint64, string, int64) *redis.ScanCmd) *UniversalClient_SScan_Call {
	_c.Call.Return(run)
	return _c
}

// SSubscribe provides a mock function with given fields: ctx, channels
func (_m *UniversalClient) SSubscribe(ctx context.Context, channels ...string) *redis.PubSub {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.PubSub
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.PubSub); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.PubSub)
		}
	}

	return r0
}

// UniversalClient_SSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSubscribe'
type UniversalClient_SSubscribe_Call struct {
	*mock.Call
}

// SSubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *UniversalClient_Expecter) SSubscribe(ctx interface{}, channels ...interface{}) *UniversalClient_SSubscribe_Call {
	return &UniversalClient_SSubscribe_Call{Call: _e.mock.On("SSubscribe",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *UniversalClient_SSubscribe_Call) Run(run func(ctx context.Context, channels ...string)) *UniversalClient_SSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SSubscribe_Call) Return(_a0 *redis.PubSub) *UniversalClient_SSubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SSubscribe_Call) RunAndReturn(run func(context.Context, ...string) *redis.PubSub) *UniversalClient_SSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// SUnion provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) SUnion(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_SUnion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SUnion'
type UniversalClient_SUnion_Call struct {
	*mock.Call
}

// SUnion is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) SUnion(ctx interface{}, keys ...interface{}) *UniversalClient_SUnion_Call {
	return &UniversalClient_SUnion_Call{Call: _e.mock.On("SUnion",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_SUnion_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_SUnion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SUnion_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_SUnion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SUnion_Call) RunAndReturn(run func(context.Context, ...string) *redis.StringSliceCmd) *UniversalClient_SUnion_Call {
	_c.Call.Return(run)
	return _c
}

// SUnionStore provides a mock function with given fields: ctx, destination, keys
func (_m *UniversalClient) SUnionStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SUnionStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SUnionStore'
type UniversalClient_SUnionStore_Call struct {
	*mock.Call
}

// SUnionStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - keys ...string
func (_e *UniversalClient_Expecter) SUnionStore(ctx interface{}, destination interface{}, keys ...interface{}) *UniversalClient_SUnionStore_Call {
	return &UniversalClient_SUnionStore_Call{Call: _e.mock.On("SUnionStore",
		append([]interface{}{ctx, destination}, keys...)...)}
}

func (_c *UniversalClient_SUnionStore_Call) Run(run func(ctx context.Context, destination string, keys ...string)) *UniversalClient_SUnionStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_SUnionStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SUnionStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SUnionStore_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.IntCmd) *UniversalClient_SUnionStore_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx
func (_m *UniversalClient) Save(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type UniversalClient_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) Save(ctx interface{}) *UniversalClient_Save_Call {
	return &UniversalClient_Save_Call{Call: _e.mock.On("Save", ctx)}
}

func (_c *UniversalClient_Save_Call) Run(run func(ctx context.Context)) *UniversalClient_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_Save_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Save_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: ctx, cursor, match, count
func (_m *UniversalClient) Scan(ctx context.Context, cursor uint64, match string, count int64) *redis.ScanCmd {
	ret := _m.Called(ctx, cursor, match, count)

	var r0 *redis.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, int64) *redis.ScanCmd); ok {
		r0 = rf(ctx, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ScanCmd)
		}
	}

	return r0
}

// UniversalClient_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type UniversalClient_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor uint64
//   - match string
//   - count int64
func (_e *UniversalClient_Expecter) Scan(ctx interface{}, cursor interface{}, match interface{}, count interface{}) *UniversalClient_Scan_Call {
	return &UniversalClient_Scan_Call{Call: _e.mock.On("Scan", ctx, cursor, match, count)}
}

func (_c *UniversalClient_Scan_Call) Run(run func(ctx context.Context, cursor uint64, match string, count int64)) *UniversalClient_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_Scan_Call) Return(_a0 *redis.ScanCmd) *UniversalClient_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Scan_Call) RunAndReturn(run func(context.Context, uint64, string, int64) *redis.ScanCmd) *UniversalClient_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// ScanType provides a mock function with given fields: ctx, cursor, match, count, keyType
func (_m *UniversalClient) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *redis.ScanCmd {
	ret := _m.Called(ctx, cursor, match, count, keyType)

	var r0 *redis.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, int64, string) *redis.ScanCmd); ok {
		r0 = rf(ctx, cursor, match, count, keyType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ScanCmd)
		}
	}

	return r0
}

// UniversalClient_ScanType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanType'
type UniversalClient_ScanType_Call struct {
	*mock.Call
}

// ScanType is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor uint64
//   - match string
//   - count int64
//   - keyType string
func (_e *UniversalClient_Expecter) ScanType(ctx interface{}, cursor interface{}, match interface{}, count interface{}, keyType interface{}) *UniversalClient_ScanType_Call {
	return &UniversalClient_ScanType_Call{Call: _e.mock.On("ScanType", ctx, cursor, match, count, keyType)}
}

func (_c *UniversalClient_ScanType_Call) Run(run func(ctx context.Context, cursor uint64, match string, count int64, keyType string)) *UniversalClient_ScanType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string), args[3].(int64), args[4].(string))
	})
	return _c
}

func (_c *UniversalClient_ScanType_Call) Return(_a0 *redis.ScanCmd) *UniversalClient_ScanType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ScanType_Call) RunAndReturn(run func(context.Context, uint64, string, int64, string) *redis.ScanCmd) *UniversalClient_ScanType_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptExists provides a mock function with given fields: ctx, hashes
func (_m *UniversalClient) ScriptExists(ctx context.Context, hashes ...string) *redis.BoolSliceCmd {
	_va := make([]interface{}, len(hashes))
	for _i := range hashes {
		_va[_i] = hashes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.BoolSliceCmd); ok {
		r0 = rf(ctx, hashes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ScriptExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptExists'
type UniversalClient_ScriptExists_Call struct {
	*mock.Call
}

// ScriptExists is a helper method to define mock.On call
//   - ctx context.Context
//   - hashes ...string
func (_e *UniversalClient_Expecter) ScriptExists(ctx interface{}, hashes ...interface{}) *UniversalClient_ScriptExists_Call {
	return &UniversalClient_ScriptExists_Call{Call: _e.mock.On("ScriptExists",
		append([]interface{}{ctx}, hashes...)...)}
}

func (_c *UniversalClient_ScriptExists_Call) Run(run func(ctx context.Context, hashes ...string)) *UniversalClient_ScriptExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ScriptExists_Call) Return(_a0 *redis.BoolSliceCmd) *UniversalClient_ScriptExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ScriptExists_Call) RunAndReturn(run func(context.Context, ...string) *redis.BoolSliceCmd) *UniversalClient_ScriptExists_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptFlush provides a mock function with given fields: ctx
func (_m *UniversalClient) ScriptFlush(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ScriptFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptFlush'
type UniversalClient_ScriptFlush_Call struct {
	*mock.Call
}

// ScriptFlush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ScriptFlush(ctx interface{}) *UniversalClient_ScriptFlush_Call {
	return &UniversalClient_ScriptFlush_Call{Call: _e.mock.On("ScriptFlush", ctx)}
}

func (_c *UniversalClient_ScriptFlush_Call) Run(run func(ctx context.Context)) *UniversalClient_ScriptFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ScriptFlush_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ScriptFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ScriptFlush_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ScriptFlush_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptKill provides a mock function with given fields: ctx
func (_m *UniversalClient) ScriptKill(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ScriptKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptKill'
type UniversalClient_ScriptKill_Call struct {
	*mock.Call
}

// ScriptKill is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ScriptKill(ctx interface{}) *UniversalClient_ScriptKill_Call {
	return &UniversalClient_ScriptKill_Call{Call: _e.mock.On("ScriptKill", ctx)}
}

func (_c *UniversalClient_ScriptKill_Call) Run(run func(ctx context.Context)) *UniversalClient_ScriptKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ScriptKill_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ScriptKill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ScriptKill_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ScriptKill_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptLoad provides a mock function with given fields: ctx, script
func (_m *UniversalClient) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	ret := _m.Called(ctx, script)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringCmd); ok {
		r0 = rf(ctx, script)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_ScriptLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptLoad'
type UniversalClient_ScriptLoad_Call struct {
	*mock.Call
}

// ScriptLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - script string
func (_e *UniversalClient_Expecter) ScriptLoad(ctx interface{}, script interface{}) *UniversalClient_ScriptLoad_Call {
	return &UniversalClient_ScriptLoad_Call{Call: _e.mock.On("ScriptLoad", ctx, script)}
}

func (_c *UniversalClient_ScriptLoad_Call) Run(run func(ctx context.Context, script string)) *UniversalClient_ScriptLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ScriptLoad_Call) Return(_a0 *redis.StringCmd) *UniversalClient_ScriptLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ScriptLoad_Call) RunAndReturn(run func(context.Context, string) *redis.StringCmd) *UniversalClient_ScriptLoad_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *UniversalClient) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type UniversalClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *UniversalClient_Set_Call {
	return &UniversalClient_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *UniversalClient_Set_Call) Run(run func(ctx context.Context, key string, value interface{}, expiration time.Duration)) *UniversalClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_Set_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Set_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) *redis.StatusCmd) *UniversalClient_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetArgs provides a mock function with given fields: ctx, key, value, a
func (_m *UniversalClient) SetArgs(ctx context.Context, key string, value interface{}, a redis.SetArgs) *redis.StatusCmd {
	ret := _m.Called(ctx, key, value, a)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, redis.SetArgs) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, value, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_SetArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetArgs'
type UniversalClient_SetArgs_Call struct {
	*mock.Call
}

// SetArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - a redis.SetArgs
func (_e *UniversalClient_Expecter) SetArgs(ctx interface{}, key interface{}, value interface{}, a interface{}) *UniversalClient_SetArgs_Call {
	return &UniversalClient_SetArgs_Call{Call: _e.mock.On("SetArgs", ctx, key, value, a)}
}

func (_c *UniversalClient_SetArgs_Call) Run(run func(ctx context.Context, key string, value interface{}, a redis.SetArgs)) *UniversalClient_SetArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(redis.SetArgs))
	})
	return _c
}

func (_c *UniversalClient_SetArgs_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_SetArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SetArgs_Call) RunAndReturn(run func(context.Context, string, interface{}, redis.SetArgs) *redis.StatusCmd) *UniversalClient_SetArgs_Call {
	_c.Call.Return(run)
	return _c
}

// SetBit provides a mock function with given fields: ctx, key, offset, value
func (_m *UniversalClient) SetBit(ctx context.Context, key string, offset int64, value int) *redis.IntCmd {
	ret := _m.Called(ctx, key, offset, value)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int) *redis.IntCmd); ok {
		r0 = rf(ctx, key, offset, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SetBit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBit'
type UniversalClient_SetBit_Call struct {
	*mock.Call
}

// SetBit is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - offset int64
//   - value int
func (_e *UniversalClient_Expecter) SetBit(ctx interface{}, key interface{}, offset interface{}, value interface{}) *UniversalClient_SetBit_Call {
	return &UniversalClient_SetBit_Call{Call: _e.mock.On("SetBit", ctx, key, offset, value)}
}

func (_c *UniversalClient_SetBit_Call) Run(run func(ctx context.Context, key string, offset int64, value int)) *UniversalClient_SetBit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *UniversalClient_SetBit_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SetBit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SetBit_Call) RunAndReturn(run func(context.Context, string, int64, int) *redis.IntCmd) *UniversalClient_SetBit_Call {
	_c.Call.Return(run)
	return _c
}

// SetEx provides a mock function with given fields: ctx, key, value, expiration
func (_m *UniversalClient) SetEx(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_SetEx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEx'
type UniversalClient_SetEx_Call struct {
	*mock.Call
}

// SetEx is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) SetEx(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *UniversalClient_SetEx_Call {
	return &UniversalClient_SetEx_Call{Call: _e.mock.On("SetEx", ctx, key, value, expiration)}
}

func (_c *UniversalClient_SetEx_Call) Run(run func(ctx context.Context, key string, value interface{}, expiration time.Duration)) *UniversalClient_SetEx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_SetEx_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_SetEx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SetEx_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) *redis.StatusCmd) *UniversalClient_SetEx_Call {
	_c.Call.Return(run)
	return _c
}

// SetNX provides a mock function with given fields: ctx, key, value, expiration
func (_m *UniversalClient) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_SetNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNX'
type UniversalClient_SetNX_Call struct {
	*mock.Call
}

// SetNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) SetNX(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *UniversalClient_SetNX_Call {
	return &UniversalClient_SetNX_Call{Call: _e.mock.On("SetNX", ctx, key, value, expiration)}
}

func (_c *UniversalClient_SetNX_Call) Run(run func(ctx context.Context, key string, value interface{}, expiration time.Duration)) *UniversalClient_SetNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_SetNX_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_SetNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SetNX_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) *redis.BoolCmd) *UniversalClient_SetNX_Call {
	_c.Call.Return(run)
	return _c
}

// SetRange provides a mock function with given fields: ctx, key, offset, value
func (_m *UniversalClient) SetRange(ctx context.Context, key string, offset int64, value string) *redis.IntCmd {
	ret := _m.Called(ctx, key, offset, value)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, offset, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SetRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRange'
type UniversalClient_SetRange_Call struct {
	*mock.Call
}

// SetRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - offset int64
//   - value string
func (_e *UniversalClient_Expecter) SetRange(ctx interface{}, key interface{}, offset interface{}, value interface{}) *UniversalClient_SetRange_Call {
	return &UniversalClient_SetRange_Call{Call: _e.mock.On("SetRange", ctx, key, offset, value)}
}

func (_c *UniversalClient_SetRange_Call) Run(run func(ctx context.Context, key string, offset int64, value string)) *UniversalClient_SetRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_SetRange_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SetRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SetRange_Call) RunAndReturn(run func(context.Context, string, int64, string) *redis.IntCmd) *UniversalClient_SetRange_Call {
	_c.Call.Return(run)
	return _c
}

// SetXX provides a mock function with given fields: ctx, key, value, expiration
func (_m *UniversalClient) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// UniversalClient_SetXX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetXX'
type UniversalClient_SetXX_Call struct {
	*mock.Call
}

// SetXX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *UniversalClient_Expecter) SetXX(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *UniversalClient_SetXX_Call {
	return &UniversalClient_SetXX_Call{Call: _e.mock.On("SetXX", ctx, key, value, expiration)}
}

func (_c *UniversalClient_SetXX_Call) Run(run func(ctx context.Context, key string, value interface{}, expiration time.Duration)) *UniversalClient_SetXX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *UniversalClient_SetXX_Call) Return(_a0 *redis.BoolCmd) *UniversalClient_SetXX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SetXX_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) *redis.BoolCmd) *UniversalClient_SetXX_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *UniversalClient) Shutdown(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type UniversalClient_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) Shutdown(ctx interface{}) *UniversalClient_Shutdown_Call {
	return &UniversalClient_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *UniversalClient_Shutdown_Call) Run(run func(ctx context.Context)) *UniversalClient_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_Shutdown_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Shutdown_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownNoSave provides a mock function with given fields: ctx
func (_m *UniversalClient) ShutdownNoSave(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ShutdownNoSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownNoSave'
type UniversalClient_ShutdownNoSave_Call struct {
	*mock.Call
}

// ShutdownNoSave is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ShutdownNoSave(ctx interface{}) *UniversalClient_ShutdownNoSave_Call {
	return &UniversalClient_ShutdownNoSave_Call{Call: _e.mock.On("ShutdownNoSave", ctx)}
}

func (_c *UniversalClient_ShutdownNoSave_Call) Run(run func(ctx context.Context)) *UniversalClient_ShutdownNoSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ShutdownNoSave_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ShutdownNoSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ShutdownNoSave_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ShutdownNoSave_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownSave provides a mock function with given fields: ctx
func (_m *UniversalClient) ShutdownSave(ctx context.Context) *redis.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_ShutdownSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownSave'
type UniversalClient_ShutdownSave_Call struct {
	*mock.Call
}

// ShutdownSave is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) ShutdownSave(ctx interface{}) *UniversalClient_ShutdownSave_Call {
	return &UniversalClient_ShutdownSave_Call{Call: _e.mock.On("ShutdownSave", ctx)}
}

func (_c *UniversalClient_ShutdownSave_Call) Run(run func(ctx context.Context)) *UniversalClient_ShutdownSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_ShutdownSave_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_ShutdownSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ShutdownSave_Call) RunAndReturn(run func(context.Context) *redis.StatusCmd) *UniversalClient_ShutdownSave_Call {
	_c.Call.Return(run)
	return _c
}

// SlaveOf provides a mock function with given fields: ctx, host, port
func (_m *UniversalClient) SlaveOf(ctx context.Context, host string, port string) *redis.StatusCmd {
	ret := _m.Called(ctx, host, port)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, host, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_SlaveOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlaveOf'
type UniversalClient_SlaveOf_Call struct {
	*mock.Call
}

// SlaveOf is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - port string
func (_e *UniversalClient_Expecter) SlaveOf(ctx interface{}, host interface{}, port interface{}) *UniversalClient_SlaveOf_Call {
	return &UniversalClient_SlaveOf_Call{Call: _e.mock.On("SlaveOf", ctx, host, port)}
}

func (_c *UniversalClient_SlaveOf_Call) Run(run func(ctx context.Context, host string, port string)) *UniversalClient_SlaveOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_SlaveOf_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_SlaveOf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SlaveOf_Call) RunAndReturn(run func(context.Context, string, string) *redis.StatusCmd) *UniversalClient_SlaveOf_Call {
	_c.Call.Return(run)
	return _c
}

// SlowLogGet provides a mock function with given fields: ctx, num
func (_m *UniversalClient) SlowLogGet(ctx context.Context, num int64) *redis.SlowLogCmd {
	ret := _m.Called(ctx, num)

	var r0 *redis.SlowLogCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64) *redis.SlowLogCmd); ok {
		r0 = rf(ctx, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.SlowLogCmd)
		}
	}

	return r0
}

// UniversalClient_SlowLogGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlowLogGet'
type UniversalClient_SlowLogGet_Call struct {
	*mock.Call
}

// SlowLogGet is a helper method to define mock.On call
//   - ctx context.Context
//   - num int64
func (_e *UniversalClient_Expecter) SlowLogGet(ctx interface{}, num interface{}) *UniversalClient_SlowLogGet_Call {
	return &UniversalClient_SlowLogGet_Call{Call: _e.mock.On("SlowLogGet", ctx, num)}
}

func (_c *UniversalClient_SlowLogGet_Call) Run(run func(ctx context.Context, num int64)) *UniversalClient_SlowLogGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UniversalClient_SlowLogGet_Call) Return(_a0 *redis.SlowLogCmd) *UniversalClient_SlowLogGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SlowLogGet_Call) RunAndReturn(run func(context.Context, int64) *redis.SlowLogCmd) *UniversalClient_SlowLogGet_Call {
	_c.Call.Return(run)
	return _c
}

// Sort provides a mock function with given fields: ctx, key, sort
func (_m *UniversalClient) Sort(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, sort)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.Sort) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_Sort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sort'
type UniversalClient_Sort_Call struct {
	*mock.Call
}

// Sort is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - sort *redis.Sort
func (_e *UniversalClient_Expecter) Sort(ctx interface{}, key interface{}, sort interface{}) *UniversalClient_Sort_Call {
	return &UniversalClient_Sort_Call{Call: _e.mock.On("Sort", ctx, key, sort)}
}

func (_c *UniversalClient_Sort_Call) Run(run func(ctx context.Context, key string, sort *redis.Sort)) *UniversalClient_Sort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.Sort))
	})
	return _c
}

func (_c *UniversalClient_Sort_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_Sort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Sort_Call) RunAndReturn(run func(context.Context, string, *redis.Sort) *redis.StringSliceCmd) *UniversalClient_Sort_Call {
	_c.Call.Return(run)
	return _c
}

// SortInterfaces provides a mock function with given fields: ctx, key, sort
func (_m *UniversalClient) SortInterfaces(ctx context.Context, key string, sort *redis.Sort) *redis.SliceCmd {
	ret := _m.Called(ctx, key, sort)

	var r0 *redis.SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.Sort) *redis.SliceCmd); ok {
		r0 = rf(ctx, key, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.SliceCmd)
		}
	}

	return r0
}

// UniversalClient_SortInterfaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SortInterfaces'
type UniversalClient_SortInterfaces_Call struct {
	*mock.Call
}

// SortInterfaces is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - sort *redis.Sort
func (_e *UniversalClient_Expecter) SortInterfaces(ctx interface{}, key interface{}, sort interface{}) *UniversalClient_SortInterfaces_Call {
	return &UniversalClient_SortInterfaces_Call{Call: _e.mock.On("SortInterfaces", ctx, key, sort)}
}

func (_c *UniversalClient_SortInterfaces_Call) Run(run func(ctx context.Context, key string, sort *redis.Sort)) *UniversalClient_SortInterfaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.Sort))
	})
	return _c
}

func (_c *UniversalClient_SortInterfaces_Call) Return(_a0 *redis.SliceCmd) *UniversalClient_SortInterfaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SortInterfaces_Call) RunAndReturn(run func(context.Context, string, *redis.Sort) *redis.SliceCmd) *UniversalClient_SortInterfaces_Call {
	_c.Call.Return(run)
	return _c
}

// SortRO provides a mock function with given fields: ctx, key, sort
func (_m *UniversalClient) SortRO(ctx context.Context, key string, sort *redis.Sort) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, sort)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.Sort) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_SortRO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SortRO'
type UniversalClient_SortRO_Call struct {
	*mock.Call
}

// SortRO is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - sort *redis.Sort
func (_e *UniversalClient_Expecter) SortRO(ctx interface{}, key interface{}, sort interface{}) *UniversalClient_SortRO_Call {
	return &UniversalClient_SortRO_Call{Call: _e.mock.On("SortRO", ctx, key, sort)}
}

func (_c *UniversalClient_SortRO_Call) Run(run func(ctx context.Context, key string, sort *redis.Sort)) *UniversalClient_SortRO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.Sort))
	})
	return _c
}

func (_c *UniversalClient_SortRO_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_SortRO_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SortRO_Call) RunAndReturn(run func(context.Context, string, *redis.Sort) *redis.StringSliceCmd) *UniversalClient_SortRO_Call {
	_c.Call.Return(run)
	return _c
}

// SortStore provides a mock function with given fields: ctx, key, store, sort
func (_m *UniversalClient) SortStore(ctx context.Context, key string, store string, sort *redis.Sort) *redis.IntCmd {
	ret := _m.Called(ctx, key, store, sort)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *redis.Sort) *redis.IntCmd); ok {
		r0 = rf(ctx, key, store, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_SortStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SortStore'
type UniversalClient_SortStore_Call struct {
	*mock.Call
}

// SortStore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - store string
//   - sort *redis.Sort
func (_e *UniversalClient_Expecter) SortStore(ctx interface{}, key interface{}, store interface{}, sort interface{}) *UniversalClient_SortStore_Call {
	return &UniversalClient_SortStore_Call{Call: _e.mock.On("SortStore", ctx, key, store, sort)}
}

func (_c *UniversalClient_SortStore_Call) Run(run func(ctx context.Context, key string, store string, sort *redis.Sort)) *UniversalClient_SortStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*redis.Sort))
	})
	return _c
}

func (_c *UniversalClient_SortStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_SortStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_SortStore_Call) RunAndReturn(run func(context.Context, string, string, *redis.Sort) *redis.IntCmd) *UniversalClient_SortStore_Call {
	_c.Call.Return(run)
	return _c
}

// StrLen provides a mock function with given fields: ctx, key
func (_m *UniversalClient) StrLen(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_StrLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StrLen'
type UniversalClient_StrLen_Call struct {
	*mock.Call
}

// StrLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) StrLen(ctx interface{}, key interface{}) *UniversalClient_StrLen_Call {
	return &UniversalClient_StrLen_Call{Call: _e.mock.On("StrLen", ctx, key)}
}

func (_c *UniversalClient_StrLen_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_StrLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_StrLen_Call) Return(_a0 *redis.IntCmd) *UniversalClient_StrLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_StrLen_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_StrLen_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, channels
func (_m *UniversalClient) Subscribe(ctx context.Context, channels ...string) *redis.PubSub {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.PubSub
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.PubSub); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.PubSub)
		}
	}

	return r0
}

// UniversalClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type UniversalClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - channels ...string
func (_e *UniversalClient_Expecter) Subscribe(ctx interface{}, channels ...interface{}) *UniversalClient_Subscribe_Call {
	return &UniversalClient_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *UniversalClient_Subscribe_Call) Run(run func(ctx context.Context, channels ...string)) *UniversalClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_Subscribe_Call) Return(_a0 *redis.PubSub) *UniversalClient_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Subscribe_Call) RunAndReturn(run func(context.Context, ...string) *redis.PubSub) *UniversalClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestAdd provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) TDigestAdd(ctx context.Context, key string, elements ...float64) *redis.StatusCmd {
	_va := make([]interface{}, len(elements))
	for _i := range elements {
		_va[_i] = elements[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestAdd'
type UniversalClient_TDigestAdd_Call struct {
	*mock.Call
}

// TDigestAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...float64
func (_e *UniversalClient_Expecter) TDigestAdd(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_TDigestAdd_Call {
	return &UniversalClient_TDigestAdd_Call{Call: _e.mock.On("TDigestAdd",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_TDigestAdd_Call) Run(run func(ctx context.Context, key string, elements ...float64)) *UniversalClient_TDigestAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TDigestAdd_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TDigestAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestAdd_Call) RunAndReturn(run func(context.Context, string, ...float64) *redis.StatusCmd) *UniversalClient_TDigestAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestByRank provides a mock function with given fields: ctx, key, rank
func (_m *UniversalClient) TDigestByRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	_va := make([]interface{}, len(rank))
	for _i := range rank {
		_va[_i] = rank[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...uint64) *redis.FloatSliceCmd); ok {
		r0 = rf(ctx, key, rank...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestByRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestByRank'
type UniversalClient_TDigestByRank_Call struct {
	*mock.Call
}

// TDigestByRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - rank ...uint64
func (_e *UniversalClient_Expecter) TDigestByRank(ctx interface{}, key interface{}, rank ...interface{}) *UniversalClient_TDigestByRank_Call {
	return &UniversalClient_TDigestByRank_Call{Call: _e.mock.On("TDigestByRank",
		append([]interface{}{ctx, key}, rank...)...)}
}

func (_c *UniversalClient_TDigestByRank_Call) Run(run func(ctx context.Context, key string, rank ...uint64)) *UniversalClient_TDigestByRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(uint64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TDigestByRank_Call) Return(_a0 *redis.FloatSliceCmd) *UniversalClient_TDigestByRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestByRank_Call) RunAndReturn(run func(context.Context, string, ...uint64) *redis.FloatSliceCmd) *UniversalClient_TDigestByRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestByRevRank provides a mock function with given fields: ctx, key, rank
func (_m *UniversalClient) TDigestByRevRank(ctx context.Context, key string, rank ...uint64) *redis.FloatSliceCmd {
	_va := make([]interface{}, len(rank))
	for _i := range rank {
		_va[_i] = rank[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...uint64) *redis.FloatSliceCmd); ok {
		r0 = rf(ctx, key, rank...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestByRevRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestByRevRank'
type UniversalClient_TDigestByRevRank_Call struct {
	*mock.Call
}

// TDigestByRevRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - rank ...uint64
func (_e *UniversalClient_Expecter) TDigestByRevRank(ctx interface{}, key interface{}, rank ...interface{}) *UniversalClient_TDigestByRevRank_Call {
	return &UniversalClient_TDigestByRevRank_Call{Call: _e.mock.On("TDigestByRevRank",
		append([]interface{}{ctx, key}, rank...)...)}
}

func (_c *UniversalClient_TDigestByRevRank_Call) Run(run func(ctx context.Context, key string, rank ...uint64)) *UniversalClient_TDigestByRevRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(uint64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TDigestByRevRank_Call) Return(_a0 *redis.FloatSliceCmd) *UniversalClient_TDigestByRevRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestByRevRank_Call) RunAndReturn(run func(context.Context, string, ...uint64) *redis.FloatSliceCmd) *UniversalClient_TDigestByRevRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestCDF provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) TDigestCDF(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	_va := make([]interface{}, len(elements))
	for _i := range elements {
		_va[_i] = elements[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *redis.FloatSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestCDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestCDF'
type UniversalClient_TDigestCDF_Call struct {
	*mock.Call
}

// TDigestCDF is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...float64
func (_e *UniversalClient_Expecter) TDigestCDF(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_TDigestCDF_Call {
	return &UniversalClient_TDigestCDF_Call{Call: _e.mock.On("TDigestCDF",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_TDigestCDF_Call) Run(run func(ctx context.Context, key string, elements ...float64)) *UniversalClient_TDigestCDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TDigestCDF_Call) Return(_a0 *redis.FloatSliceCmd) *UniversalClient_TDigestCDF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestCDF_Call) RunAndReturn(run func(context.Context, string, ...float64) *redis.FloatSliceCmd) *UniversalClient_TDigestCDF_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestCreate provides a mock function with given fields: ctx, key
func (_m *UniversalClient) TDigestCreate(ctx context.Context, key string) *redis.StatusCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestCreate'
type UniversalClient_TDigestCreate_Call struct {
	*mock.Call
}

// TDigestCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) TDigestCreate(ctx interface{}, key interface{}) *UniversalClient_TDigestCreate_Call {
	return &UniversalClient_TDigestCreate_Call{Call: _e.mock.On("TDigestCreate", ctx, key)}
}

func (_c *UniversalClient_TDigestCreate_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_TDigestCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TDigestCreate_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TDigestCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestCreate_Call) RunAndReturn(run func(context.Context, string) *redis.StatusCmd) *UniversalClient_TDigestCreate_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestCreateWithCompression provides a mock function with given fields: ctx, key, compression
func (_m *UniversalClient) TDigestCreateWithCompression(ctx context.Context, key string, compression int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, compression)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, compression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestCreateWithCompression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestCreateWithCompression'
type UniversalClient_TDigestCreateWithCompression_Call struct {
	*mock.Call
}

// TDigestCreateWithCompression is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - compression int64
func (_e *UniversalClient_Expecter) TDigestCreateWithCompression(ctx interface{}, key interface{}, compression interface{}) *UniversalClient_TDigestCreateWithCompression_Call {
	return &UniversalClient_TDigestCreateWithCompression_Call{Call: _e.mock.On("TDigestCreateWithCompression", ctx, key, compression)}
}

func (_c *UniversalClient_TDigestCreateWithCompression_Call) Run(run func(ctx context.Context, key string, compression int64)) *UniversalClient_TDigestCreateWithCompression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_TDigestCreateWithCompression_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TDigestCreateWithCompression_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestCreateWithCompression_Call) RunAndReturn(run func(context.Context, string, int64) *redis.StatusCmd) *UniversalClient_TDigestCreateWithCompression_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestInfo provides a mock function with given fields: ctx, key
func (_m *UniversalClient) TDigestInfo(ctx context.Context, key string) *redis.TDigestInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.TDigestInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.TDigestInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.TDigestInfoCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestInfo'
type UniversalClient_TDigestInfo_Call struct {
	*mock.Call
}

// TDigestInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) TDigestInfo(ctx interface{}, key interface{}) *UniversalClient_TDigestInfo_Call {
	return &UniversalClient_TDigestInfo_Call{Call: _e.mock.On("TDigestInfo", ctx, key)}
}

func (_c *UniversalClient_TDigestInfo_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_TDigestInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TDigestInfo_Call) Return(_a0 *redis.TDigestInfoCmd) *UniversalClient_TDigestInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestInfo_Call) RunAndReturn(run func(context.Context, string) *redis.TDigestInfoCmd) *UniversalClient_TDigestInfo_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestMax provides a mock function with given fields: ctx, key
func (_m *UniversalClient) TDigestMax(ctx context.Context, key string) *redis.FloatCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.FloatCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestMax'
type UniversalClient_TDigestMax_Call struct {
	*mock.Call
}

// TDigestMax is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) TDigestMax(ctx interface{}, key interface{}) *UniversalClient_TDigestMax_Call {
	return &UniversalClient_TDigestMax_Call{Call: _e.mock.On("TDigestMax", ctx, key)}
}

func (_c *UniversalClient_TDigestMax_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_TDigestMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TDigestMax_Call) Return(_a0 *redis.FloatCmd) *UniversalClient_TDigestMax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestMax_Call) RunAndReturn(run func(context.Context, string) *redis.FloatCmd) *UniversalClient_TDigestMax_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestMerge provides a mock function with given fields: ctx, destKey, options, sourceKeys
func (_m *UniversalClient) TDigestMerge(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string) *redis.StatusCmd {
	_va := make([]interface{}, len(sourceKeys))
	for _i := range sourceKeys {
		_va[_i] = sourceKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.TDigestMergeOptions, ...string) *redis.StatusCmd); ok {
		r0 = rf(ctx, destKey, options, sourceKeys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestMerge'
type UniversalClient_TDigestMerge_Call struct {
	*mock.Call
}

// TDigestMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - destKey string
//   - options *redis.TDigestMergeOptions
//   - sourceKeys ...string
func (_e *UniversalClient_Expecter) TDigestMerge(ctx interface{}, destKey interface{}, options interface{}, sourceKeys ...interface{}) *UniversalClient_TDigestMerge_Call {
	return &UniversalClient_TDigestMerge_Call{Call: _e.mock.On("TDigestMerge",
		append([]interface{}{ctx, destKey, options}, sourceKeys...)...)}
}

func (_c *UniversalClient_TDigestMerge_Call) Run(run func(ctx context.Context, destKey string, options *redis.TDigestMergeOptions, sourceKeys ...string)) *UniversalClient_TDigestMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.TDigestMergeOptions), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TDigestMerge_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TDigestMerge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestMerge_Call) RunAndReturn(run func(context.Context, string, *redis.TDigestMergeOptions, ...string) *redis.StatusCmd) *UniversalClient_TDigestMerge_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestMin provides a mock function with given fields: ctx, key
func (_m *UniversalClient) TDigestMin(ctx context.Context, key string) *redis.FloatCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.FloatCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestMin'
type UniversalClient_TDigestMin_Call struct {
	*mock.Call
}

// TDigestMin is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) TDigestMin(ctx interface{}, key interface{}) *UniversalClient_TDigestMin_Call {
	return &UniversalClient_TDigestMin_Call{Call: _e.mock.On("TDigestMin", ctx, key)}
}

func (_c *UniversalClient_TDigestMin_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_TDigestMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TDigestMin_Call) Return(_a0 *redis.FloatCmd) *UniversalClient_TDigestMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestMin_Call) RunAndReturn(run func(context.Context, string) *redis.FloatCmd) *UniversalClient_TDigestMin_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestQuantile provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) TDigestQuantile(ctx context.Context, key string, elements ...float64) *redis.FloatSliceCmd {
	_va := make([]interface{}, len(elements))
	for _i := range elements {
		_va[_i] = elements[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *redis.FloatSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestQuantile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestQuantile'
type UniversalClient_TDigestQuantile_Call struct {
	*mock.Call
}

// TDigestQuantile is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...float64
func (_e *UniversalClient_Expecter) TDigestQuantile(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_TDigestQuantile_Call {
	return &UniversalClient_TDigestQuantile_Call{Call: _e.mock.On("TDigestQuantile",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_TDigestQuantile_Call) Run(run func(ctx context.Context, key string, elements ...float64)) *UniversalClient_TDigestQuantile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TDigestQuantile_Call) Return(_a0 *redis.FloatSliceCmd) *UniversalClient_TDigestQuantile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestQuantile_Call) RunAndReturn(run func(context.Context, string, ...float64) *redis.FloatSliceCmd) *UniversalClient_TDigestQuantile_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestRank provides a mock function with given fields: ctx, key, values
func (_m *UniversalClient) TDigestRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *redis.IntSliceCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestRank'
type UniversalClient_TDigestRank_Call struct {
	*mock.Call
}

// TDigestRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...float64
func (_e *UniversalClient_Expecter) TDigestRank(ctx interface{}, key interface{}, values ...interface{}) *UniversalClient_TDigestRank_Call {
	return &UniversalClient_TDigestRank_Call{Call: _e.mock.On("TDigestRank",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *UniversalClient_TDigestRank_Call) Run(run func(ctx context.Context, key string, values ...float64)) *UniversalClient_TDigestRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TDigestRank_Call) Return(_a0 *redis.IntSliceCmd) *UniversalClient_TDigestRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestRank_Call) RunAndReturn(run func(context.Context, string, ...float64) *redis.IntSliceCmd) *UniversalClient_TDigestRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestReset provides a mock function with given fields: ctx, key
func (_m *UniversalClient) TDigestReset(ctx context.Context, key string) *redis.StatusCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestReset'
type UniversalClient_TDigestReset_Call struct {
	*mock.Call
}

// TDigestReset is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) TDigestReset(ctx interface{}, key interface{}) *UniversalClient_TDigestReset_Call {
	return &UniversalClient_TDigestReset_Call{Call: _e.mock.On("TDigestReset", ctx, key)}
}

func (_c *UniversalClient_TDigestReset_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_TDigestReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TDigestReset_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TDigestReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestReset_Call) RunAndReturn(run func(context.Context, string) *redis.StatusCmd) *UniversalClient_TDigestReset_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestRevRank provides a mock function with given fields: ctx, key, values
func (_m *UniversalClient) TDigestRevRank(ctx context.Context, key string, values ...float64) *redis.IntSliceCmd {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...float64) *redis.IntSliceCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestRevRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestRevRank'
type UniversalClient_TDigestRevRank_Call struct {
	*mock.Call
}

// TDigestRevRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - values ...float64
func (_e *UniversalClient_Expecter) TDigestRevRank(ctx interface{}, key interface{}, values ...interface{}) *UniversalClient_TDigestRevRank_Call {
	return &UniversalClient_TDigestRevRank_Call{Call: _e.mock.On("TDigestRevRank",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *UniversalClient_TDigestRevRank_Call) Run(run func(ctx context.Context, key string, values ...float64)) *UniversalClient_TDigestRevRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]float64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(float64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TDigestRevRank_Call) Return(_a0 *redis.IntSliceCmd) *UniversalClient_TDigestRevRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestRevRank_Call) RunAndReturn(run func(context.Context, string, ...float64) *redis.IntSliceCmd) *UniversalClient_TDigestRevRank_Call {
	_c.Call.Return(run)
	return _c
}

// TDigestTrimmedMean provides a mock function with given fields: ctx, key, lowCutQuantile, highCutQuantile
func (_m *UniversalClient) TDigestTrimmedMean(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64) *redis.FloatCmd {
	ret := _m.Called(ctx, key, lowCutQuantile, highCutQuantile)

	var r0 *redis.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64) *redis.FloatCmd); ok {
		r0 = rf(ctx, key, lowCutQuantile, highCutQuantile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatCmd)
		}
	}

	return r0
}

// UniversalClient_TDigestTrimmedMean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDigestTrimmedMean'
type UniversalClient_TDigestTrimmedMean_Call struct {
	*mock.Call
}

// TDigestTrimmedMean is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - lowCutQuantile float64
//   - highCutQuantile float64
func (_e *UniversalClient_Expecter) TDigestTrimmedMean(ctx interface{}, key interface{}, lowCutQuantile interface{}, highCutQuantile interface{}) *UniversalClient_TDigestTrimmedMean_Call {
	return &UniversalClient_TDigestTrimmedMean_Call{Call: _e.mock.On("TDigestTrimmedMean", ctx, key, lowCutQuantile, highCutQuantile)}
}

func (_c *UniversalClient_TDigestTrimmedMean_Call) Run(run func(ctx context.Context, key string, lowCutQuantile float64, highCutQuantile float64)) *UniversalClient_TDigestTrimmedMean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *UniversalClient_TDigestTrimmedMean_Call) Return(_a0 *redis.FloatCmd) *UniversalClient_TDigestTrimmedMean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TDigestTrimmedMean_Call) RunAndReturn(run func(context.Context, string, float64, float64) *redis.FloatCmd) *UniversalClient_TDigestTrimmedMean_Call {
	_c.Call.Return(run)
	return _c
}

// TFCall provides a mock function with given fields: ctx, libName, funcName, numKeys
func (_m *UniversalClient) TFCall(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	ret := _m.Called(ctx, libName, funcName, numKeys)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *redis.Cmd); ok {
		r0 = rf(ctx, libName, funcName, numKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_TFCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFCall'
type UniversalClient_TFCall_Call struct {
	*mock.Call
}

// TFCall is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
//   - funcName string
//   - numKeys int
func (_e *UniversalClient_Expecter) TFCall(ctx interface{}, libName interface{}, funcName interface{}, numKeys interface{}) *UniversalClient_TFCall_Call {
	return &UniversalClient_TFCall_Call{Call: _e.mock.On("TFCall", ctx, libName, funcName, numKeys)}
}

func (_c *UniversalClient_TFCall_Call) Run(run func(ctx context.Context, libName string, funcName string, numKeys int)) *UniversalClient_TFCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *UniversalClient_TFCall_Call) Return(_a0 *redis.Cmd) *UniversalClient_TFCall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TFCall_Call) RunAndReturn(run func(context.Context, string, string, int) *redis.Cmd) *UniversalClient_TFCall_Call {
	_c.Call.Return(run)
	return _c
}

// TFCallASYNC provides a mock function with given fields: ctx, libName, funcName, numKeys
func (_m *UniversalClient) TFCallASYNC(ctx context.Context, libName string, funcName string, numKeys int) *redis.Cmd {
	ret := _m.Called(ctx, libName, funcName, numKeys)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *redis.Cmd); ok {
		r0 = rf(ctx, libName, funcName, numKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_TFCallASYNC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFCallASYNC'
type UniversalClient_TFCallASYNC_Call struct {
	*mock.Call
}

// TFCallASYNC is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
//   - funcName string
//   - numKeys int
func (_e *UniversalClient_Expecter) TFCallASYNC(ctx interface{}, libName interface{}, funcName interface{}, numKeys interface{}) *UniversalClient_TFCallASYNC_Call {
	return &UniversalClient_TFCallASYNC_Call{Call: _e.mock.On("TFCallASYNC", ctx, libName, funcName, numKeys)}
}

func (_c *UniversalClient_TFCallASYNC_Call) Run(run func(ctx context.Context, libName string, funcName string, numKeys int)) *UniversalClient_TFCallASYNC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *UniversalClient_TFCallASYNC_Call) Return(_a0 *redis.Cmd) *UniversalClient_TFCallASYNC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TFCallASYNC_Call) RunAndReturn(run func(context.Context, string, string, int) *redis.Cmd) *UniversalClient_TFCallASYNC_Call {
	_c.Call.Return(run)
	return _c
}

// TFCallASYNCArgs provides a mock function with given fields: ctx, libName, funcName, numKeys, options
func (_m *UniversalClient) TFCallASYNCArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	ret := _m.Called(ctx, libName, funcName, numKeys, options)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *redis.TFCallOptions) *redis.Cmd); ok {
		r0 = rf(ctx, libName, funcName, numKeys, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_TFCallASYNCArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFCallASYNCArgs'
type UniversalClient_TFCallASYNCArgs_Call struct {
	*mock.Call
}

// TFCallASYNCArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
//   - funcName string
//   - numKeys int
//   - options *redis.TFCallOptions
func (_e *UniversalClient_Expecter) TFCallASYNCArgs(ctx interface{}, libName interface{}, funcName interface{}, numKeys interface{}, options interface{}) *UniversalClient_TFCallASYNCArgs_Call {
	return &UniversalClient_TFCallASYNCArgs_Call{Call: _e.mock.On("TFCallASYNCArgs", ctx, libName, funcName, numKeys, options)}
}

func (_c *UniversalClient_TFCallASYNCArgs_Call) Run(run func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions)) *UniversalClient_TFCallASYNCArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(*redis.TFCallOptions))
	})
	return _c
}

func (_c *UniversalClient_TFCallASYNCArgs_Call) Return(_a0 *redis.Cmd) *UniversalClient_TFCallASYNCArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TFCallASYNCArgs_Call) RunAndReturn(run func(context.Context, string, string, int, *redis.TFCallOptions) *redis.Cmd) *UniversalClient_TFCallASYNCArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TFCallArgs provides a mock function with given fields: ctx, libName, funcName, numKeys, options
func (_m *UniversalClient) TFCallArgs(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions) *redis.Cmd {
	ret := _m.Called(ctx, libName, funcName, numKeys, options)

	var r0 *redis.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *redis.TFCallOptions) *redis.Cmd); ok {
		r0 = rf(ctx, libName, funcName, numKeys, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Cmd)
		}
	}

	return r0
}

// UniversalClient_TFCallArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFCallArgs'
type UniversalClient_TFCallArgs_Call struct {
	*mock.Call
}

// TFCallArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
//   - funcName string
//   - numKeys int
//   - options *redis.TFCallOptions
func (_e *UniversalClient_Expecter) TFCallArgs(ctx interface{}, libName interface{}, funcName interface{}, numKeys interface{}, options interface{}) *UniversalClient_TFCallArgs_Call {
	return &UniversalClient_TFCallArgs_Call{Call: _e.mock.On("TFCallArgs", ctx, libName, funcName, numKeys, options)}
}

func (_c *UniversalClient_TFCallArgs_Call) Run(run func(ctx context.Context, libName string, funcName string, numKeys int, options *redis.TFCallOptions)) *UniversalClient_TFCallArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(*redis.TFCallOptions))
	})
	return _c
}

func (_c *UniversalClient_TFCallArgs_Call) Return(_a0 *redis.Cmd) *UniversalClient_TFCallArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TFCallArgs_Call) RunAndReturn(run func(context.Context, string, string, int, *redis.TFCallOptions) *redis.Cmd) *UniversalClient_TFCallArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionDelete provides a mock function with given fields: ctx, libName
func (_m *UniversalClient) TFunctionDelete(ctx context.Context, libName string) *redis.StatusCmd {
	ret := _m.Called(ctx, libName)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, libName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TFunctionDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionDelete'
type UniversalClient_TFunctionDelete_Call struct {
	*mock.Call
}

// TFunctionDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - libName string
func (_e *UniversalClient_Expecter) TFunctionDelete(ctx interface{}, libName interface{}) *UniversalClient_TFunctionDelete_Call {
	return &UniversalClient_TFunctionDelete_Call{Call: _e.mock.On("TFunctionDelete", ctx, libName)}
}

func (_c *UniversalClient_TFunctionDelete_Call) Run(run func(ctx context.Context, libName string)) *UniversalClient_TFunctionDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TFunctionDelete_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TFunctionDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TFunctionDelete_Call) RunAndReturn(run func(context.Context, string) *redis.StatusCmd) *UniversalClient_TFunctionDelete_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionList provides a mock function with given fields: ctx
func (_m *UniversalClient) TFunctionList(ctx context.Context) *redis.MapStringInterfaceSliceCmd {
	ret := _m.Called(ctx)

	var r0 *redis.MapStringInterfaceSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.MapStringInterfaceSliceCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.MapStringInterfaceSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TFunctionList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionList'
type UniversalClient_TFunctionList_Call struct {
	*mock.Call
}

// TFunctionList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) TFunctionList(ctx interface{}) *UniversalClient_TFunctionList_Call {
	return &UniversalClient_TFunctionList_Call{Call: _e.mock.On("TFunctionList", ctx)}
}

func (_c *UniversalClient_TFunctionList_Call) Run(run func(ctx context.Context)) *UniversalClient_TFunctionList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_TFunctionList_Call) Return(_a0 *redis.MapStringInterfaceSliceCmd) *UniversalClient_TFunctionList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TFunctionList_Call) RunAndReturn(run func(context.Context) *redis.MapStringInterfaceSliceCmd) *UniversalClient_TFunctionList_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionListArgs provides a mock function with given fields: ctx, options
func (_m *UniversalClient) TFunctionListArgs(ctx context.Context, options *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd {
	ret := _m.Called(ctx, options)

	var r0 *redis.MapStringInterfaceSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.MapStringInterfaceSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TFunctionListArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionListArgs'
type UniversalClient_TFunctionListArgs_Call struct {
	*mock.Call
}

// TFunctionListArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - options *redis.TFunctionListOptions
func (_e *UniversalClient_Expecter) TFunctionListArgs(ctx interface{}, options interface{}) *UniversalClient_TFunctionListArgs_Call {
	return &UniversalClient_TFunctionListArgs_Call{Call: _e.mock.On("TFunctionListArgs", ctx, options)}
}

func (_c *UniversalClient_TFunctionListArgs_Call) Run(run func(ctx context.Context, options *redis.TFunctionListOptions)) *UniversalClient_TFunctionListArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.TFunctionListOptions))
	})
	return _c
}

func (_c *UniversalClient_TFunctionListArgs_Call) Return(_a0 *redis.MapStringInterfaceSliceCmd) *UniversalClient_TFunctionListArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TFunctionListArgs_Call) RunAndReturn(run func(context.Context, *redis.TFunctionListOptions) *redis.MapStringInterfaceSliceCmd) *UniversalClient_TFunctionListArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionLoad provides a mock function with given fields: ctx, lib
func (_m *UniversalClient) TFunctionLoad(ctx context.Context, lib string) *redis.StatusCmd {
	ret := _m.Called(ctx, lib)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, lib)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TFunctionLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionLoad'
type UniversalClient_TFunctionLoad_Call struct {
	*mock.Call
}

// TFunctionLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - lib string
func (_e *UniversalClient_Expecter) TFunctionLoad(ctx interface{}, lib interface{}) *UniversalClient_TFunctionLoad_Call {
	return &UniversalClient_TFunctionLoad_Call{Call: _e.mock.On("TFunctionLoad", ctx, lib)}
}

func (_c *UniversalClient_TFunctionLoad_Call) Run(run func(ctx context.Context, lib string)) *UniversalClient_TFunctionLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TFunctionLoad_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TFunctionLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TFunctionLoad_Call) RunAndReturn(run func(context.Context, string) *redis.StatusCmd) *UniversalClient_TFunctionLoad_Call {
	_c.Call.Return(run)
	return _c
}

// TFunctionLoadArgs provides a mock function with given fields: ctx, lib, options
func (_m *UniversalClient) TFunctionLoadArgs(ctx context.Context, lib string, options *redis.TFunctionLoadOptions) *redis.StatusCmd {
	ret := _m.Called(ctx, lib, options)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.TFunctionLoadOptions) *redis.StatusCmd); ok {
		r0 = rf(ctx, lib, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TFunctionLoadArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TFunctionLoadArgs'
type UniversalClient_TFunctionLoadArgs_Call struct {
	*mock.Call
}

// TFunctionLoadArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - lib string
//   - options *redis.TFunctionLoadOptions
func (_e *UniversalClient_Expecter) TFunctionLoadArgs(ctx interface{}, lib interface{}, options interface{}) *UniversalClient_TFunctionLoadArgs_Call {
	return &UniversalClient_TFunctionLoadArgs_Call{Call: _e.mock.On("TFunctionLoadArgs", ctx, lib, options)}
}

func (_c *UniversalClient_TFunctionLoadArgs_Call) Run(run func(ctx context.Context, lib string, options *redis.TFunctionLoadOptions)) *UniversalClient_TFunctionLoadArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.TFunctionLoadOptions))
	})
	return _c
}

func (_c *UniversalClient_TFunctionLoadArgs_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TFunctionLoadArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TFunctionLoadArgs_Call) RunAndReturn(run func(context.Context, string, *redis.TFunctionLoadOptions) *redis.StatusCmd) *UniversalClient_TFunctionLoadArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TTL provides a mock function with given fields: ctx, key
func (_m *UniversalClient) TTL(ctx context.Context, key string) *redis.DurationCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.DurationCmd)
		}
	}

	return r0
}

// UniversalClient_TTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TTL'
type UniversalClient_TTL_Call struct {
	*mock.Call
}

// TTL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) TTL(ctx interface{}, key interface{}) *UniversalClient_TTL_Call {
	return &UniversalClient_TTL_Call{Call: _e.mock.On("TTL", ctx, key)}
}

func (_c *UniversalClient_TTL_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_TTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TTL_Call) Return(_a0 *redis.DurationCmd) *UniversalClient_TTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TTL_Call) RunAndReturn(run func(context.Context, string) *redis.DurationCmd) *UniversalClient_TTL_Call {
	_c.Call.Return(run)
	return _c
}

// Time provides a mock function with given fields: ctx
func (_m *UniversalClient) Time(ctx context.Context) *redis.TimeCmd {
	ret := _m.Called(ctx)

	var r0 *redis.TimeCmd
	if rf, ok := ret.Get(0).(func(context.Context) *redis.TimeCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.TimeCmd)
		}
	}

	return r0
}

// UniversalClient_Time_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Time'
type UniversalClient_Time_Call struct {
	*mock.Call
}

// Time is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UniversalClient_Expecter) Time(ctx interface{}) *UniversalClient_Time_Call {
	return &UniversalClient_Time_Call{Call: _e.mock.On("Time", ctx)}
}

func (_c *UniversalClient_Time_Call) Run(run func(ctx context.Context)) *UniversalClient_Time_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UniversalClient_Time_Call) Return(_a0 *redis.TimeCmd) *UniversalClient_Time_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Time_Call) RunAndReturn(run func(context.Context) *redis.TimeCmd) *UniversalClient_Time_Call {
	_c.Call.Return(run)
	return _c
}

// TopKAdd provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) TopKAdd(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TopKAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKAdd'
type UniversalClient_TopKAdd_Call struct {
	*mock.Call
}

// TopKAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) TopKAdd(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_TopKAdd_Call {
	return &UniversalClient_TopKAdd_Call{Call: _e.mock.On("TopKAdd",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_TopKAdd_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *UniversalClient_TopKAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TopKAdd_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_TopKAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TopKAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.StringSliceCmd) *UniversalClient_TopKAdd_Call {
	_c.Call.Return(run)
	return _c
}

// TopKCount provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) TopKCount(ctx context.Context, key string, elements ...interface{}) *redis.IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TopKCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKCount'
type UniversalClient_TopKCount_Call struct {
	*mock.Call
}

// TopKCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) TopKCount(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_TopKCount_Call {
	return &UniversalClient_TopKCount_Call{Call: _e.mock.On("TopKCount",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_TopKCount_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *UniversalClient_TopKCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TopKCount_Call) Return(_a0 *redis.IntSliceCmd) *UniversalClient_TopKCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TopKCount_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntSliceCmd) *UniversalClient_TopKCount_Call {
	_c.Call.Return(run)
	return _c
}

// TopKIncrBy provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) TopKIncrBy(ctx context.Context, key string, elements ...interface{}) *redis.StringSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TopKIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKIncrBy'
type UniversalClient_TopKIncrBy_Call struct {
	*mock.Call
}

// TopKIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) TopKIncrBy(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_TopKIncrBy_Call {
	return &UniversalClient_TopKIncrBy_Call{Call: _e.mock.On("TopKIncrBy",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_TopKIncrBy_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *UniversalClient_TopKIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TopKIncrBy_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_TopKIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TopKIncrBy_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.StringSliceCmd) *UniversalClient_TopKIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// TopKInfo provides a mock function with given fields: ctx, key
func (_m *UniversalClient) TopKInfo(ctx context.Context, key string) *redis.TopKInfoCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.TopKInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.TopKInfoCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.TopKInfoCmd)
		}
	}

	return r0
}

// UniversalClient_TopKInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKInfo'
type UniversalClient_TopKInfo_Call struct {
	*mock.Call
}

// TopKInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) TopKInfo(ctx interface{}, key interface{}) *UniversalClient_TopKInfo_Call {
	return &UniversalClient_TopKInfo_Call{Call: _e.mock.On("TopKInfo", ctx, key)}
}

func (_c *UniversalClient_TopKInfo_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_TopKInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TopKInfo_Call) Return(_a0 *redis.TopKInfoCmd) *UniversalClient_TopKInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TopKInfo_Call) RunAndReturn(run func(context.Context, string) *redis.TopKInfoCmd) *UniversalClient_TopKInfo_Call {
	_c.Call.Return(run)
	return _c
}

// TopKList provides a mock function with given fields: ctx, key
func (_m *UniversalClient) TopKList(ctx context.Context, key string) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TopKList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKList'
type UniversalClient_TopKList_Call struct {
	*mock.Call
}

// TopKList is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) TopKList(ctx interface{}, key interface{}) *UniversalClient_TopKList_Call {
	return &UniversalClient_TopKList_Call{Call: _e.mock.On("TopKList", ctx, key)}
}

func (_c *UniversalClient_TopKList_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_TopKList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TopKList_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_TopKList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TopKList_Call) RunAndReturn(run func(context.Context, string) *redis.StringSliceCmd) *UniversalClient_TopKList_Call {
	_c.Call.Return(run)
	return _c
}

// TopKListWithCount provides a mock function with given fields: ctx, key
func (_m *UniversalClient) TopKListWithCount(ctx context.Context, key string) *redis.MapStringIntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.MapStringIntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.MapStringIntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.MapStringIntCmd)
		}
	}

	return r0
}

// UniversalClient_TopKListWithCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKListWithCount'
type UniversalClient_TopKListWithCount_Call struct {
	*mock.Call
}

// TopKListWithCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) TopKListWithCount(ctx interface{}, key interface{}) *UniversalClient_TopKListWithCount_Call {
	return &UniversalClient_TopKListWithCount_Call{Call: _e.mock.On("TopKListWithCount", ctx, key)}
}

func (_c *UniversalClient_TopKListWithCount_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_TopKListWithCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_TopKListWithCount_Call) Return(_a0 *redis.MapStringIntCmd) *UniversalClient_TopKListWithCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TopKListWithCount_Call) RunAndReturn(run func(context.Context, string) *redis.MapStringIntCmd) *UniversalClient_TopKListWithCount_Call {
	_c.Call.Return(run)
	return _c
}

// TopKQuery provides a mock function with given fields: ctx, key, elements
func (_m *UniversalClient) TopKQuery(ctx context.Context, key string, elements ...interface{}) *redis.BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, elements...)
	ret := _m.Called(_ca...)

	var r0 *redis.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.BoolSliceCmd); ok {
		r0 = rf(ctx, key, elements...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolSliceCmd)
		}
	}

	return r0
}

// UniversalClient_TopKQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKQuery'
type UniversalClient_TopKQuery_Call struct {
	*mock.Call
}

// TopKQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - elements ...interface{}
func (_e *UniversalClient_Expecter) TopKQuery(ctx interface{}, key interface{}, elements ...interface{}) *UniversalClient_TopKQuery_Call {
	return &UniversalClient_TopKQuery_Call{Call: _e.mock.On("TopKQuery",
		append([]interface{}{ctx, key}, elements...)...)}
}

func (_c *UniversalClient_TopKQuery_Call) Run(run func(ctx context.Context, key string, elements ...interface{})) *UniversalClient_TopKQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_TopKQuery_Call) Return(_a0 *redis.BoolSliceCmd) *UniversalClient_TopKQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TopKQuery_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.BoolSliceCmd) *UniversalClient_TopKQuery_Call {
	_c.Call.Return(run)
	return _c
}

// TopKReserve provides a mock function with given fields: ctx, key, k
func (_m *UniversalClient) TopKReserve(ctx context.Context, key string, k int64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, k)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TopKReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKReserve'
type UniversalClient_TopKReserve_Call struct {
	*mock.Call
}

// TopKReserve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - k int64
func (_e *UniversalClient_Expecter) TopKReserve(ctx interface{}, key interface{}, k interface{}) *UniversalClient_TopKReserve_Call {
	return &UniversalClient_TopKReserve_Call{Call: _e.mock.On("TopKReserve", ctx, key, k)}
}

func (_c *UniversalClient_TopKReserve_Call) Run(run func(ctx context.Context, key string, k int64)) *UniversalClient_TopKReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_TopKReserve_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TopKReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TopKReserve_Call) RunAndReturn(run func(context.Context, string, int64) *redis.StatusCmd) *UniversalClient_TopKReserve_Call {
	_c.Call.Return(run)
	return _c
}

// TopKReserveWithOptions provides a mock function with given fields: ctx, key, k, width, depth, decay
func (_m *UniversalClient) TopKReserveWithOptions(ctx context.Context, key string, k int64, width int64, depth int64, decay float64) *redis.StatusCmd {
	ret := _m.Called(ctx, key, k, width, depth, decay)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64, int64, float64) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, k, width, depth, decay)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_TopKReserveWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopKReserveWithOptions'
type UniversalClient_TopKReserveWithOptions_Call struct {
	*mock.Call
}

// TopKReserveWithOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - k int64
//   - width int64
//   - depth int64
//   - decay float64
func (_e *UniversalClient_Expecter) TopKReserveWithOptions(ctx interface{}, key interface{}, k interface{}, width interface{}, depth interface{}, decay interface{}) *UniversalClient_TopKReserveWithOptions_Call {
	return &UniversalClient_TopKReserveWithOptions_Call{Call: _e.mock.On("TopKReserveWithOptions", ctx, key, k, width, depth, decay)}
}

func (_c *UniversalClient_TopKReserveWithOptions_Call) Run(run func(ctx context.Context, key string, k int64, width int64, depth int64, decay float64)) *UniversalClient_TopKReserveWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64), args[4].(int64), args[5].(float64))
	})
	return _c
}

func (_c *UniversalClient_TopKReserveWithOptions_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_TopKReserveWithOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TopKReserveWithOptions_Call) RunAndReturn(run func(context.Context, string, int64, int64, int64, float64) *redis.StatusCmd) *UniversalClient_TopKReserveWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// Touch provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) Touch(ctx context.Context, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_Touch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Touch'
type UniversalClient_Touch_Call struct {
	*mock.Call
}

// Touch is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) Touch(ctx interface{}, keys ...interface{}) *UniversalClient_Touch_Call {
	return &UniversalClient_Touch_Call{Call: _e.mock.On("Touch",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_Touch_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_Touch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_Touch_Call) Return(_a0 *redis.IntCmd) *UniversalClient_Touch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Touch_Call) RunAndReturn(run func(context.Context, ...string) *redis.IntCmd) *UniversalClient_Touch_Call {
	_c.Call.Return(run)
	return _c
}

// TxPipeline provides a mock function with given fields:
func (_m *UniversalClient) TxPipeline() redis.Pipeliner {
	ret := _m.Called()

	var r0 redis.Pipeliner
	if rf, ok := ret.Get(0).(func() redis.Pipeliner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.Pipeliner)
		}
	}

	return r0
}

// UniversalClient_TxPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxPipeline'
type UniversalClient_TxPipeline_Call struct {
	*mock.Call
}

// TxPipeline is a helper method to define mock.On call
func (_e *UniversalClient_Expecter) TxPipeline() *UniversalClient_TxPipeline_Call {
	return &UniversalClient_TxPipeline_Call{Call: _e.mock.On("TxPipeline")}
}

func (_c *UniversalClient_TxPipeline_Call) Run(run func()) *UniversalClient_TxPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UniversalClient_TxPipeline_Call) Return(_a0 redis.Pipeliner) *UniversalClient_TxPipeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_TxPipeline_Call) RunAndReturn(run func() redis.Pipeliner) *UniversalClient_TxPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// TxPipelined provides a mock function with given fields: ctx, fn
func (_m *UniversalClient) TxPipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	ret := _m.Called(ctx, fn)

	var r0 []redis.Cmder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)); ok {
		return rf(ctx, fn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(redis.Pipeliner) error) []redis.Cmder); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redis.Cmder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(redis.Pipeliner) error) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UniversalClient_TxPipelined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxPipelined'
type UniversalClient_TxPipelined_Call struct {
	*mock.Call
}

// TxPipelined is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(redis.Pipeliner) error
func (_e *UniversalClient_Expecter) TxPipelined(ctx interface{}, fn interface{}) *UniversalClient_TxPipelined_Call {
	return &UniversalClient_TxPipelined_Call{Call: _e.mock.On("TxPipelined", ctx, fn)}
}

func (_c *UniversalClient_TxPipelined_Call) Run(run func(ctx context.Context, fn func(redis.Pipeliner) error)) *UniversalClient_TxPipelined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(redis.Pipeliner) error))
	})
	return _c
}

func (_c *UniversalClient_TxPipelined_Call) Return(_a0 []redis.Cmder, _a1 error) *UniversalClient_TxPipelined_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UniversalClient_TxPipelined_Call) RunAndReturn(run func(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)) *UniversalClient_TxPipelined_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields: ctx, key
func (_m *UniversalClient) Type(ctx context.Context, key string) *redis.StatusCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type UniversalClient_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) Type(ctx interface{}, key interface{}) *UniversalClient_Type_Call {
	return &UniversalClient_Type_Call{Call: _e.mock.On("Type", ctx, key)}
}

func (_c *UniversalClient_Type_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_Type_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Type_Call) RunAndReturn(run func(context.Context, string) *redis.StatusCmd) *UniversalClient_Type_Call {
	_c.Call.Return(run)
	return _c
}

// Unlink provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) Unlink(ctx context.Context, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_Unlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlink'
type UniversalClient_Unlink_Call struct {
	*mock.Call
}

// Unlink is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) Unlink(ctx interface{}, keys ...interface{}) *UniversalClient_Unlink_Call {
	return &UniversalClient_Unlink_Call{Call: _e.mock.On("Unlink",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_Unlink_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_Unlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_Unlink_Call) Return(_a0 *redis.IntCmd) *UniversalClient_Unlink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Unlink_Call) RunAndReturn(run func(context.Context, ...string) *redis.IntCmd) *UniversalClient_Unlink_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, fn, keys
func (_m *UniversalClient) Watch(ctx context.Context, fn func(*redis.Tx) error, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fn)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*redis.Tx) error, ...string) error); ok {
		r0 = rf(ctx, fn, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UniversalClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type UniversalClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(*redis.Tx) error
//   - keys ...string
func (_e *UniversalClient_Expecter) Watch(ctx interface{}, fn interface{}, keys ...interface{}) *UniversalClient_Watch_Call {
	return &UniversalClient_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, fn}, keys...)...)}
}

func (_c *UniversalClient_Watch_Call) Run(run func(ctx context.Context, fn func(*redis.Tx) error, keys ...string)) *UniversalClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(func(*redis.Tx) error), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_Watch_Call) Return(_a0 error) *UniversalClient_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_Watch_Call) RunAndReturn(run func(context.Context, func(*redis.Tx) error, ...string) error) *UniversalClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// XAck provides a mock function with given fields: ctx, stream, group, ids
func (_m *UniversalClient) XAck(ctx context.Context, stream string, group string, ids ...string) *redis.IntCmd {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stream, group)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, stream, group, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XAck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAck'
type UniversalClient_XAck_Call struct {
	*mock.Call
}

// XAck is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - ids ...string
func (_e *UniversalClient_Expecter) XAck(ctx interface{}, stream interface{}, group interface{}, ids ...interface{}) *UniversalClient_XAck_Call {
	return &UniversalClient_XAck_Call{Call: _e.mock.On("XAck",
		append([]interface{}{ctx, stream, group}, ids...)...)}
}

func (_c *UniversalClient_XAck_Call) Run(run func(ctx context.Context, stream string, group string, ids ...string)) *UniversalClient_XAck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_XAck_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XAck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XAck_Call) RunAndReturn(run func(context.Context, string, string, ...string) *redis.IntCmd) *UniversalClient_XAck_Call {
	_c.Call.Return(run)
	return _c
}

// XAdd provides a mock function with given fields: ctx, a
func (_m *UniversalClient) XAdd(ctx context.Context, a *redis.XAddArgs) *redis.StringCmd {
	ret := _m.Called(ctx, a)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.XAddArgs) *redis.StringCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// UniversalClient_XAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAdd'
type UniversalClient_XAdd_Call struct {
	*mock.Call
}

// XAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XAddArgs
func (_e *UniversalClient_Expecter) XAdd(ctx interface{}, a interface{}) *UniversalClient_XAdd_Call {
	return &UniversalClient_XAdd_Call{Call: _e.mock.On("XAdd", ctx, a)}
}

func (_c *UniversalClient_XAdd_Call) Run(run func(ctx context.Context, a *redis.XAddArgs)) *UniversalClient_XAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.XAddArgs))
	})
	return _c
}

func (_c *UniversalClient_XAdd_Call) Return(_a0 *redis.StringCmd) *UniversalClient_XAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XAdd_Call) RunAndReturn(run func(context.Context, *redis.XAddArgs) *redis.StringCmd) *UniversalClient_XAdd_Call {
	_c.Call.Return(run)
	return _c
}

// XAutoClaim provides a mock function with given fields: ctx, a
func (_m *UniversalClient) XAutoClaim(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimCmd {
	ret := _m.Called(ctx, a)

	var r0 *redis.XAutoClaimCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.XAutoClaimArgs) *redis.XAutoClaimCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XAutoClaimCmd)
		}
	}

	return r0
}

// UniversalClient_XAutoClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAutoClaim'
type UniversalClient_XAutoClaim_Call struct {
	*mock.Call
}

// XAutoClaim is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XAutoClaimArgs
func (_e *UniversalClient_Expecter) XAutoClaim(ctx interface{}, a interface{}) *UniversalClient_XAutoClaim_Call {
	return &UniversalClient_XAutoClaim_Call{Call: _e.mock.On("XAutoClaim", ctx, a)}
}

func (_c *UniversalClient_XAutoClaim_Call) Run(run func(ctx context.Context, a *redis.XAutoClaimArgs)) *UniversalClient_XAutoClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.XAutoClaimArgs))
	})
	return _c
}

func (_c *UniversalClient_XAutoClaim_Call) Return(_a0 *redis.XAutoClaimCmd) *UniversalClient_XAutoClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XAutoClaim_Call) RunAndReturn(run func(context.Context, *redis.XAutoClaimArgs) *redis.XAutoClaimCmd) *UniversalClient_XAutoClaim_Call {
	_c.Call.Return(run)
	return _c
}

// XAutoClaimJustID provides a mock function with given fields: ctx, a
func (_m *UniversalClient) XAutoClaimJustID(ctx context.Context, a *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd {
	ret := _m.Called(ctx, a)

	var r0 *redis.XAutoClaimJustIDCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XAutoClaimJustIDCmd)
		}
	}

	return r0
}

// UniversalClient_XAutoClaimJustID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAutoClaimJustID'
type UniversalClient_XAutoClaimJustID_Call struct {
	*mock.Call
}

// XAutoClaimJustID is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XAutoClaimArgs
func (_e *UniversalClient_Expecter) XAutoClaimJustID(ctx interface{}, a interface{}) *UniversalClient_XAutoClaimJustID_Call {
	return &UniversalClient_XAutoClaimJustID_Call{Call: _e.mock.On("XAutoClaimJustID", ctx, a)}
}

func (_c *UniversalClient_XAutoClaimJustID_Call) Run(run func(ctx context.Context, a *redis.XAutoClaimArgs)) *UniversalClient_XAutoClaimJustID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.XAutoClaimArgs))
	})
	return _c
}

func (_c *UniversalClient_XAutoClaimJustID_Call) Return(_a0 *redis.XAutoClaimJustIDCmd) *UniversalClient_XAutoClaimJustID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XAutoClaimJustID_Call) RunAndReturn(run func(context.Context, *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd) *UniversalClient_XAutoClaimJustID_Call {
	_c.Call.Return(run)
	return _c
}

// XClaim provides a mock function with given fields: ctx, a
func (_m *UniversalClient) XClaim(ctx context.Context, a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	ret := _m.Called(ctx, a)

	var r0 *redis.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.XClaimArgs) *redis.XMessageSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XMessageSliceCmd)
		}
	}

	return r0
}

// UniversalClient_XClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XClaim'
type UniversalClient_XClaim_Call struct {
	*mock.Call
}

// XClaim is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XClaimArgs
func (_e *UniversalClient_Expecter) XClaim(ctx interface{}, a interface{}) *UniversalClient_XClaim_Call {
	return &UniversalClient_XClaim_Call{Call: _e.mock.On("XClaim", ctx, a)}
}

func (_c *UniversalClient_XClaim_Call) Run(run func(ctx context.Context, a *redis.XClaimArgs)) *UniversalClient_XClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.XClaimArgs))
	})
	return _c
}

func (_c *UniversalClient_XClaim_Call) Return(_a0 *redis.XMessageSliceCmd) *UniversalClient_XClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XClaim_Call) RunAndReturn(run func(context.Context, *redis.XClaimArgs) *redis.XMessageSliceCmd) *UniversalClient_XClaim_Call {
	_c.Call.Return(run)
	return _c
}

// XClaimJustID provides a mock function with given fields: ctx, a
func (_m *UniversalClient) XClaimJustID(ctx context.Context, a *redis.XClaimArgs) *redis.StringSliceCmd {
	ret := _m.Called(ctx, a)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.XClaimArgs) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_XClaimJustID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XClaimJustID'
type UniversalClient_XClaimJustID_Call struct {
	*mock.Call
}

// XClaimJustID is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XClaimArgs
func (_e *UniversalClient_Expecter) XClaimJustID(ctx interface{}, a interface{}) *UniversalClient_XClaimJustID_Call {
	return &UniversalClient_XClaimJustID_Call{Call: _e.mock.On("XClaimJustID", ctx, a)}
}

func (_c *UniversalClient_XClaimJustID_Call) Run(run func(ctx context.Context, a *redis.XClaimArgs)) *UniversalClient_XClaimJustID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.XClaimArgs))
	})
	return _c
}

func (_c *UniversalClient_XClaimJustID_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_XClaimJustID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XClaimJustID_Call) RunAndReturn(run func(context.Context, *redis.XClaimArgs) *redis.StringSliceCmd) *UniversalClient_XClaimJustID_Call {
	_c.Call.Return(run)
	return _c
}

// XDel provides a mock function with given fields: ctx, stream, ids
func (_m *UniversalClient) XDel(ctx context.Context, stream string, ids ...string) *redis.IntCmd {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stream)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, stream, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XDel'
type UniversalClient_XDel_Call struct {
	*mock.Call
}

// XDel is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - ids ...string
func (_e *UniversalClient_Expecter) XDel(ctx interface{}, stream interface{}, ids ...interface{}) *UniversalClient_XDel_Call {
	return &UniversalClient_XDel_Call{Call: _e.mock.On("XDel",
		append([]interface{}{ctx, stream}, ids...)...)}
}

func (_c *UniversalClient_XDel_Call) Run(run func(ctx context.Context, stream string, ids ...string)) *UniversalClient_XDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_XDel_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XDel_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.IntCmd) *UniversalClient_XDel_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupCreate provides a mock function with given fields: ctx, stream, group, start
func (_m *UniversalClient) XGroupCreate(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_XGroupCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreate'
type UniversalClient_XGroupCreate_Call struct {
	*mock.Call
}

// XGroupCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - start string
func (_e *UniversalClient_Expecter) XGroupCreate(ctx interface{}, stream interface{}, group interface{}, start interface{}) *UniversalClient_XGroupCreate_Call {
	return &UniversalClient_XGroupCreate_Call{Call: _e.mock.On("XGroupCreate", ctx, stream, group, start)}
}

func (_c *UniversalClient_XGroupCreate_Call) Run(run func(ctx context.Context, stream string, group string, start string)) *UniversalClient_XGroupCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_XGroupCreate_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_XGroupCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XGroupCreate_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.StatusCmd) *UniversalClient_XGroupCreate_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupCreateConsumer provides a mock function with given fields: ctx, stream, group, consumer
func (_m *UniversalClient) XGroupCreateConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	ret := _m.Called(ctx, stream, group, consumer)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, stream, group, consumer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XGroupCreateConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreateConsumer'
type UniversalClient_XGroupCreateConsumer_Call struct {
	*mock.Call
}

// XGroupCreateConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - consumer string
func (_e *UniversalClient_Expecter) XGroupCreateConsumer(ctx interface{}, stream interface{}, group interface{}, consumer interface{}) *UniversalClient_XGroupCreateConsumer_Call {
	return &UniversalClient_XGroupCreateConsumer_Call{Call: _e.mock.On("XGroupCreateConsumer", ctx, stream, group, consumer)}
}

func (_c *UniversalClient_XGroupCreateConsumer_Call) Run(run func(ctx context.Context, stream string, group string, consumer string)) *UniversalClient_XGroupCreateConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_XGroupCreateConsumer_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XGroupCreateConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XGroupCreateConsumer_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.IntCmd) *UniversalClient_XGroupCreateConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupCreateMkStream provides a mock function with given fields: ctx, stream, group, start
func (_m *UniversalClient) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_XGroupCreateMkStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreateMkStream'
type UniversalClient_XGroupCreateMkStream_Call struct {
	*mock.Call
}

// XGroupCreateMkStream is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - start string
func (_e *UniversalClient_Expecter) XGroupCreateMkStream(ctx interface{}, stream interface{}, group interface{}, start interface{}) *UniversalClient_XGroupCreateMkStream_Call {
	return &UniversalClient_XGroupCreateMkStream_Call{Call: _e.mock.On("XGroupCreateMkStream", ctx, stream, group, start)}
}

func (_c *UniversalClient_XGroupCreateMkStream_Call) Run(run func(ctx context.Context, stream string, group string, start string)) *UniversalClient_XGroupCreateMkStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_XGroupCreateMkStream_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_XGroupCreateMkStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XGroupCreateMkStream_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.StatusCmd) *UniversalClient_XGroupCreateMkStream_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupDelConsumer provides a mock function with given fields: ctx, stream, group, consumer
func (_m *UniversalClient) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) *redis.IntCmd {
	ret := _m.Called(ctx, stream, group, consumer)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, stream, group, consumer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XGroupDelConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupDelConsumer'
type UniversalClient_XGroupDelConsumer_Call struct {
	*mock.Call
}

// XGroupDelConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - consumer string
func (_e *UniversalClient_Expecter) XGroupDelConsumer(ctx interface{}, stream interface{}, group interface{}, consumer interface{}) *UniversalClient_XGroupDelConsumer_Call {
	return &UniversalClient_XGroupDelConsumer_Call{Call: _e.mock.On("XGroupDelConsumer", ctx, stream, group, consumer)}
}

func (_c *UniversalClient_XGroupDelConsumer_Call) Run(run func(ctx context.Context, stream string, group string, consumer string)) *UniversalClient_XGroupDelConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_XGroupDelConsumer_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XGroupDelConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XGroupDelConsumer_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.IntCmd) *UniversalClient_XGroupDelConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupDestroy provides a mock function with given fields: ctx, stream, group
func (_m *UniversalClient) XGroupDestroy(ctx context.Context, stream string, group string) *redis.IntCmd {
	ret := _m.Called(ctx, stream, group)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, stream, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XGroupDestroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupDestroy'
type UniversalClient_XGroupDestroy_Call struct {
	*mock.Call
}

// XGroupDestroy is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
func (_e *UniversalClient_Expecter) XGroupDestroy(ctx interface{}, stream interface{}, group interface{}) *UniversalClient_XGroupDestroy_Call {
	return &UniversalClient_XGroupDestroy_Call{Call: _e.mock.On("XGroupDestroy", ctx, stream, group)}
}

func (_c *UniversalClient_XGroupDestroy_Call) Run(run func(ctx context.Context, stream string, group string)) *UniversalClient_XGroupDestroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_XGroupDestroy_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XGroupDestroy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XGroupDestroy_Call) RunAndReturn(run func(context.Context, string, string) *redis.IntCmd) *UniversalClient_XGroupDestroy_Call {
	_c.Call.Return(run)
	return _c
}

// XGroupSetID provides a mock function with given fields: ctx, stream, group, start
func (_m *UniversalClient) XGroupSetID(ctx context.Context, stream string, group string, start string) *redis.StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

// UniversalClient_XGroupSetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupSetID'
type UniversalClient_XGroupSetID_Call struct {
	*mock.Call
}

// XGroupSetID is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
//   - start string
func (_e *UniversalClient_Expecter) XGroupSetID(ctx interface{}, stream interface{}, group interface{}, start interface{}) *UniversalClient_XGroupSetID_Call {
	return &UniversalClient_XGroupSetID_Call{Call: _e.mock.On("XGroupSetID", ctx, stream, group, start)}
}

func (_c *UniversalClient_XGroupSetID_Call) Run(run func(ctx context.Context, stream string, group string, start string)) *UniversalClient_XGroupSetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_XGroupSetID_Call) Return(_a0 *redis.StatusCmd) *UniversalClient_XGroupSetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XGroupSetID_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.StatusCmd) *UniversalClient_XGroupSetID_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoConsumers provides a mock function with given fields: ctx, key, group
func (_m *UniversalClient) XInfoConsumers(ctx context.Context, key string, group string) *redis.XInfoConsumersCmd {
	ret := _m.Called(ctx, key, group)

	var r0 *redis.XInfoConsumersCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.XInfoConsumersCmd); ok {
		r0 = rf(ctx, key, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XInfoConsumersCmd)
		}
	}

	return r0
}

// UniversalClient_XInfoConsumers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoConsumers'
type UniversalClient_XInfoConsumers_Call struct {
	*mock.Call
}

// XInfoConsumers is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - group string
func (_e *UniversalClient_Expecter) XInfoConsumers(ctx interface{}, key interface{}, group interface{}) *UniversalClient_XInfoConsumers_Call {
	return &UniversalClient_XInfoConsumers_Call{Call: _e.mock.On("XInfoConsumers", ctx, key, group)}
}

func (_c *UniversalClient_XInfoConsumers_Call) Run(run func(ctx context.Context, key string, group string)) *UniversalClient_XInfoConsumers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_XInfoConsumers_Call) Return(_a0 *redis.XInfoConsumersCmd) *UniversalClient_XInfoConsumers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XInfoConsumers_Call) RunAndReturn(run func(context.Context, string, string) *redis.XInfoConsumersCmd) *UniversalClient_XInfoConsumers_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoGroups provides a mock function with given fields: ctx, key
func (_m *UniversalClient) XInfoGroups(ctx context.Context, key string) *redis.XInfoGroupsCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.XInfoGroupsCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.XInfoGroupsCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XInfoGroupsCmd)
		}
	}

	return r0
}

// UniversalClient_XInfoGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoGroups'
type UniversalClient_XInfoGroups_Call struct {
	*mock.Call
}

// XInfoGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) XInfoGroups(ctx interface{}, key interface{}) *UniversalClient_XInfoGroups_Call {
	return &UniversalClient_XInfoGroups_Call{Call: _e.mock.On("XInfoGroups", ctx, key)}
}

func (_c *UniversalClient_XInfoGroups_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_XInfoGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_XInfoGroups_Call) Return(_a0 *redis.XInfoGroupsCmd) *UniversalClient_XInfoGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XInfoGroups_Call) RunAndReturn(run func(context.Context, string) *redis.XInfoGroupsCmd) *UniversalClient_XInfoGroups_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoStream provides a mock function with given fields: ctx, key
func (_m *UniversalClient) XInfoStream(ctx context.Context, key string) *redis.XInfoStreamCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.XInfoStreamCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.XInfoStreamCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XInfoStreamCmd)
		}
	}

	return r0
}

// UniversalClient_XInfoStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoStream'
type UniversalClient_XInfoStream_Call struct {
	*mock.Call
}

// XInfoStream is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) XInfoStream(ctx interface{}, key interface{}) *UniversalClient_XInfoStream_Call {
	return &UniversalClient_XInfoStream_Call{Call: _e.mock.On("XInfoStream", ctx, key)}
}

func (_c *UniversalClient_XInfoStream_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_XInfoStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_XInfoStream_Call) Return(_a0 *redis.XInfoStreamCmd) *UniversalClient_XInfoStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XInfoStream_Call) RunAndReturn(run func(context.Context, string) *redis.XInfoStreamCmd) *UniversalClient_XInfoStream_Call {
	_c.Call.Return(run)
	return _c
}

// XInfoStreamFull provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) XInfoStreamFull(ctx context.Context, key string, count int) *redis.XInfoStreamFullCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *redis.XInfoStreamFullCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *redis.XInfoStreamFullCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XInfoStreamFullCmd)
		}
	}

	return r0
}

// UniversalClient_XInfoStreamFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XInfoStreamFull'
type UniversalClient_XInfoStreamFull_Call struct {
	*mock.Call
}

// XInfoStreamFull is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *UniversalClient_Expecter) XInfoStreamFull(ctx interface{}, key interface{}, count interface{}) *UniversalClient_XInfoStreamFull_Call {
	return &UniversalClient_XInfoStreamFull_Call{Call: _e.mock.On("XInfoStreamFull", ctx, key, count)}
}

func (_c *UniversalClient_XInfoStreamFull_Call) Run(run func(ctx context.Context, key string, count int)) *UniversalClient_XInfoStreamFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_XInfoStreamFull_Call) Return(_a0 *redis.XInfoStreamFullCmd) *UniversalClient_XInfoStreamFull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XInfoStreamFull_Call) RunAndReturn(run func(context.Context, string, int) *redis.XInfoStreamFullCmd) *UniversalClient_XInfoStreamFull_Call {
	_c.Call.Return(run)
	return _c
}

// XLen provides a mock function with given fields: ctx, stream
func (_m *UniversalClient) XLen(ctx context.Context, stream string) *redis.IntCmd {
	ret := _m.Called(ctx, stream)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XLen'
type UniversalClient_XLen_Call struct {
	*mock.Call
}

// XLen is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
func (_e *UniversalClient_Expecter) XLen(ctx interface{}, stream interface{}) *UniversalClient_XLen_Call {
	return &UniversalClient_XLen_Call{Call: _e.mock.On("XLen", ctx, stream)}
}

func (_c *UniversalClient_XLen_Call) Run(run func(ctx context.Context, stream string)) *UniversalClient_XLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_XLen_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XLen_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_XLen_Call {
	_c.Call.Return(run)
	return _c
}

// XPending provides a mock function with given fields: ctx, stream, group
func (_m *UniversalClient) XPending(ctx context.Context, stream string, group string) *redis.XPendingCmd {
	ret := _m.Called(ctx, stream, group)

	var r0 *redis.XPendingCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.XPendingCmd); ok {
		r0 = rf(ctx, stream, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XPendingCmd)
		}
	}

	return r0
}

// UniversalClient_XPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XPending'
type UniversalClient_XPending_Call struct {
	*mock.Call
}

// XPending is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - group string
func (_e *UniversalClient_Expecter) XPending(ctx interface{}, stream interface{}, group interface{}) *UniversalClient_XPending_Call {
	return &UniversalClient_XPending_Call{Call: _e.mock.On("XPending", ctx, stream, group)}
}

func (_c *UniversalClient_XPending_Call) Run(run func(ctx context.Context, stream string, group string)) *UniversalClient_XPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_XPending_Call) Return(_a0 *redis.XPendingCmd) *UniversalClient_XPending_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XPending_Call) RunAndReturn(run func(context.Context, string, string) *redis.XPendingCmd) *UniversalClient_XPending_Call {
	_c.Call.Return(run)
	return _c
}

// XPendingExt provides a mock function with given fields: ctx, a
func (_m *UniversalClient) XPendingExt(ctx context.Context, a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	ret := _m.Called(ctx, a)

	var r0 *redis.XPendingExtCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.XPendingExtArgs) *redis.XPendingExtCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XPendingExtCmd)
		}
	}

	return r0
}

// UniversalClient_XPendingExt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XPendingExt'
type UniversalClient_XPendingExt_Call struct {
	*mock.Call
}

// XPendingExt is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XPendingExtArgs
func (_e *UniversalClient_Expecter) XPendingExt(ctx interface{}, a interface{}) *UniversalClient_XPendingExt_Call {
	return &UniversalClient_XPendingExt_Call{Call: _e.mock.On("XPendingExt", ctx, a)}
}

func (_c *UniversalClient_XPendingExt_Call) Run(run func(ctx context.Context, a *redis.XPendingExtArgs)) *UniversalClient_XPendingExt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.XPendingExtArgs))
	})
	return _c
}

func (_c *UniversalClient_XPendingExt_Call) Return(_a0 *redis.XPendingExtCmd) *UniversalClient_XPendingExt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XPendingExt_Call) RunAndReturn(run func(context.Context, *redis.XPendingExtArgs) *redis.XPendingExtCmd) *UniversalClient_XPendingExt_Call {
	_c.Call.Return(run)
	return _c
}

// XRange provides a mock function with given fields: ctx, stream, start, stop
func (_m *UniversalClient) XRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop)

	var r0 *redis.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XMessageSliceCmd)
		}
	}

	return r0
}

// UniversalClient_XRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRange'
type UniversalClient_XRange_Call struct {
	*mock.Call
}

// XRange is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
func (_e *UniversalClient_Expecter) XRange(ctx interface{}, stream interface{}, start interface{}, stop interface{}) *UniversalClient_XRange_Call {
	return &UniversalClient_XRange_Call{Call: _e.mock.On("XRange", ctx, stream, start, stop)}
}

func (_c *UniversalClient_XRange_Call) Run(run func(ctx context.Context, stream string, start string, stop string)) *UniversalClient_XRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_XRange_Call) Return(_a0 *redis.XMessageSliceCmd) *UniversalClient_XRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XRange_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.XMessageSliceCmd) *UniversalClient_XRange_Call {
	_c.Call.Return(run)
	return _c
}

// XRangeN provides a mock function with given fields: ctx, stream, start, stop, count
func (_m *UniversalClient) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop, count)

	var r0 *redis.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *redis.XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XMessageSliceCmd)
		}
	}

	return r0
}

// UniversalClient_XRangeN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRangeN'
type UniversalClient_XRangeN_Call struct {
	*mock.Call
}

// XRangeN is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
//   - count int64
func (_e *UniversalClient_Expecter) XRangeN(ctx interface{}, stream interface{}, start interface{}, stop interface{}, count interface{}) *UniversalClient_XRangeN_Call {
	return &UniversalClient_XRangeN_Call{Call: _e.mock.On("XRangeN", ctx, stream, start, stop, count)}
}

func (_c *UniversalClient_XRangeN_Call) Run(run func(ctx context.Context, stream string, start string, stop string, count int64)) *UniversalClient_XRangeN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *UniversalClient_XRangeN_Call) Return(_a0 *redis.XMessageSliceCmd) *UniversalClient_XRangeN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XRangeN_Call) RunAndReturn(run func(context.Context, string, string, string, int64) *redis.XMessageSliceCmd) *UniversalClient_XRangeN_Call {
	_c.Call.Return(run)
	return _c
}

// XRead provides a mock function with given fields: ctx, a
func (_m *UniversalClient) XRead(ctx context.Context, a *redis.XReadArgs) *redis.XStreamSliceCmd {
	ret := _m.Called(ctx, a)

	var r0 *redis.XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.XReadArgs) *redis.XStreamSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XStreamSliceCmd)
		}
	}

	return r0
}

// UniversalClient_XRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRead'
type UniversalClient_XRead_Call struct {
	*mock.Call
}

// XRead is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XReadArgs
func (_e *UniversalClient_Expecter) XRead(ctx interface{}, a interface{}) *UniversalClient_XRead_Call {
	return &UniversalClient_XRead_Call{Call: _e.mock.On("XRead", ctx, a)}
}

func (_c *UniversalClient_XRead_Call) Run(run func(ctx context.Context, a *redis.XReadArgs)) *UniversalClient_XRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.XReadArgs))
	})
	return _c
}

func (_c *UniversalClient_XRead_Call) Return(_a0 *redis.XStreamSliceCmd) *UniversalClient_XRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XRead_Call) RunAndReturn(run func(context.Context, *redis.XReadArgs) *redis.XStreamSliceCmd) *UniversalClient_XRead_Call {
	_c.Call.Return(run)
	return _c
}

// XReadGroup provides a mock function with given fields: ctx, a
func (_m *UniversalClient) XReadGroup(ctx context.Context, a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	ret := _m.Called(ctx, a)

	var r0 *redis.XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.XReadGroupArgs) *redis.XStreamSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XStreamSliceCmd)
		}
	}

	return r0
}

// UniversalClient_XReadGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XReadGroup'
type UniversalClient_XReadGroup_Call struct {
	*mock.Call
}

// XReadGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - a *redis.XReadGroupArgs
func (_e *UniversalClient_Expecter) XReadGroup(ctx interface{}, a interface{}) *UniversalClient_XReadGroup_Call {
	return &UniversalClient_XReadGroup_Call{Call: _e.mock.On("XReadGroup", ctx, a)}
}

func (_c *UniversalClient_XReadGroup_Call) Run(run func(ctx context.Context, a *redis.XReadGroupArgs)) *UniversalClient_XReadGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.XReadGroupArgs))
	})
	return _c
}

func (_c *UniversalClient_XReadGroup_Call) Return(_a0 *redis.XStreamSliceCmd) *UniversalClient_XReadGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XReadGroup_Call) RunAndReturn(run func(context.Context, *redis.XReadGroupArgs) *redis.XStreamSliceCmd) *UniversalClient_XReadGroup_Call {
	_c.Call.Return(run)
	return _c
}

// XReadStreams provides a mock function with given fields: ctx, streams
func (_m *UniversalClient) XReadStreams(ctx context.Context, streams ...string) *redis.XStreamSliceCmd {
	_va := make([]interface{}, len(streams))
	for _i := range streams {
		_va[_i] = streams[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.XStreamSliceCmd); ok {
		r0 = rf(ctx, streams...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XStreamSliceCmd)
		}
	}

	return r0
}

// UniversalClient_XReadStreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XReadStreams'
type UniversalClient_XReadStreams_Call struct {
	*mock.Call
}

// XReadStreams is a helper method to define mock.On call
//   - ctx context.Context
//   - streams ...string
func (_e *UniversalClient_Expecter) XReadStreams(ctx interface{}, streams ...interface{}) *UniversalClient_XReadStreams_Call {
	return &UniversalClient_XReadStreams_Call{Call: _e.mock.On("XReadStreams",
		append([]interface{}{ctx}, streams...)...)}
}

func (_c *UniversalClient_XReadStreams_Call) Run(run func(ctx context.Context, streams ...string)) *UniversalClient_XReadStreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_XReadStreams_Call) Return(_a0 *redis.XStreamSliceCmd) *UniversalClient_XReadStreams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XReadStreams_Call) RunAndReturn(run func(context.Context, ...string) *redis.XStreamSliceCmd) *UniversalClient_XReadStreams_Call {
	_c.Call.Return(run)
	return _c
}

// XRevRange provides a mock function with given fields: ctx, stream, start, stop
func (_m *UniversalClient) XRevRange(ctx context.Context, stream string, start string, stop string) *redis.XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop)

	var r0 *redis.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XMessageSliceCmd)
		}
	}

	return r0
}

// UniversalClient_XRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRevRange'
type UniversalClient_XRevRange_Call struct {
	*mock.Call
}

// XRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
func (_e *UniversalClient_Expecter) XRevRange(ctx interface{}, stream interface{}, start interface{}, stop interface{}) *UniversalClient_XRevRange_Call {
	return &UniversalClient_XRevRange_Call{Call: _e.mock.On("XRevRange", ctx, stream, start, stop)}
}

func (_c *UniversalClient_XRevRange_Call) Run(run func(ctx context.Context, stream string, start string, stop string)) *UniversalClient_XRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_XRevRange_Call) Return(_a0 *redis.XMessageSliceCmd) *UniversalClient_XRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XRevRange_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.XMessageSliceCmd) *UniversalClient_XRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// XRevRangeN provides a mock function with given fields: ctx, stream, start, stop, count
func (_m *UniversalClient) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) *redis.XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop, count)

	var r0 *redis.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *redis.XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.XMessageSliceCmd)
		}
	}

	return r0
}

// UniversalClient_XRevRangeN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XRevRangeN'
type UniversalClient_XRevRangeN_Call struct {
	*mock.Call
}

// XRevRangeN is a helper method to define mock.On call
//   - ctx context.Context
//   - stream string
//   - start string
//   - stop string
//   - count int64
func (_e *UniversalClient_Expecter) XRevRangeN(ctx interface{}, stream interface{}, start interface{}, stop interface{}, count interface{}) *UniversalClient_XRevRangeN_Call {
	return &UniversalClient_XRevRangeN_Call{Call: _e.mock.On("XRevRangeN", ctx, stream, start, stop, count)}
}

func (_c *UniversalClient_XRevRangeN_Call) Run(run func(ctx context.Context, stream string, start string, stop string, count int64)) *UniversalClient_XRevRangeN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *UniversalClient_XRevRangeN_Call) Return(_a0 *redis.XMessageSliceCmd) *UniversalClient_XRevRangeN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XRevRangeN_Call) RunAndReturn(run func(context.Context, string, string, string, int64) *redis.XMessageSliceCmd) *UniversalClient_XRevRangeN_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMaxLen provides a mock function with given fields: ctx, key, maxLen
func (_m *UniversalClient) XTrimMaxLen(ctx context.Context, key string, maxLen int64) *redis.IntCmd {
	ret := _m.Called(ctx, key, maxLen)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, key, maxLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XTrimMaxLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMaxLen'
type UniversalClient_XTrimMaxLen_Call struct {
	*mock.Call
}

// XTrimMaxLen is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - maxLen int64
func (_e *UniversalClient_Expecter) XTrimMaxLen(ctx interface{}, key interface{}, maxLen interface{}) *UniversalClient_XTrimMaxLen_Call {
	return &UniversalClient_XTrimMaxLen_Call{Call: _e.mock.On("XTrimMaxLen", ctx, key, maxLen)}
}

func (_c *UniversalClient_XTrimMaxLen_Call) Run(run func(ctx context.Context, key string, maxLen int64)) *UniversalClient_XTrimMaxLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *UniversalClient_XTrimMaxLen_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XTrimMaxLen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XTrimMaxLen_Call) RunAndReturn(run func(context.Context, string, int64) *redis.IntCmd) *UniversalClient_XTrimMaxLen_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMaxLenApprox provides a mock function with given fields: ctx, key, maxLen, limit
func (_m *UniversalClient) XTrimMaxLenApprox(ctx context.Context, key string, maxLen int64, limit int64) *redis.IntCmd {
	ret := _m.Called(ctx, key, maxLen, limit)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, key, maxLen, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XTrimMaxLenApprox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMaxLenApprox'
type UniversalClient_XTrimMaxLenApprox_Call struct {
	*mock.Call
}

// XTrimMaxLenApprox is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - maxLen int64
//   - limit int64
func (_e *UniversalClient_Expecter) XTrimMaxLenApprox(ctx interface{}, key interface{}, maxLen interface{}, limit interface{}) *UniversalClient_XTrimMaxLenApprox_Call {
	return &UniversalClient_XTrimMaxLenApprox_Call{Call: _e.mock.On("XTrimMaxLenApprox", ctx, key, maxLen, limit)}
}

func (_c *UniversalClient_XTrimMaxLenApprox_Call) Run(run func(ctx context.Context, key string, maxLen int64, limit int64)) *UniversalClient_XTrimMaxLenApprox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_XTrimMaxLenApprox_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XTrimMaxLenApprox_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XTrimMaxLenApprox_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.IntCmd) *UniversalClient_XTrimMaxLenApprox_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMinID provides a mock function with given fields: ctx, key, minID
func (_m *UniversalClient) XTrimMinID(ctx context.Context, key string, minID string) *redis.IntCmd {
	ret := _m.Called(ctx, key, minID)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, minID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XTrimMinID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMinID'
type UniversalClient_XTrimMinID_Call struct {
	*mock.Call
}

// XTrimMinID is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - minID string
func (_e *UniversalClient_Expecter) XTrimMinID(ctx interface{}, key interface{}, minID interface{}) *UniversalClient_XTrimMinID_Call {
	return &UniversalClient_XTrimMinID_Call{Call: _e.mock.On("XTrimMinID", ctx, key, minID)}
}

func (_c *UniversalClient_XTrimMinID_Call) Run(run func(ctx context.Context, key string, minID string)) *UniversalClient_XTrimMinID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_XTrimMinID_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XTrimMinID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XTrimMinID_Call) RunAndReturn(run func(context.Context, string, string) *redis.IntCmd) *UniversalClient_XTrimMinID_Call {
	_c.Call.Return(run)
	return _c
}

// XTrimMinIDApprox provides a mock function with given fields: ctx, key, minID, limit
func (_m *UniversalClient) XTrimMinIDApprox(ctx context.Context, key string, minID string, limit int64) *redis.IntCmd {
	ret := _m.Called(ctx, key, minID, limit)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, key, minID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_XTrimMinIDApprox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XTrimMinIDApprox'
type UniversalClient_XTrimMinIDApprox_Call struct {
	*mock.Call
}

// XTrimMinIDApprox is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - minID string
//   - limit int64
func (_e *UniversalClient_Expecter) XTrimMinIDApprox(ctx interface{}, key interface{}, minID interface{}, limit interface{}) *UniversalClient_XTrimMinIDApprox_Call {
	return &UniversalClient_XTrimMinIDApprox_Call{Call: _e.mock.On("XTrimMinIDApprox", ctx, key, minID, limit)}
}

func (_c *UniversalClient_XTrimMinIDApprox_Call) Run(run func(ctx context.Context, key string, minID string, limit int64)) *UniversalClient_XTrimMinIDApprox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_XTrimMinIDApprox_Call) Return(_a0 *redis.IntCmd) *UniversalClient_XTrimMinIDApprox_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_XTrimMinIDApprox_Call) RunAndReturn(run func(context.Context, string, string, int64) *redis.IntCmd) *UniversalClient_XTrimMinIDApprox_Call {
	_c.Call.Return(run)
	return _c
}

// ZAdd provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) ZAdd(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...redis.Z) *redis.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAdd'
type UniversalClient_ZAdd_Call struct {
	*mock.Call
}

// ZAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...redis.Z
func (_e *UniversalClient_Expecter) ZAdd(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_ZAdd_Call {
	return &UniversalClient_ZAdd_Call{Call: _e.mock.On("ZAdd",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_ZAdd_Call) Run(run func(ctx context.Context, key string, members ...redis.Z)) *UniversalClient_ZAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]redis.Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(redis.Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZAdd_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZAdd_Call) RunAndReturn(run func(context.Context, string, ...redis.Z) *redis.IntCmd) *UniversalClient_ZAdd_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddArgs provides a mock function with given fields: ctx, key, args
func (_m *UniversalClient) ZAddArgs(ctx context.Context, key string, args redis.ZAddArgs) *redis.IntCmd {
	ret := _m.Called(ctx, key, args)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, redis.ZAddArgs) *redis.IntCmd); ok {
		r0 = rf(ctx, key, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZAddArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddArgs'
type UniversalClient_ZAddArgs_Call struct {
	*mock.Call
}

// ZAddArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - args redis.ZAddArgs
func (_e *UniversalClient_Expecter) ZAddArgs(ctx interface{}, key interface{}, args interface{}) *UniversalClient_ZAddArgs_Call {
	return &UniversalClient_ZAddArgs_Call{Call: _e.mock.On("ZAddArgs", ctx, key, args)}
}

func (_c *UniversalClient_ZAddArgs_Call) Run(run func(ctx context.Context, key string, args redis.ZAddArgs)) *UniversalClient_ZAddArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(redis.ZAddArgs))
	})
	return _c
}

func (_c *UniversalClient_ZAddArgs_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZAddArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZAddArgs_Call) RunAndReturn(run func(context.Context, string, redis.ZAddArgs) *redis.IntCmd) *UniversalClient_ZAddArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddArgsIncr provides a mock function with given fields: ctx, key, args
func (_m *UniversalClient) ZAddArgsIncr(ctx context.Context, key string, args redis.ZAddArgs) *redis.FloatCmd {
	ret := _m.Called(ctx, key, args)

	var r0 *redis.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, redis.ZAddArgs) *redis.FloatCmd); ok {
		r0 = rf(ctx, key, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatCmd)
		}
	}

	return r0
}

// UniversalClient_ZAddArgsIncr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddArgsIncr'
type UniversalClient_ZAddArgsIncr_Call struct {
	*mock.Call
}

// ZAddArgsIncr is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - args redis.ZAddArgs
func (_e *UniversalClient_Expecter) ZAddArgsIncr(ctx interface{}, key interface{}, args interface{}) *UniversalClient_ZAddArgsIncr_Call {
	return &UniversalClient_ZAddArgsIncr_Call{Call: _e.mock.On("ZAddArgsIncr", ctx, key, args)}
}

func (_c *UniversalClient_ZAddArgsIncr_Call) Run(run func(ctx context.Context, key string, args redis.ZAddArgs)) *UniversalClient_ZAddArgsIncr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(redis.ZAddArgs))
	})
	return _c
}

func (_c *UniversalClient_ZAddArgsIncr_Call) Return(_a0 *redis.FloatCmd) *UniversalClient_ZAddArgsIncr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZAddArgsIncr_Call) RunAndReturn(run func(context.Context, string, redis.ZAddArgs) *redis.FloatCmd) *UniversalClient_ZAddArgsIncr_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddGT provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) ZAddGT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...redis.Z) *redis.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZAddGT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddGT'
type UniversalClient_ZAddGT_Call struct {
	*mock.Call
}

// ZAddGT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...redis.Z
func (_e *UniversalClient_Expecter) ZAddGT(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_ZAddGT_Call {
	return &UniversalClient_ZAddGT_Call{Call: _e.mock.On("ZAddGT",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_ZAddGT_Call) Run(run func(ctx context.Context, key string, members ...redis.Z)) *UniversalClient_ZAddGT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]redis.Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(redis.Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZAddGT_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZAddGT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZAddGT_Call) RunAndReturn(run func(context.Context, string, ...redis.Z) *redis.IntCmd) *UniversalClient_ZAddGT_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddLT provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) ZAddLT(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...redis.Z) *redis.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZAddLT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddLT'
type UniversalClient_ZAddLT_Call struct {
	*mock.Call
}

// ZAddLT is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...redis.Z
func (_e *UniversalClient_Expecter) ZAddLT(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_ZAddLT_Call {
	return &UniversalClient_ZAddLT_Call{Call: _e.mock.On("ZAddLT",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_ZAddLT_Call) Run(run func(ctx context.Context, key string, members ...redis.Z)) *UniversalClient_ZAddLT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]redis.Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(redis.Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZAddLT_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZAddLT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZAddLT_Call) RunAndReturn(run func(context.Context, string, ...redis.Z) *redis.IntCmd) *UniversalClient_ZAddLT_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddNX provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) ZAddNX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...redis.Z) *redis.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZAddNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddNX'
type UniversalClient_ZAddNX_Call struct {
	*mock.Call
}

// ZAddNX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...redis.Z
func (_e *UniversalClient_Expecter) ZAddNX(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_ZAddNX_Call {
	return &UniversalClient_ZAddNX_Call{Call: _e.mock.On("ZAddNX",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_ZAddNX_Call) Run(run func(ctx context.Context, key string, members ...redis.Z)) *UniversalClient_ZAddNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]redis.Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(redis.Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZAddNX_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZAddNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZAddNX_Call) RunAndReturn(run func(context.Context, string, ...redis.Z) *redis.IntCmd) *UniversalClient_ZAddNX_Call {
	_c.Call.Return(run)
	return _c
}

// ZAddXX provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) ZAddXX(ctx context.Context, key string, members ...redis.Z) *redis.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...redis.Z) *redis.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZAddXX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAddXX'
type UniversalClient_ZAddXX_Call struct {
	*mock.Call
}

// ZAddXX is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...redis.Z
func (_e *UniversalClient_Expecter) ZAddXX(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_ZAddXX_Call {
	return &UniversalClient_ZAddXX_Call{Call: _e.mock.On("ZAddXX",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_ZAddXX_Call) Run(run func(ctx context.Context, key string, members ...redis.Z)) *UniversalClient_ZAddXX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]redis.Z, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(redis.Z)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZAddXX_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZAddXX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZAddXX_Call) RunAndReturn(run func(context.Context, string, ...redis.Z) *redis.IntCmd) *UniversalClient_ZAddXX_Call {
	_c.Call.Return(run)
	return _c
}

// ZCard provides a mock function with given fields: ctx, key
func (_m *UniversalClient) ZCard(ctx context.Context, key string) *redis.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZCard'
type UniversalClient_ZCard_Call struct {
	*mock.Call
}

// ZCard is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UniversalClient_Expecter) ZCard(ctx interface{}, key interface{}) *UniversalClient_ZCard_Call {
	return &UniversalClient_ZCard_Call{Call: _e.mock.On("ZCard", ctx, key)}
}

func (_c *UniversalClient_ZCard_Call) Run(run func(ctx context.Context, key string)) *UniversalClient_ZCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UniversalClient_ZCard_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZCard_Call) RunAndReturn(run func(context.Context, string) *redis.IntCmd) *UniversalClient_ZCard_Call {
	_c.Call.Return(run)
	return _c
}

// ZCount provides a mock function with given fields: ctx, key, min, max
func (_m *UniversalClient) ZCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	ret := _m.Called(ctx, key, min, max)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZCount'
type UniversalClient_ZCount_Call struct {
	*mock.Call
}

// ZCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *UniversalClient_Expecter) ZCount(ctx interface{}, key interface{}, min interface{}, max interface{}) *UniversalClient_ZCount_Call {
	return &UniversalClient_ZCount_Call{Call: _e.mock.On("ZCount", ctx, key, min, max)}
}

func (_c *UniversalClient_ZCount_Call) Run(run func(ctx context.Context, key string, min string, max string)) *UniversalClient_ZCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_ZCount_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZCount_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.IntCmd) *UniversalClient_ZCount_Call {
	_c.Call.Return(run)
	return _c
}

// ZDiff provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) ZDiff(ctx context.Context, keys ...string) *redis.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZDiff'
type UniversalClient_ZDiff_Call struct {
	*mock.Call
}

// ZDiff is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) ZDiff(ctx interface{}, keys ...interface{}) *UniversalClient_ZDiff_Call {
	return &UniversalClient_ZDiff_Call{Call: _e.mock.On("ZDiff",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_ZDiff_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_ZDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZDiff_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZDiff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZDiff_Call) RunAndReturn(run func(context.Context, ...string) *redis.StringSliceCmd) *UniversalClient_ZDiff_Call {
	_c.Call.Return(run)
	return _c
}

// ZDiffStore provides a mock function with given fields: ctx, destination, keys
func (_m *UniversalClient) ZDiffStore(ctx context.Context, destination string, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZDiffStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZDiffStore'
type UniversalClient_ZDiffStore_Call struct {
	*mock.Call
}

// ZDiffStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - keys ...string
func (_e *UniversalClient_Expecter) ZDiffStore(ctx interface{}, destination interface{}, keys ...interface{}) *UniversalClient_ZDiffStore_Call {
	return &UniversalClient_ZDiffStore_Call{Call: _e.mock.On("ZDiffStore",
		append([]interface{}{ctx, destination}, keys...)...)}
}

func (_c *UniversalClient_ZDiffStore_Call) Run(run func(ctx context.Context, destination string, keys ...string)) *UniversalClient_ZDiffStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZDiffStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZDiffStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZDiffStore_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.IntCmd) *UniversalClient_ZDiffStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZDiffWithScores provides a mock function with given fields: ctx, keys
func (_m *UniversalClient) ZDiffWithScores(ctx context.Context, keys ...string) *redis.ZSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZDiffWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZDiffWithScores'
type UniversalClient_ZDiffWithScores_Call struct {
	*mock.Call
}

// ZDiffWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *UniversalClient_Expecter) ZDiffWithScores(ctx interface{}, keys ...interface{}) *UniversalClient_ZDiffWithScores_Call {
	return &UniversalClient_ZDiffWithScores_Call{Call: _e.mock.On("ZDiffWithScores",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *UniversalClient_ZDiffWithScores_Call) Run(run func(ctx context.Context, keys ...string)) *UniversalClient_ZDiffWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZDiffWithScores_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZDiffWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZDiffWithScores_Call) RunAndReturn(run func(context.Context, ...string) *redis.ZSliceCmd) *UniversalClient_ZDiffWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZIncrBy provides a mock function with given fields: ctx, key, increment, member
func (_m *UniversalClient) ZIncrBy(ctx context.Context, key string, increment float64, member string) *redis.FloatCmd {
	ret := _m.Called(ctx, key, increment, member)

	var r0 *redis.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, string) *redis.FloatCmd); ok {
		r0 = rf(ctx, key, increment, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatCmd)
		}
	}

	return r0
}

// UniversalClient_ZIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZIncrBy'
type UniversalClient_ZIncrBy_Call struct {
	*mock.Call
}

// ZIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - increment float64
//   - member string
func (_e *UniversalClient_Expecter) ZIncrBy(ctx interface{}, key interface{}, increment interface{}, member interface{}) *UniversalClient_ZIncrBy_Call {
	return &UniversalClient_ZIncrBy_Call{Call: _e.mock.On("ZIncrBy", ctx, key, increment, member)}
}

func (_c *UniversalClient_ZIncrBy_Call) Run(run func(ctx context.Context, key string, increment float64, member string)) *UniversalClient_ZIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_ZIncrBy_Call) Return(_a0 *redis.FloatCmd) *UniversalClient_ZIncrBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZIncrBy_Call) RunAndReturn(run func(context.Context, string, float64, string) *redis.FloatCmd) *UniversalClient_ZIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// ZInter provides a mock function with given fields: ctx, store
func (_m *UniversalClient) ZInter(ctx context.Context, store *redis.ZStore) *redis.StringSliceCmd {
	ret := _m.Called(ctx, store)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.ZStore) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZInter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInter'
type UniversalClient_ZInter_Call struct {
	*mock.Call
}

// ZInter is a helper method to define mock.On call
//   - ctx context.Context
//   - store *redis.ZStore
func (_e *UniversalClient_Expecter) ZInter(ctx interface{}, store interface{}) *UniversalClient_ZInter_Call {
	return &UniversalClient_ZInter_Call{Call: _e.mock.On("ZInter", ctx, store)}
}

func (_c *UniversalClient_ZInter_Call) Run(run func(ctx context.Context, store *redis.ZStore)) *UniversalClient_ZInter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.ZStore))
	})
	return _c
}

func (_c *UniversalClient_ZInter_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZInter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZInter_Call) RunAndReturn(run func(context.Context, *redis.ZStore) *redis.StringSliceCmd) *UniversalClient_ZInter_Call {
	_c.Call.Return(run)
	return _c
}

// ZInterCard provides a mock function with given fields: ctx, limit, keys
func (_m *UniversalClient) ZInterCard(ctx context.Context, limit int64, keys ...string) *redis.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, limit, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZInterCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInterCard'
type UniversalClient_ZInterCard_Call struct {
	*mock.Call
}

// ZInterCard is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - keys ...string
func (_e *UniversalClient_Expecter) ZInterCard(ctx interface{}, limit interface{}, keys ...interface{}) *UniversalClient_ZInterCard_Call {
	return &UniversalClient_ZInterCard_Call{Call: _e.mock.On("ZInterCard",
		append([]interface{}{ctx, limit}, keys...)...)}
}

func (_c *UniversalClient_ZInterCard_Call) Run(run func(ctx context.Context, limit int64, keys ...string)) *UniversalClient_ZInterCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZInterCard_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZInterCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZInterCard_Call) RunAndReturn(run func(context.Context, int64, ...string) *redis.IntCmd) *UniversalClient_ZInterCard_Call {
	_c.Call.Return(run)
	return _c
}

// ZInterStore provides a mock function with given fields: ctx, destination, store
func (_m *UniversalClient) ZInterStore(ctx context.Context, destination string, store *redis.ZStore) *redis.IntCmd {
	ret := _m.Called(ctx, destination, store)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.ZStore) *redis.IntCmd); ok {
		r0 = rf(ctx, destination, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZInterStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInterStore'
type UniversalClient_ZInterStore_Call struct {
	*mock.Call
}

// ZInterStore is a helper method to define mock.On call
//   - ctx context.Context
//   - destination string
//   - store *redis.ZStore
func (_e *UniversalClient_Expecter) ZInterStore(ctx interface{}, destination interface{}, store interface{}) *UniversalClient_ZInterStore_Call {
	return &UniversalClient_ZInterStore_Call{Call: _e.mock.On("ZInterStore", ctx, destination, store)}
}

func (_c *UniversalClient_ZInterStore_Call) Run(run func(ctx context.Context, destination string, store *redis.ZStore)) *UniversalClient_ZInterStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.ZStore))
	})
	return _c
}

func (_c *UniversalClient_ZInterStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZInterStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZInterStore_Call) RunAndReturn(run func(context.Context, string, *redis.ZStore) *redis.IntCmd) *UniversalClient_ZInterStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZInterWithScores provides a mock function with given fields: ctx, store
func (_m *UniversalClient) ZInterWithScores(ctx context.Context, store *redis.ZStore) *redis.ZSliceCmd {
	ret := _m.Called(ctx, store)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *redis.ZStore) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZInterWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZInterWithScores'
type UniversalClient_ZInterWithScores_Call struct {
	*mock.Call
}

// ZInterWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - store *redis.ZStore
func (_e *UniversalClient_Expecter) ZInterWithScores(ctx interface{}, store interface{}) *UniversalClient_ZInterWithScores_Call {
	return &UniversalClient_ZInterWithScores_Call{Call: _e.mock.On("ZInterWithScores", ctx, store)}
}

func (_c *UniversalClient_ZInterWithScores_Call) Run(run func(ctx context.Context, store *redis.ZStore)) *UniversalClient_ZInterWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*redis.ZStore))
	})
	return _c
}

func (_c *UniversalClient_ZInterWithScores_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZInterWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZInterWithScores_Call) RunAndReturn(run func(context.Context, *redis.ZStore) *redis.ZSliceCmd) *UniversalClient_ZInterWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZLexCount provides a mock function with given fields: ctx, key, min, max
func (_m *UniversalClient) ZLexCount(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	ret := _m.Called(ctx, key, min, max)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZLexCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZLexCount'
type UniversalClient_ZLexCount_Call struct {
	*mock.Call
}

// ZLexCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *UniversalClient_Expecter) ZLexCount(ctx interface{}, key interface{}, min interface{}, max interface{}) *UniversalClient_ZLexCount_Call {
	return &UniversalClient_ZLexCount_Call{Call: _e.mock.On("ZLexCount", ctx, key, min, max)}
}

func (_c *UniversalClient_ZLexCount_Call) Run(run func(ctx context.Context, key string, min string, max string)) *UniversalClient_ZLexCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_ZLexCount_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZLexCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZLexCount_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.IntCmd) *UniversalClient_ZLexCount_Call {
	_c.Call.Return(run)
	return _c
}

// ZMPop provides a mock function with given fields: ctx, order, count, keys
func (_m *UniversalClient) ZMPop(ctx context.Context, order string, count int64, keys ...string) *redis.ZSliceWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, order, count)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.ZSliceWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, ...string) *redis.ZSliceWithKeyCmd); ok {
		r0 = rf(ctx, order, count, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceWithKeyCmd)
		}
	}

	return r0
}

// UniversalClient_ZMPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZMPop'
type UniversalClient_ZMPop_Call struct {
	*mock.Call
}

// ZMPop is a helper method to define mock.On call
//   - ctx context.Context
//   - order string
//   - count int64
//   - keys ...string
func (_e *UniversalClient_Expecter) ZMPop(ctx interface{}, order interface{}, count interface{}, keys ...interface{}) *UniversalClient_ZMPop_Call {
	return &UniversalClient_ZMPop_Call{Call: _e.mock.On("ZMPop",
		append([]interface{}{ctx, order, count}, keys...)...)}
}

func (_c *UniversalClient_ZMPop_Call) Run(run func(ctx context.Context, order string, count int64, keys ...string)) *UniversalClient_ZMPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(int64), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZMPop_Call) Return(_a0 *redis.ZSliceWithKeyCmd) *UniversalClient_ZMPop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZMPop_Call) RunAndReturn(run func(context.Context, string, int64, ...string) *redis.ZSliceWithKeyCmd) *UniversalClient_ZMPop_Call {
	_c.Call.Return(run)
	return _c
}

// ZMScore provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) ZMScore(ctx context.Context, key string, members ...string) *redis.FloatSliceCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.FloatSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZMScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZMScore'
type UniversalClient_ZMScore_Call struct {
	*mock.Call
}

// ZMScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...string
func (_e *UniversalClient_Expecter) ZMScore(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_ZMScore_Call {
	return &UniversalClient_ZMScore_Call{Call: _e.mock.On("ZMScore",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_ZMScore_Call) Run(run func(ctx context.Context, key string, members ...string)) *UniversalClient_ZMScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZMScore_Call) Return(_a0 *redis.FloatSliceCmd) *UniversalClient_ZMScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZMScore_Call) RunAndReturn(run func(context.Context, string, ...string) *redis.FloatSliceCmd) *UniversalClient_ZMScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZPopMax provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) ZPopMax(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	_va := make([]interface{}, len(count))
	for _i := range count {
		_va[_i] = count[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, key, count...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZPopMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZPopMax'
type UniversalClient_ZPopMax_Call struct {
	*mock.Call
}

// ZPopMax is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count ...int64
func (_e *UniversalClient_Expecter) ZPopMax(ctx interface{}, key interface{}, count ...interface{}) *UniversalClient_ZPopMax_Call {
	return &UniversalClient_ZPopMax_Call{Call: _e.mock.On("ZPopMax",
		append([]interface{}{ctx, key}, count...)...)}
}

func (_c *UniversalClient_ZPopMax_Call) Run(run func(ctx context.Context, key string, count ...int64)) *UniversalClient_ZPopMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZPopMax_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZPopMax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZPopMax_Call) RunAndReturn(run func(context.Context, string, ...int64) *redis.ZSliceCmd) *UniversalClient_ZPopMax_Call {
	_c.Call.Return(run)
	return _c
}

// ZPopMin provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) ZPopMin(ctx context.Context, key string, count ...int64) *redis.ZSliceCmd {
	_va := make([]interface{}, len(count))
	for _i := range count {
		_va[_i] = count[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, key, count...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZPopMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZPopMin'
type UniversalClient_ZPopMin_Call struct {
	*mock.Call
}

// ZPopMin is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count ...int64
func (_e *UniversalClient_Expecter) ZPopMin(ctx interface{}, key interface{}, count ...interface{}) *UniversalClient_ZPopMin_Call {
	return &UniversalClient_ZPopMin_Call{Call: _e.mock.On("ZPopMin",
		append([]interface{}{ctx, key}, count...)...)}
}

func (_c *UniversalClient_ZPopMin_Call) Run(run func(ctx context.Context, key string, count ...int64)) *UniversalClient_ZPopMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]int64, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(int64)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZPopMin_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZPopMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZPopMin_Call) RunAndReturn(run func(context.Context, string, ...int64) *redis.ZSliceCmd) *UniversalClient_ZPopMin_Call {
	_c.Call.Return(run)
	return _c
}

// ZRandMember provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) ZRandMember(ctx context.Context, key string, count int) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRandMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRandMember'
type UniversalClient_ZRandMember_Call struct {
	*mock.Call
}

// ZRandMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *UniversalClient_Expecter) ZRandMember(ctx interface{}, key interface{}, count interface{}) *UniversalClient_ZRandMember_Call {
	return &UniversalClient_ZRandMember_Call{Call: _e.mock.On("ZRandMember", ctx, key, count)}
}

func (_c *UniversalClient_ZRandMember_Call) Run(run func(ctx context.Context, key string, count int)) *UniversalClient_ZRandMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_ZRandMember_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZRandMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRandMember_Call) RunAndReturn(run func(context.Context, string, int) *redis.StringSliceCmd) *UniversalClient_ZRandMember_Call {
	_c.Call.Return(run)
	return _c
}

// ZRandMemberWithScores provides a mock function with given fields: ctx, key, count
func (_m *UniversalClient) ZRandMemberWithScores(ctx context.Context, key string, count int) *redis.ZSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRandMemberWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRandMemberWithScores'
type UniversalClient_ZRandMemberWithScores_Call struct {
	*mock.Call
}

// ZRandMemberWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - count int
func (_e *UniversalClient_Expecter) ZRandMemberWithScores(ctx interface{}, key interface{}, count interface{}) *UniversalClient_ZRandMemberWithScores_Call {
	return &UniversalClient_ZRandMemberWithScores_Call{Call: _e.mock.On("ZRandMemberWithScores", ctx, key, count)}
}

func (_c *UniversalClient_ZRandMemberWithScores_Call) Run(run func(ctx context.Context, key string, count int)) *UniversalClient_ZRandMemberWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *UniversalClient_ZRandMemberWithScores_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZRandMemberWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRandMemberWithScores_Call) RunAndReturn(run func(context.Context, string, int) *redis.ZSliceCmd) *UniversalClient_ZRandMemberWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRange provides a mock function with given fields: ctx, key, start, stop
func (_m *UniversalClient) ZRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRange'
type UniversalClient_ZRange_Call struct {
	*mock.Call
}

// ZRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *UniversalClient_Expecter) ZRange(ctx interface{}, key interface{}, start interface{}, stop interface{}) *UniversalClient_ZRange_Call {
	return &UniversalClient_ZRange_Call{Call: _e.mock.On("ZRange", ctx, key, start, stop)}
}

func (_c *UniversalClient_ZRange_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *UniversalClient_ZRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_ZRange_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.StringSliceCmd) *UniversalClient_ZRange_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeArgs provides a mock function with given fields: ctx, z
func (_m *UniversalClient) ZRangeArgs(ctx context.Context, z redis.ZRangeArgs) *redis.StringSliceCmd {
	ret := _m.Called(ctx, z)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, redis.ZRangeArgs) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, z)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRangeArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeArgs'
type UniversalClient_ZRangeArgs_Call struct {
	*mock.Call
}

// ZRangeArgs is a helper method to define mock.On call
//   - ctx context.Context
//   - z redis.ZRangeArgs
func (_e *UniversalClient_Expecter) ZRangeArgs(ctx interface{}, z interface{}) *UniversalClient_ZRangeArgs_Call {
	return &UniversalClient_ZRangeArgs_Call{Call: _e.mock.On("ZRangeArgs", ctx, z)}
}

func (_c *UniversalClient_ZRangeArgs_Call) Run(run func(ctx context.Context, z redis.ZRangeArgs)) *UniversalClient_ZRangeArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(redis.ZRangeArgs))
	})
	return _c
}

func (_c *UniversalClient_ZRangeArgs_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZRangeArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRangeArgs_Call) RunAndReturn(run func(context.Context, redis.ZRangeArgs) *redis.StringSliceCmd) *UniversalClient_ZRangeArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeArgsWithScores provides a mock function with given fields: ctx, z
func (_m *UniversalClient) ZRangeArgsWithScores(ctx context.Context, z redis.ZRangeArgs) *redis.ZSliceCmd {
	ret := _m.Called(ctx, z)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, redis.ZRangeArgs) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, z)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRangeArgsWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeArgsWithScores'
type UniversalClient_ZRangeArgsWithScores_Call struct {
	*mock.Call
}

// ZRangeArgsWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - z redis.ZRangeArgs
func (_e *UniversalClient_Expecter) ZRangeArgsWithScores(ctx interface{}, z interface{}) *UniversalClient_ZRangeArgsWithScores_Call {
	return &UniversalClient_ZRangeArgsWithScores_Call{Call: _e.mock.On("ZRangeArgsWithScores", ctx, z)}
}

func (_c *UniversalClient_ZRangeArgsWithScores_Call) Run(run func(ctx context.Context, z redis.ZRangeArgs)) *UniversalClient_ZRangeArgsWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(redis.ZRangeArgs))
	})
	return _c
}

func (_c *UniversalClient_ZRangeArgsWithScores_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZRangeArgsWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRangeArgsWithScores_Call) RunAndReturn(run func(context.Context, redis.ZRangeArgs) *redis.ZSliceCmd) *UniversalClient_ZRangeArgsWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeByLex provides a mock function with given fields: ctx, key, opt
func (_m *UniversalClient) ZRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRangeByLex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeByLex'
type UniversalClient_ZRangeByLex_Call struct {
	*mock.Call
}

// ZRangeByLex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *redis.ZRangeBy
func (_e *UniversalClient_Expecter) ZRangeByLex(ctx interface{}, key interface{}, opt interface{}) *UniversalClient_ZRangeByLex_Call {
	return &UniversalClient_ZRangeByLex_Call{Call: _e.mock.On("ZRangeByLex", ctx, key, opt)}
}

func (_c *UniversalClient_ZRangeByLex_Call) Run(run func(ctx context.Context, key string, opt *redis.ZRangeBy)) *UniversalClient_ZRangeByLex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.ZRangeBy))
	})
	return _c
}

func (_c *UniversalClient_ZRangeByLex_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZRangeByLex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRangeByLex_Call) RunAndReturn(run func(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd) *UniversalClient_ZRangeByLex_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeByScore provides a mock function with given fields: ctx, key, opt
func (_m *UniversalClient) ZRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRangeByScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeByScore'
type UniversalClient_ZRangeByScore_Call struct {
	*mock.Call
}

// ZRangeByScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *redis.ZRangeBy
func (_e *UniversalClient_Expecter) ZRangeByScore(ctx interface{}, key interface{}, opt interface{}) *UniversalClient_ZRangeByScore_Call {
	return &UniversalClient_ZRangeByScore_Call{Call: _e.mock.On("ZRangeByScore", ctx, key, opt)}
}

func (_c *UniversalClient_ZRangeByScore_Call) Run(run func(ctx context.Context, key string, opt *redis.ZRangeBy)) *UniversalClient_ZRangeByScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.ZRangeBy))
	})
	return _c
}

func (_c *UniversalClient_ZRangeByScore_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZRangeByScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRangeByScore_Call) RunAndReturn(run func(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd) *UniversalClient_ZRangeByScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeByScoreWithScores provides a mock function with given fields: ctx, key, opt
func (_m *UniversalClient) ZRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.ZRangeBy) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRangeByScoreWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeByScoreWithScores'
type UniversalClient_ZRangeByScoreWithScores_Call struct {
	*mock.Call
}

// ZRangeByScoreWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *redis.ZRangeBy
func (_e *UniversalClient_Expecter) ZRangeByScoreWithScores(ctx interface{}, key interface{}, opt interface{}) *UniversalClient_ZRangeByScoreWithScores_Call {
	return &UniversalClient_ZRangeByScoreWithScores_Call{Call: _e.mock.On("ZRangeByScoreWithScores", ctx, key, opt)}
}

func (_c *UniversalClient_ZRangeByScoreWithScores_Call) Run(run func(ctx context.Context, key string, opt *redis.ZRangeBy)) *UniversalClient_ZRangeByScoreWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.ZRangeBy))
	})
	return _c
}

func (_c *UniversalClient_ZRangeByScoreWithScores_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZRangeByScoreWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRangeByScoreWithScores_Call) RunAndReturn(run func(context.Context, string, *redis.ZRangeBy) *redis.ZSliceCmd) *UniversalClient_ZRangeByScoreWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeStore provides a mock function with given fields: ctx, dst, z
func (_m *UniversalClient) ZRangeStore(ctx context.Context, dst string, z redis.ZRangeArgs) *redis.IntCmd {
	ret := _m.Called(ctx, dst, z)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, redis.ZRangeArgs) *redis.IntCmd); ok {
		r0 = rf(ctx, dst, z)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZRangeStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeStore'
type UniversalClient_ZRangeStore_Call struct {
	*mock.Call
}

// ZRangeStore is a helper method to define mock.On call
//   - ctx context.Context
//   - dst string
//   - z redis.ZRangeArgs
func (_e *UniversalClient_Expecter) ZRangeStore(ctx interface{}, dst interface{}, z interface{}) *UniversalClient_ZRangeStore_Call {
	return &UniversalClient_ZRangeStore_Call{Call: _e.mock.On("ZRangeStore", ctx, dst, z)}
}

func (_c *UniversalClient_ZRangeStore_Call) Run(run func(ctx context.Context, dst string, z redis.ZRangeArgs)) *UniversalClient_ZRangeStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(redis.ZRangeArgs))
	})
	return _c
}

func (_c *UniversalClient_ZRangeStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZRangeStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRangeStore_Call) RunAndReturn(run func(context.Context, string, redis.ZRangeArgs) *redis.IntCmd) *UniversalClient_ZRangeStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRangeWithScores provides a mock function with given fields: ctx, key, start, stop
func (_m *UniversalClient) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRangeWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRangeWithScores'
type UniversalClient_ZRangeWithScores_Call struct {
	*mock.Call
}

// ZRangeWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *UniversalClient_Expecter) ZRangeWithScores(ctx interface{}, key interface{}, start interface{}, stop interface{}) *UniversalClient_ZRangeWithScores_Call {
	return &UniversalClient_ZRangeWithScores_Call{Call: _e.mock.On("ZRangeWithScores", ctx, key, start, stop)}
}

func (_c *UniversalClient_ZRangeWithScores_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *UniversalClient_ZRangeWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_ZRangeWithScores_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZRangeWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRangeWithScores_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.ZSliceCmd) *UniversalClient_ZRangeWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRank provides a mock function with given fields: ctx, key, member
func (_m *UniversalClient) ZRank(ctx context.Context, key string, member string) *redis.IntCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRank'
type UniversalClient_ZRank_Call struct {
	*mock.Call
}

// ZRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *UniversalClient_Expecter) ZRank(ctx interface{}, key interface{}, member interface{}) *UniversalClient_ZRank_Call {
	return &UniversalClient_ZRank_Call{Call: _e.mock.On("ZRank", ctx, key, member)}
}

func (_c *UniversalClient_ZRank_Call) Run(run func(ctx context.Context, key string, member string)) *UniversalClient_ZRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_ZRank_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRank_Call) RunAndReturn(run func(context.Context, string, string) *redis.IntCmd) *UniversalClient_ZRank_Call {
	_c.Call.Return(run)
	return _c
}

// ZRankWithScore provides a mock function with given fields: ctx, key, member
func (_m *UniversalClient) ZRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *redis.RankWithScoreCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.RankWithScoreCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.RankWithScoreCmd)
		}
	}

	return r0
}

// UniversalClient_ZRankWithScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRankWithScore'
type UniversalClient_ZRankWithScore_Call struct {
	*mock.Call
}

// ZRankWithScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *UniversalClient_Expecter) ZRankWithScore(ctx interface{}, key interface{}, member interface{}) *UniversalClient_ZRankWithScore_Call {
	return &UniversalClient_ZRankWithScore_Call{Call: _e.mock.On("ZRankWithScore", ctx, key, member)}
}

func (_c *UniversalClient_ZRankWithScore_Call) Run(run func(ctx context.Context, key string, member string)) *UniversalClient_ZRankWithScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_ZRankWithScore_Call) Return(_a0 *redis.RankWithScoreCmd) *UniversalClient_ZRankWithScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRankWithScore_Call) RunAndReturn(run func(context.Context, string, string) *redis.RankWithScoreCmd) *UniversalClient_ZRankWithScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRem provides a mock function with given fields: ctx, key, members
func (_m *UniversalClient) ZRem(ctx context.Context, key string, members ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRem'
type UniversalClient_ZRem_Call struct {
	*mock.Call
}

// ZRem is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *UniversalClient_Expecter) ZRem(ctx interface{}, key interface{}, members ...interface{}) *UniversalClient_ZRem_Call {
	return &UniversalClient_ZRem_Call{Call: _e.mock.On("ZRem",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *UniversalClient_ZRem_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *UniversalClient_ZRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *UniversalClient_ZRem_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZRem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRem_Call) RunAndReturn(run func(context.Context, string, ...interface{}) *redis.IntCmd) *UniversalClient_ZRem_Call {
	_c.Call.Return(run)
	return _c
}

// ZRemRangeByLex provides a mock function with given fields: ctx, key, min, max
func (_m *UniversalClient) ZRemRangeByLex(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	ret := _m.Called(ctx, key, min, max)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZRemRangeByLex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRemRangeByLex'
type UniversalClient_ZRemRangeByLex_Call struct {
	*mock.Call
}

// ZRemRangeByLex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *UniversalClient_Expecter) ZRemRangeByLex(ctx interface{}, key interface{}, min interface{}, max interface{}) *UniversalClient_ZRemRangeByLex_Call {
	return &UniversalClient_ZRemRangeByLex_Call{Call: _e.mock.On("ZRemRangeByLex", ctx, key, min, max)}
}

func (_c *UniversalClient_ZRemRangeByLex_Call) Run(run func(ctx context.Context, key string, min string, max string)) *UniversalClient_ZRemRangeByLex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_ZRemRangeByLex_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZRemRangeByLex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRemRangeByLex_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.IntCmd) *UniversalClient_ZRemRangeByLex_Call {
	_c.Call.Return(run)
	return _c
}

// ZRemRangeByRank provides a mock function with given fields: ctx, key, start, stop
func (_m *UniversalClient) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) *redis.IntCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.IntCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZRemRangeByRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRemRangeByRank'
type UniversalClient_ZRemRangeByRank_Call struct {
	*mock.Call
}

// ZRemRangeByRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *UniversalClient_Expecter) ZRemRangeByRank(ctx interface{}, key interface{}, start interface{}, stop interface{}) *UniversalClient_ZRemRangeByRank_Call {
	return &UniversalClient_ZRemRangeByRank_Call{Call: _e.mock.On("ZRemRangeByRank", ctx, key, start, stop)}
}

func (_c *UniversalClient_ZRemRangeByRank_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *UniversalClient_ZRemRangeByRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_ZRemRangeByRank_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZRemRangeByRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRemRangeByRank_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.IntCmd) *UniversalClient_ZRemRangeByRank_Call {
	_c.Call.Return(run)
	return _c
}

// ZRemRangeByScore provides a mock function with given fields: ctx, key, min, max
func (_m *UniversalClient) ZRemRangeByScore(ctx context.Context, key string, min string, max string) *redis.IntCmd {
	ret := _m.Called(ctx, key, min, max)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZRemRangeByScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRemRangeByScore'
type UniversalClient_ZRemRangeByScore_Call struct {
	*mock.Call
}

// ZRemRangeByScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - min string
//   - max string
func (_e *UniversalClient_Expecter) ZRemRangeByScore(ctx interface{}, key interface{}, min interface{}, max interface{}) *UniversalClient_ZRemRangeByScore_Call {
	return &UniversalClient_ZRemRangeByScore_Call{Call: _e.mock.On("ZRemRangeByScore", ctx, key, min, max)}
}

func (_c *UniversalClient_ZRemRangeByScore_Call) Run(run func(ctx context.Context, key string, min string, max string)) *UniversalClient_ZRemRangeByScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UniversalClient_ZRemRangeByScore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZRemRangeByScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRemRangeByScore_Call) RunAndReturn(run func(context.Context, string, string, string) *redis.IntCmd) *UniversalClient_ZRemRangeByScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRange provides a mock function with given fields: ctx, key, start, stop
func (_m *UniversalClient) ZRevRange(ctx context.Context, key string, start int64, stop int64) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRevRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRange'
type UniversalClient_ZRevRange_Call struct {
	*mock.Call
}

// ZRevRange is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *UniversalClient_Expecter) ZRevRange(ctx interface{}, key interface{}, start interface{}, stop interface{}) *UniversalClient_ZRevRange_Call {
	return &UniversalClient_ZRevRange_Call{Call: _e.mock.On("ZRevRange", ctx, key, start, stop)}
}

func (_c *UniversalClient_ZRevRange_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *UniversalClient_ZRevRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_ZRevRange_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZRevRange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRevRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.StringSliceCmd) *UniversalClient_ZRevRange_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeByLex provides a mock function with given fields: ctx, key, opt
func (_m *UniversalClient) ZRevRangeByLex(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRevRangeByLex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeByLex'
type UniversalClient_ZRevRangeByLex_Call struct {
	*mock.Call
}

// ZRevRangeByLex is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *redis.ZRangeBy
func (_e *UniversalClient_Expecter) ZRevRangeByLex(ctx interface{}, key interface{}, opt interface{}) *UniversalClient_ZRevRangeByLex_Call {
	return &UniversalClient_ZRevRangeByLex_Call{Call: _e.mock.On("ZRevRangeByLex", ctx, key, opt)}
}

func (_c *UniversalClient_ZRevRangeByLex_Call) Run(run func(ctx context.Context, key string, opt *redis.ZRangeBy)) *UniversalClient_ZRevRangeByLex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.ZRangeBy))
	})
	return _c
}

func (_c *UniversalClient_ZRevRangeByLex_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZRevRangeByLex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRevRangeByLex_Call) RunAndReturn(run func(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd) *UniversalClient_ZRevRangeByLex_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeByScore provides a mock function with given fields: ctx, key, opt
func (_m *UniversalClient) ZRevRangeByScore(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRevRangeByScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeByScore'
type UniversalClient_ZRevRangeByScore_Call struct {
	*mock.Call
}

// ZRevRangeByScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *redis.ZRangeBy
func (_e *UniversalClient_Expecter) ZRevRangeByScore(ctx interface{}, key interface{}, opt interface{}) *UniversalClient_ZRevRangeByScore_Call {
	return &UniversalClient_ZRevRangeByScore_Call{Call: _e.mock.On("ZRevRangeByScore", ctx, key, opt)}
}

func (_c *UniversalClient_ZRevRangeByScore_Call) Run(run func(ctx context.Context, key string, opt *redis.ZRangeBy)) *UniversalClient_ZRevRangeByScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.ZRangeBy))
	})
	return _c
}

func (_c *UniversalClient_ZRevRangeByScore_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZRevRangeByScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRevRangeByScore_Call) RunAndReturn(run func(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd) *UniversalClient_ZRevRangeByScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeByScoreWithScores provides a mock function with given fields: ctx, key, opt
func (_m *UniversalClient) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *redis.ZRangeBy) *redis.ZSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.ZRangeBy) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRevRangeByScoreWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeByScoreWithScores'
type UniversalClient_ZRevRangeByScoreWithScores_Call struct {
	*mock.Call
}

// ZRevRangeByScoreWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opt *redis.ZRangeBy
func (_e *UniversalClient_Expecter) ZRevRangeByScoreWithScores(ctx interface{}, key interface{}, opt interface{}) *UniversalClient_ZRevRangeByScoreWithScores_Call {
	return &UniversalClient_ZRevRangeByScoreWithScores_Call{Call: _e.mock.On("ZRevRangeByScoreWithScores", ctx, key, opt)}
}

func (_c *UniversalClient_ZRevRangeByScoreWithScores_Call) Run(run func(ctx context.Context, key string, opt *redis.ZRangeBy)) *UniversalClient_ZRevRangeByScoreWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.ZRangeBy))
	})
	return _c
}

func (_c *UniversalClient_ZRevRangeByScoreWithScores_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZRevRangeByScoreWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRevRangeByScoreWithScores_Call) RunAndReturn(run func(context.Context, string, *redis.ZRangeBy) *redis.ZSliceCmd) *UniversalClient_ZRevRangeByScoreWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeWithScores provides a mock function with given fields: ctx, key, start, stop
func (_m *UniversalClient) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) *redis.ZSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZRevRangeWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeWithScores'
type UniversalClient_ZRevRangeWithScores_Call struct {
	*mock.Call
}

// ZRevRangeWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - start int64
//   - stop int64
func (_e *UniversalClient_Expecter) ZRevRangeWithScores(ctx interface{}, key interface{}, start interface{}, stop interface{}) *UniversalClient_ZRevRangeWithScores_Call {
	return &UniversalClient_ZRevRangeWithScores_Call{Call: _e.mock.On("ZRevRangeWithScores", ctx, key, start, stop)}
}

func (_c *UniversalClient_ZRevRangeWithScores_Call) Run(run func(ctx context.Context, key string, start int64, stop int64)) *UniversalClient_ZRevRangeWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *UniversalClient_ZRevRangeWithScores_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZRevRangeWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRevRangeWithScores_Call) RunAndReturn(run func(context.Context, string, int64, int64) *redis.ZSliceCmd) *UniversalClient_ZRevRangeWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRank provides a mock function with given fields: ctx, key, member
func (_m *UniversalClient) ZRevRank(ctx context.Context, key string, member string) *redis.IntCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZRevRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRank'
type UniversalClient_ZRevRank_Call struct {
	*mock.Call
}

// ZRevRank is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *UniversalClient_Expecter) ZRevRank(ctx interface{}, key interface{}, member interface{}) *UniversalClient_ZRevRank_Call {
	return &UniversalClient_ZRevRank_Call{Call: _e.mock.On("ZRevRank", ctx, key, member)}
}

func (_c *UniversalClient_ZRevRank_Call) Run(run func(ctx context.Context, key string, member string)) *UniversalClient_ZRevRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_ZRevRank_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZRevRank_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRevRank_Call) RunAndReturn(run func(context.Context, string, string) *redis.IntCmd) *UniversalClient_ZRevRank_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRankWithScore provides a mock function with given fields: ctx, key, member
func (_m *UniversalClient) ZRevRankWithScore(ctx context.Context, key string, member string) *redis.RankWithScoreCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *redis.RankWithScoreCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.RankWithScoreCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.RankWithScoreCmd)
		}
	}

	return r0
}

// UniversalClient_ZRevRankWithScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRankWithScore'
type UniversalClient_ZRevRankWithScore_Call struct {
	*mock.Call
}

// ZRevRankWithScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *UniversalClient_Expecter) ZRevRankWithScore(ctx interface{}, key interface{}, member interface{}) *UniversalClient_ZRevRankWithScore_Call {
	return &UniversalClient_ZRevRankWithScore_Call{Call: _e.mock.On("ZRevRankWithScore", ctx, key, member)}
}

func (_c *UniversalClient_ZRevRankWithScore_Call) Run(run func(ctx context.Context, key string, member string)) *UniversalClient_ZRevRankWithScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_ZRevRankWithScore_Call) Return(_a0 *redis.RankWithScoreCmd) *UniversalClient_ZRevRankWithScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZRevRankWithScore_Call) RunAndReturn(run func(context.Context, string, string) *redis.RankWithScoreCmd) *UniversalClient_ZRevRankWithScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *UniversalClient) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	var r0 *redis.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *redis.ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ScanCmd)
		}
	}

	return r0
}

// UniversalClient_ZScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZScan'
type UniversalClient_ZScan_Call struct {
	*mock.Call
}

// ZScan is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - cursor uint64
//   - match string
//   - count int64
func (_e *UniversalClient_Expecter) ZScan(ctx interface{}, key interface{}, cursor interface{}, match interface{}, count interface{}) *UniversalClient_ZScan_Call {
	return &UniversalClient_ZScan_Call{Call: _e.mock.On("ZScan", ctx, key, cursor, match, count)}
}

func (_c *UniversalClient_ZScan_Call) Run(run func(ctx context.Context, key string, cursor uint64, match string, count int64)) *UniversalClient_ZScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(string), args[4].(int64))
	})
	return _c
}

func (_c *UniversalClient_ZScan_Call) Return(_a0 *redis.ScanCmd) *UniversalClient_ZScan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZScan_Call) RunAndReturn(run func(context.Context, string, uint64, string, int64) *redis.ScanCmd) *UniversalClient_ZScan_Call {
	_c.Call.Return(run)
	return _c
}

// ZScore provides a mock function with given fields: ctx, key, member
func (_m *UniversalClient) ZScore(ctx context.Context, key string, member string) *redis.FloatCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *redis.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *redis.FloatCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.FloatCmd)
		}
	}

	return r0
}

// UniversalClient_ZScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZScore'
type UniversalClient_ZScore_Call struct {
	*mock.Call
}

// ZScore is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
func (_e *UniversalClient_Expecter) ZScore(ctx interface{}, key interface{}, member interface{}) *UniversalClient_ZScore_Call {
	return &UniversalClient_ZScore_Call{Call: _e.mock.On("ZScore", ctx, key, member)}
}

func (_c *UniversalClient_ZScore_Call) Run(run func(ctx context.Context, key string, member string)) *UniversalClient_ZScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UniversalClient_ZScore_Call) Return(_a0 *redis.FloatCmd) *UniversalClient_ZScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZScore_Call) RunAndReturn(run func(context.Context, string, string) *redis.FloatCmd) *UniversalClient_ZScore_Call {
	_c.Call.Return(run)
	return _c
}

// ZUnion provides a mock function with given fields: ctx, store
func (_m *UniversalClient) ZUnion(ctx context.Context, store redis.ZStore) *redis.StringSliceCmd {
	ret := _m.Called(ctx, store)

	var r0 *redis.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, redis.ZStore) *redis.StringSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZUnion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZUnion'
type UniversalClient_ZUnion_Call struct {
	*mock.Call
}

// ZUnion is a helper method to define mock.On call
//   - ctx context.Context
//   - store redis.ZStore
func (_e *UniversalClient_Expecter) ZUnion(ctx interface{}, store interface{}) *UniversalClient_ZUnion_Call {
	return &UniversalClient_ZUnion_Call{Call: _e.mock.On("ZUnion", ctx, store)}
}

func (_c *UniversalClient_ZUnion_Call) Run(run func(ctx context.Context, store redis.ZStore)) *UniversalClient_ZUnion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(redis.ZStore))
	})
	return _c
}

func (_c *UniversalClient_ZUnion_Call) Return(_a0 *redis.StringSliceCmd) *UniversalClient_ZUnion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZUnion_Call) RunAndReturn(run func(context.Context, redis.ZStore) *redis.StringSliceCmd) *UniversalClient_ZUnion_Call {
	_c.Call.Return(run)
	return _c
}

// ZUnionStore provides a mock function with given fields: ctx, dest, store
func (_m *UniversalClient) ZUnionStore(ctx context.Context, dest string, store *redis.ZStore) *redis.IntCmd {
	ret := _m.Called(ctx, dest, store)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *redis.ZStore) *redis.IntCmd); ok {
		r0 = rf(ctx, dest, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// UniversalClient_ZUnionStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZUnionStore'
type UniversalClient_ZUnionStore_Call struct {
	*mock.Call
}

// ZUnionStore is a helper method to define mock.On call
//   - ctx context.Context
//   - dest string
//   - store *redis.ZStore
func (_e *UniversalClient_Expecter) ZUnionStore(ctx interface{}, dest interface{}, store interface{}) *UniversalClient_ZUnionStore_Call {
	return &UniversalClient_ZUnionStore_Call{Call: _e.mock.On("ZUnionStore", ctx, dest, store)}
}

func (_c *UniversalClient_ZUnionStore_Call) Run(run func(ctx context.Context, dest string, store *redis.ZStore)) *UniversalClient_ZUnionStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*redis.ZStore))
	})
	return _c
}

func (_c *UniversalClient_ZUnionStore_Call) Return(_a0 *redis.IntCmd) *UniversalClient_ZUnionStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZUnionStore_Call) RunAndReturn(run func(context.Context, string, *redis.ZStore) *redis.IntCmd) *UniversalClient_ZUnionStore_Call {
	_c.Call.Return(run)
	return _c
}

// ZUnionWithScores provides a mock function with given fields: ctx, store
func (_m *UniversalClient) ZUnionWithScores(ctx context.Context, store redis.ZStore) *redis.ZSliceCmd {
	ret := _m.Called(ctx, store)

	var r0 *redis.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, redis.ZStore) *redis.ZSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZSliceCmd)
		}
	}

	return r0
}

// UniversalClient_ZUnionWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZUnionWithScores'
type UniversalClient_ZUnionWithScores_Call struct {
	*mock.Call
}

// ZUnionWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - store redis.ZStore
func (_e *UniversalClient_Expecter) ZUnionWithScores(ctx interface{}, store interface{}) *UniversalClient_ZUnionWithScores_Call {
	return &UniversalClient_ZUnionWithScores_Call{Call: _e.mock.On("ZUnionWithScores", ctx, store)}
}

func (_c *UniversalClient_ZUnionWithScores_Call) Run(run func(ctx context.Context, store redis.ZStore)) *UniversalClient_ZUnionWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(redis.ZStore))
	})
	return _c
}

func (_c *UniversalClient_ZUnionWithScores_Call) Return(_a0 *redis.ZSliceCmd) *UniversalClient_ZUnionWithScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UniversalClient_ZUnionWithScores_Call) RunAndReturn(run func(context.Context, redis.ZStore) *redis.ZSliceCmd) *UniversalClient_ZUnionWithScores_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUniversalClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewUniversalClient creates a new instance of UniversalClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUniversalClient(t mockConstructorTestingTNewUniversalClient) *UniversalClient {
	mock := &UniversalClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
