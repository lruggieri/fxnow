// Code generated by mockery v2.20.2. DO NOT EDIT.

package mockauth

import (
	auth "github.com/lruggieri/fxnow/identity/auth"
	mock "github.com/stretchr/testify/mock"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

type Authenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *Authenticator) EXPECT() *Authenticator_Expecter {
	return &Authenticator_Expecter{mock: &_m.Mock}
}

// AuthenticateOIDC provides a mock function with given fields: code
func (_m *Authenticator) AuthenticateOIDC(code string) (string, error) {
	ret := _m.Called(code)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authenticator_AuthenticateOIDC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateOIDC'
type Authenticator_AuthenticateOIDC_Call struct {
	*mock.Call
}

// AuthenticateOIDC is a helper method to define mock.On call
//   - code string
func (_e *Authenticator_Expecter) AuthenticateOIDC(code interface{}) *Authenticator_AuthenticateOIDC_Call {
	return &Authenticator_AuthenticateOIDC_Call{Call: _e.mock.On("AuthenticateOIDC", code)}
}

func (_c *Authenticator_AuthenticateOIDC_Call) Run(run func(code string)) *Authenticator_AuthenticateOIDC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Authenticator_AuthenticateOIDC_Call) Return(_a0 string, _a1 error) *Authenticator_AuthenticateOIDC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Authenticator_AuthenticateOIDC_Call) RunAndReturn(run func(string) (string, error)) *Authenticator_AuthenticateOIDC_Call {
	_c.Call.Return(run)
	return _c
}

// GetOIDCConsentURL provides a mock function with given fields: redirectURL
func (_m *Authenticator) GetOIDCConsentURL(redirectURL string) string {
	ret := _m.Called(redirectURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(redirectURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Authenticator_GetOIDCConsentURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOIDCConsentURL'
type Authenticator_GetOIDCConsentURL_Call struct {
	*mock.Call
}

// GetOIDCConsentURL is a helper method to define mock.On call
//   - redirectURL string
func (_e *Authenticator_Expecter) GetOIDCConsentURL(redirectURL interface{}) *Authenticator_GetOIDCConsentURL_Call {
	return &Authenticator_GetOIDCConsentURL_Call{Call: _e.mock.On("GetOIDCConsentURL", redirectURL)}
}

func (_c *Authenticator_GetOIDCConsentURL_Call) Run(run func(redirectURL string)) *Authenticator_GetOIDCConsentURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Authenticator_GetOIDCConsentURL_Call) Return(_a0 string) *Authenticator_GetOIDCConsentURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Authenticator_GetOIDCConsentURL_Call) RunAndReturn(run func(string) string) *Authenticator_GetOIDCConsentURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function with given fields: token
func (_m *Authenticator) GetUserInfo(token string) *auth.UserInfo {
	ret := _m.Called(token)

	var r0 *auth.UserInfo
	if rf, ok := ret.Get(0).(func(string) *auth.UserInfo); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserInfo)
		}
	}

	return r0
}

// Authenticator_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type Authenticator_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - token string
func (_e *Authenticator_Expecter) GetUserInfo(token interface{}) *Authenticator_GetUserInfo_Call {
	return &Authenticator_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", token)}
}

func (_c *Authenticator_GetUserInfo_Call) Run(run func(token string)) *Authenticator_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Authenticator_GetUserInfo_Call) Return(_a0 *auth.UserInfo) *Authenticator_GetUserInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Authenticator_GetUserInfo_Call) RunAndReturn(run func(string) *auth.UserInfo) *Authenticator_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// IsJWTValid provides a mock function with given fields: token
func (_m *Authenticator) IsJWTValid(token string) bool {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Authenticator_IsJWTValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsJWTValid'
type Authenticator_IsJWTValid_Call struct {
	*mock.Call
}

// IsJWTValid is a helper method to define mock.On call
//   - token string
func (_e *Authenticator_Expecter) IsJWTValid(token interface{}) *Authenticator_IsJWTValid_Call {
	return &Authenticator_IsJWTValid_Call{Call: _e.mock.On("IsJWTValid", token)}
}

func (_c *Authenticator_IsJWTValid_Call) Run(run func(token string)) *Authenticator_IsJWTValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Authenticator_IsJWTValid_Call) Return(_a0 bool) *Authenticator_IsJWTValid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Authenticator_IsJWTValid_Call) RunAndReturn(run func(string) bool) *Authenticator_IsJWTValid_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAuthenticator interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticator(t mockConstructorTestingTNewAuthenticator) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
