// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocklogic

import (
	context "context"

	logic "github.com/lruggieri/fxnow/identity/logic"
	mock "github.com/stretchr/testify/mock"
)

// Logic is an autogenerated mock type for the Logic type
type Logic struct {
	mock.Mock
}

type Logic_Expecter struct {
	mock *mock.Mock
}

func (_m *Logic) EXPECT() *Logic_Expecter {
	return &Logic_Expecter{mock: &_m.Mock}
}

// CreateAPIKey provides a mock function with given fields: _a0, _a1
func (_m *Logic) CreateAPIKey(_a0 context.Context, _a1 logic.CreateAPIKeyRequest) (*logic.CreateAPIKeyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *logic.CreateAPIKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, logic.CreateAPIKeyRequest) (*logic.CreateAPIKeyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, logic.CreateAPIKeyRequest) *logic.CreateAPIKeyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logic.CreateAPIKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, logic.CreateAPIKeyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logic_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type Logic_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 logic.CreateAPIKeyRequest
func (_e *Logic_Expecter) CreateAPIKey(_a0 interface{}, _a1 interface{}) *Logic_CreateAPIKey_Call {
	return &Logic_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey", _a0, _a1)}
}

func (_c *Logic_CreateAPIKey_Call) Run(run func(_a0 context.Context, _a1 logic.CreateAPIKeyRequest)) *Logic_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(logic.CreateAPIKeyRequest))
	})
	return _c
}

func (_c *Logic_CreateAPIKey_Call) Return(_a0 *logic.CreateAPIKeyResponse, _a1 error) *Logic_CreateAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Logic_CreateAPIKey_Call) RunAndReturn(run func(context.Context, logic.CreateAPIKeyRequest) (*logic.CreateAPIKeyResponse, error)) *Logic_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAPIKey provides a mock function with given fields: _a0, _a1
func (_m *Logic) DeleteAPIKey(_a0 context.Context, _a1 logic.DeleteAPIKeyRequest) (*logic.DeleteAPIKeyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *logic.DeleteAPIKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, logic.DeleteAPIKeyRequest) (*logic.DeleteAPIKeyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, logic.DeleteAPIKeyRequest) *logic.DeleteAPIKeyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logic.DeleteAPIKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, logic.DeleteAPIKeyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logic_DeleteAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAPIKey'
type Logic_DeleteAPIKey_Call struct {
	*mock.Call
}

// DeleteAPIKey is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 logic.DeleteAPIKeyRequest
func (_e *Logic_Expecter) DeleteAPIKey(_a0 interface{}, _a1 interface{}) *Logic_DeleteAPIKey_Call {
	return &Logic_DeleteAPIKey_Call{Call: _e.mock.On("DeleteAPIKey", _a0, _a1)}
}

func (_c *Logic_DeleteAPIKey_Call) Run(run func(_a0 context.Context, _a1 logic.DeleteAPIKeyRequest)) *Logic_DeleteAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(logic.DeleteAPIKeyRequest))
	})
	return _c
}

func (_c *Logic_DeleteAPIKey_Call) Return(_a0 *logic.DeleteAPIKeyResponse, _a1 error) *Logic_DeleteAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Logic_DeleteAPIKey_Call) RunAndReturn(run func(context.Context, logic.DeleteAPIKeyRequest) (*logic.DeleteAPIKeyResponse, error)) *Logic_DeleteAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLogic interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogic creates a new instance of Logic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogic(t mockConstructorTestingTNewLogic) *Logic {
	mock := &Logic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
